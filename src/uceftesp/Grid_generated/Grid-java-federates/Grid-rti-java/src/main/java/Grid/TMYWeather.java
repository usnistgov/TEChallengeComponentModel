// This file was generated by the WebGME Federates Exporter plugin. Do not edit manually!

package Grid;

import java.util.HashSet;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.cpswt.utils.CpswtUtils;

import hla.rti.FederateNotExecutionMember;
import hla.rti.InteractionClassNotDefined;
import hla.rti.InteractionClassNotPublished;
import hla.rti.InteractionClassNotSubscribed;
import hla.rti.LogicalTime;
import hla.rti.NameNotFound;
import hla.rti.RTIambassador;
import hla.rti.ReceivedInteraction;

import org.cpswt.hla.*;

/**
* Implements InteractionRoot.C2WInteractionRoot.TMYWeather
*/
public class TMYWeather extends C2WInteractionRoot {

    private static final Logger logger = LogManager.getLogger();

    /**
    * Creates an instance of the TMYWeather interaction class with default parameter values.
    */
    public TMYWeather() {}

    private static int _actualLogicalGenerationTime_handle;
    private static int _aerosolOpticalDepth_handle;
    private static int _aerosolOpticalDepthSource_handle;
    private static int _aerosolOpticalDepthUncertainty_handle;
    private static int _albedo_handle;
    private static int _albedoSource_handle;
    private static int _albedoUncertainty_handle;
    private static int _ceilingHeight_handle;
    private static int _ceilingHeightSource_handle;
    private static int _ceilingHeightUncertainty_handle;
    private static int _date_handle;
    private static int _dewPointTemperature_handle;
    private static int _dewPointTemperatureSource_handle;
    private static int _dewPointTemperatureUncertainty_handle;
    private static int _diffuseHorizontalIlluminance_handle;
    private static int _diffuseHorizontalIlluminanceSource_handle;
    private static int _diffuseHorizontalIlluminanceUncertainty_handle;
    private static int _diffuseHorizontalIrradiancSource_handle;
    private static int _diffuseHorizontalIrradiancUncertainty_handle;
    private static int _diffuseHorizontalIrradiance_handle;
    private static int _directNormalIlluminance_handle;
    private static int _directNormalIlluminanceSource_handle;
    private static int _directNormalIlluminanceUncertainty_handle;
    private static int _directNormalIrradiance_handle;
    private static int _directNormalIrradianceSource_handle;
    private static int _directNormalIrradianceUncertainty_handle;
    private static int _dryBulbTemperature_handle;
    private static int _dryBulbTemperatureSource_handle;
    private static int _dryBulbTemperatureUncertainty_handle;
    private static int _elevation_handle;
    private static int _extraTerrestrialRadiation_handle;
    private static int _extraTerrestrialRadiationNormal_handle;
    private static int _federateFilter_handle;
    private static int _globalHorizontalIlluminance_handle;
    private static int _globalHorizontalIlluminanceSource_handle;
    private static int _globalHorizontalIlluminanceUncertainty_handle;
    private static int _globalHorizontalIrradiance_handle;
    private static int _globalHorizontalIrradianceSource_handle;
    private static int _globalHorizontalIrradianceUncertainty_handle;
    private static int _horizontalVisibility_handle;
    private static int _horizontalVisibilitySource_handle;
    private static int _horizontalVisibilityUncertainty_handle;
    private static int _latitude_handle;
    private static int _liquidPrecipitationDepth_handle;
    private static int _liquidPrecipitationDepthSource_handle;
    private static int _liquidPrecipitationDepthUncertainty_handle;
    private static int _liquidPrecipitationQuantity_handle;
    private static int _longitude_handle;
    private static int _opaqueSkyCover_handle;
    private static int _opaqueSkyCoverSource_handle;
    private static int _opaqueSkyCoverUncertainty_handle;
    private static int _originFed_handle;
    private static int _precipitableWater_handle;
    private static int _precipitableWaterSource_handle;
    private static int _precipitableWaterUncertainty_handle;
    private static int _presentWeather_handle;
    private static int _presentWeatherSource_handle;
    private static int _presentWeatherUncertainty_handle;
    private static int _pressure_handle;
    private static int _pressureSource_handle;
    private static int _pressureUncertainty_handle;
    private static int _relativeHumidity_handle;
    private static int _relativeHumiditySource_handle;
    private static int _relativeHumidityUncertainty_handle;
    private static int _sourceFed_handle;
    private static int _stationIDCode_handle;
    private static int _stationName_handle;
    private static int _stationState_handle;
    private static int _time_handle;
    private static int _timeZone_handle;
    private static int _totalSkyCover_handle;
    private static int _totalSkyCoverSource_handle;
    private static int _totalSkyCoverUncertainty_handle;
    private static int _windDirection_handle;
    private static int _windDirectionSource_handle;
    private static int _windDirectionUncertainty_handle;
    private static int _windSpeed_handle;
    private static int _windSpeedSource_handle;
    private static int _windSpeedUncertainty_handle;
    private static int _zenithLuminance_handle;
    private static int _zenithLuminanceSource_handle;
    private static int _zenithLuminanceUncertianty_handle;

    private static boolean _isInitialized = false;

    private static int _handle;

    /**
    * Returns the handle (RTI assigned) of the TMYWeather interaction class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the handle of the class pertaining to the reference,
    * rather than the handle of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassHandle()}.
    *
    * @return the RTI assigned integer handle that represents this interaction class
    */
    public static int get_handle() {
        return _handle;
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of the TMYWeather interaction class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the name of the class pertaining to the reference,
    * rather than the name of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassName()}.
    *
    * @return the fully-qualified HLA class path for this interaction class
    */
    public static String get_class_name() {
        return "InteractionRoot.C2WInteractionRoot.TMYWeather";
    }

    /**
    * Returns the simple name (the last name in the dot-delimited fully-qualified
    * class name) of the TMYWeather interaction class.
    *
    * @return the name of this interaction class
    */
    public static String get_simple_class_name() {
        return "TMYWeather";
    }

    private static Set< String > _datamemberNames = new HashSet< String >();
    private static Set< String > _allDatamemberNames = new HashSet< String >();

    /**
    * Returns a set containing the names of all of the non-hidden parameters in the
    * TMYWeather interaction class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #getParameterNames()}.
    *
    * @return a modifiable set of the non-hidden parameter names for this interaction class
    */
    public static Set< String > get_parameter_names() {
        return new HashSet< String >(_datamemberNames);
    }

    /**
    * Returns a set containing the names of all of the parameters in the
    * TMYWeather interaction class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #getParameterNames()}.
    *
    * @return a modifiable set of the parameter names for this interaction class
    */
    public static Set< String > get_all_parameter_names() {
        return new HashSet< String >(_allDatamemberNames);
    }

    static {
        _classNameSet.add("InteractionRoot.C2WInteractionRoot.TMYWeather");
        _classNameClassMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather", TMYWeather.class);

        _datamemberClassNameSetMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather", _datamemberNames);
        _allDatamemberClassNameSetMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather", _allDatamemberNames);

        _datamemberNames.add("aerosolOpticalDepth");
        _datamemberNames.add("aerosolOpticalDepthSource");
        _datamemberNames.add("aerosolOpticalDepthUncertainty");
        _datamemberNames.add("albedo");
        _datamemberNames.add("albedoSource");
        _datamemberNames.add("albedoUncertainty");
        _datamemberNames.add("ceilingHeight");
        _datamemberNames.add("ceilingHeightSource");
        _datamemberNames.add("ceilingHeightUncertainty");
        _datamemberNames.add("date");
        _datamemberNames.add("dewPointTemperature");
        _datamemberNames.add("dewPointTemperatureSource");
        _datamemberNames.add("dewPointTemperatureUncertainty");
        _datamemberNames.add("diffuseHorizontalIlluminance");
        _datamemberNames.add("diffuseHorizontalIlluminanceSource");
        _datamemberNames.add("diffuseHorizontalIlluminanceUncertainty");
        _datamemberNames.add("diffuseHorizontalIrradiancSource");
        _datamemberNames.add("diffuseHorizontalIrradiancUncertainty");
        _datamemberNames.add("diffuseHorizontalIrradiance");
        _datamemberNames.add("directNormalIlluminance");
        _datamemberNames.add("directNormalIlluminanceSource");
        _datamemberNames.add("directNormalIlluminanceUncertainty");
        _datamemberNames.add("directNormalIrradiance");
        _datamemberNames.add("directNormalIrradianceSource");
        _datamemberNames.add("directNormalIrradianceUncertainty");
        _datamemberNames.add("dryBulbTemperature");
        _datamemberNames.add("dryBulbTemperatureSource");
        _datamemberNames.add("dryBulbTemperatureUncertainty");
        _datamemberNames.add("elevation");
        _datamemberNames.add("extraTerrestrialRadiation");
        _datamemberNames.add("extraTerrestrialRadiationNormal");
        _datamemberNames.add("globalHorizontalIlluminance");
        _datamemberNames.add("globalHorizontalIlluminanceSource");
        _datamemberNames.add("globalHorizontalIlluminanceUncertainty");
        _datamemberNames.add("globalHorizontalIrradiance");
        _datamemberNames.add("globalHorizontalIrradianceSource");
        _datamemberNames.add("globalHorizontalIrradianceUncertainty");
        _datamemberNames.add("horizontalVisibility");
        _datamemberNames.add("horizontalVisibilitySource");
        _datamemberNames.add("horizontalVisibilityUncertainty");
        _datamemberNames.add("latitude");
        _datamemberNames.add("liquidPrecipitationDepth");
        _datamemberNames.add("liquidPrecipitationDepthSource");
        _datamemberNames.add("liquidPrecipitationDepthUncertainty");
        _datamemberNames.add("liquidPrecipitationQuantity");
        _datamemberNames.add("longitude");
        _datamemberNames.add("opaqueSkyCover");
        _datamemberNames.add("opaqueSkyCoverSource");
        _datamemberNames.add("opaqueSkyCoverUncertainty");
        _datamemberNames.add("precipitableWater");
        _datamemberNames.add("precipitableWaterSource");
        _datamemberNames.add("precipitableWaterUncertainty");
        _datamemberNames.add("presentWeather");
        _datamemberNames.add("presentWeatherSource");
        _datamemberNames.add("presentWeatherUncertainty");
        _datamemberNames.add("pressure");
        _datamemberNames.add("pressureSource");
        _datamemberNames.add("pressureUncertainty");
        _datamemberNames.add("relativeHumidity");
        _datamemberNames.add("relativeHumiditySource");
        _datamemberNames.add("relativeHumidityUncertainty");
        _datamemberNames.add("stationIDCode");
        _datamemberNames.add("stationName");
        _datamemberNames.add("stationState");
        _datamemberNames.add("time");
        _datamemberNames.add("timeZone");
        _datamemberNames.add("totalSkyCover");
        _datamemberNames.add("totalSkyCoverSource");
        _datamemberNames.add("totalSkyCoverUncertainty");
        _datamemberNames.add("windDirection");
        _datamemberNames.add("windDirectionSource");
        _datamemberNames.add("windDirectionUncertainty");
        _datamemberNames.add("windSpeed");
        _datamemberNames.add("windSpeedSource");
        _datamemberNames.add("windSpeedUncertainty");
        _datamemberNames.add("zenithLuminance");
        _datamemberNames.add("zenithLuminanceSource");
        _datamemberNames.add("zenithLuminanceUncertianty");

        _datamemberTypeMap.put("aerosolOpticalDepth", "double");
        _datamemberTypeMap.put("aerosolOpticalDepthSource", "String");
        _datamemberTypeMap.put("aerosolOpticalDepthUncertainty", "double");
        _datamemberTypeMap.put("albedo", "double");
        _datamemberTypeMap.put("albedoSource", "String");
        _datamemberTypeMap.put("albedoUncertainty", "double");
        _datamemberTypeMap.put("ceilingHeight", "double");
        _datamemberTypeMap.put("ceilingHeightSource", "String");
        _datamemberTypeMap.put("ceilingHeightUncertainty", "double");
        _datamemberTypeMap.put("date", "String");
        _datamemberTypeMap.put("dewPointTemperature", "double");
        _datamemberTypeMap.put("dewPointTemperatureSource", "String");
        _datamemberTypeMap.put("dewPointTemperatureUncertainty", "double");
        _datamemberTypeMap.put("diffuseHorizontalIlluminance", "double");
        _datamemberTypeMap.put("diffuseHorizontalIlluminanceSource", "String");
        _datamemberTypeMap.put("diffuseHorizontalIlluminanceUncertainty", "double");
        _datamemberTypeMap.put("diffuseHorizontalIrradiancSource", "String");
        _datamemberTypeMap.put("diffuseHorizontalIrradiancUncertainty", "double");
        _datamemberTypeMap.put("diffuseHorizontalIrradiance", "double");
        _datamemberTypeMap.put("directNormalIlluminance", "double");
        _datamemberTypeMap.put("directNormalIlluminanceSource", "String");
        _datamemberTypeMap.put("directNormalIlluminanceUncertainty", "double");
        _datamemberTypeMap.put("directNormalIrradiance", "double");
        _datamemberTypeMap.put("directNormalIrradianceSource", "String");
        _datamemberTypeMap.put("directNormalIrradianceUncertainty", "double");
        _datamemberTypeMap.put("dryBulbTemperature", "double");
        _datamemberTypeMap.put("dryBulbTemperatureSource", "String");
        _datamemberTypeMap.put("dryBulbTemperatureUncertainty", "double");
        _datamemberTypeMap.put("elevation", "double");
        _datamemberTypeMap.put("extraTerrestrialRadiation", "double");
        _datamemberTypeMap.put("extraTerrestrialRadiationNormal", "double");
        _datamemberTypeMap.put("globalHorizontalIlluminance", "double");
        _datamemberTypeMap.put("globalHorizontalIlluminanceSource", "String");
        _datamemberTypeMap.put("globalHorizontalIlluminanceUncertainty", "double");
        _datamemberTypeMap.put("globalHorizontalIrradiance", "double");
        _datamemberTypeMap.put("globalHorizontalIrradianceSource", "String");
        _datamemberTypeMap.put("globalHorizontalIrradianceUncertainty", "double");
        _datamemberTypeMap.put("horizontalVisibility", "double");
        _datamemberTypeMap.put("horizontalVisibilitySource", "String");
        _datamemberTypeMap.put("horizontalVisibilityUncertainty", "double");
        _datamemberTypeMap.put("latitude", "double");
        _datamemberTypeMap.put("liquidPrecipitationDepth", "double");
        _datamemberTypeMap.put("liquidPrecipitationDepthSource", "String");
        _datamemberTypeMap.put("liquidPrecipitationDepthUncertainty", "double");
        _datamemberTypeMap.put("liquidPrecipitationQuantity", "double");
        _datamemberTypeMap.put("longitude", "double");
        _datamemberTypeMap.put("opaqueSkyCover", "double");
        _datamemberTypeMap.put("opaqueSkyCoverSource", "String");
        _datamemberTypeMap.put("opaqueSkyCoverUncertainty", "double");
        _datamemberTypeMap.put("precipitableWater", "double");
        _datamemberTypeMap.put("precipitableWaterSource", "String");
        _datamemberTypeMap.put("precipitableWaterUncertainty", "double");
        _datamemberTypeMap.put("presentWeather", "double");
        _datamemberTypeMap.put("presentWeatherSource", "String");
        _datamemberTypeMap.put("presentWeatherUncertainty", "double");
        _datamemberTypeMap.put("pressure", "double");
        _datamemberTypeMap.put("pressureSource", "String");
        _datamemberTypeMap.put("pressureUncertainty", "double");
        _datamemberTypeMap.put("relativeHumidity", "double");
        _datamemberTypeMap.put("relativeHumiditySource", "String");
        _datamemberTypeMap.put("relativeHumidityUncertainty", "double");
        _datamemberTypeMap.put("stationIDCode", "int");
        _datamemberTypeMap.put("stationName", "String");
        _datamemberTypeMap.put("stationState", "String");
        _datamemberTypeMap.put("time", "String");
        _datamemberTypeMap.put("timeZone", "double");
        _datamemberTypeMap.put("totalSkyCover", "double");
        _datamemberTypeMap.put("totalSkyCoverSource", "String");
        _datamemberTypeMap.put("totalSkyCoverUncertainty", "double");
        _datamemberTypeMap.put("windDirection", "double");
        _datamemberTypeMap.put("windDirectionSource", "String");
        _datamemberTypeMap.put("windDirectionUncertainty", "double");
        _datamemberTypeMap.put("windSpeed", "double");
        _datamemberTypeMap.put("windSpeedSource", "String");
        _datamemberTypeMap.put("windSpeedUncertainty", "double");
        _datamemberTypeMap.put("zenithLuminance", "double");
        _datamemberTypeMap.put("zenithLuminanceSource", "String");
        _datamemberTypeMap.put("zenithLuminanceUncertianty", "double");

        _allDatamemberNames.add("actualLogicalGenerationTime");
        _allDatamemberNames.add("aerosolOpticalDepth");
        _allDatamemberNames.add("aerosolOpticalDepthSource");
        _allDatamemberNames.add("aerosolOpticalDepthUncertainty");
        _allDatamemberNames.add("albedo");
        _allDatamemberNames.add("albedoSource");
        _allDatamemberNames.add("albedoUncertainty");
        _allDatamemberNames.add("ceilingHeight");
        _allDatamemberNames.add("ceilingHeightSource");
        _allDatamemberNames.add("ceilingHeightUncertainty");
        _allDatamemberNames.add("date");
        _allDatamemberNames.add("dewPointTemperature");
        _allDatamemberNames.add("dewPointTemperatureSource");
        _allDatamemberNames.add("dewPointTemperatureUncertainty");
        _allDatamemberNames.add("diffuseHorizontalIlluminance");
        _allDatamemberNames.add("diffuseHorizontalIlluminanceSource");
        _allDatamemberNames.add("diffuseHorizontalIlluminanceUncertainty");
        _allDatamemberNames.add("diffuseHorizontalIrradiancSource");
        _allDatamemberNames.add("diffuseHorizontalIrradiancUncertainty");
        _allDatamemberNames.add("diffuseHorizontalIrradiance");
        _allDatamemberNames.add("directNormalIlluminance");
        _allDatamemberNames.add("directNormalIlluminanceSource");
        _allDatamemberNames.add("directNormalIlluminanceUncertainty");
        _allDatamemberNames.add("directNormalIrradiance");
        _allDatamemberNames.add("directNormalIrradianceSource");
        _allDatamemberNames.add("directNormalIrradianceUncertainty");
        _allDatamemberNames.add("dryBulbTemperature");
        _allDatamemberNames.add("dryBulbTemperatureSource");
        _allDatamemberNames.add("dryBulbTemperatureUncertainty");
        _allDatamemberNames.add("elevation");
        _allDatamemberNames.add("extraTerrestrialRadiation");
        _allDatamemberNames.add("extraTerrestrialRadiationNormal");
        _allDatamemberNames.add("federateFilter");
        _allDatamemberNames.add("globalHorizontalIlluminance");
        _allDatamemberNames.add("globalHorizontalIlluminanceSource");
        _allDatamemberNames.add("globalHorizontalIlluminanceUncertainty");
        _allDatamemberNames.add("globalHorizontalIrradiance");
        _allDatamemberNames.add("globalHorizontalIrradianceSource");
        _allDatamemberNames.add("globalHorizontalIrradianceUncertainty");
        _allDatamemberNames.add("horizontalVisibility");
        _allDatamemberNames.add("horizontalVisibilitySource");
        _allDatamemberNames.add("horizontalVisibilityUncertainty");
        _allDatamemberNames.add("latitude");
        _allDatamemberNames.add("liquidPrecipitationDepth");
        _allDatamemberNames.add("liquidPrecipitationDepthSource");
        _allDatamemberNames.add("liquidPrecipitationDepthUncertainty");
        _allDatamemberNames.add("liquidPrecipitationQuantity");
        _allDatamemberNames.add("longitude");
        _allDatamemberNames.add("opaqueSkyCover");
        _allDatamemberNames.add("opaqueSkyCoverSource");
        _allDatamemberNames.add("opaqueSkyCoverUncertainty");
        _allDatamemberNames.add("originFed");
        _allDatamemberNames.add("precipitableWater");
        _allDatamemberNames.add("precipitableWaterSource");
        _allDatamemberNames.add("precipitableWaterUncertainty");
        _allDatamemberNames.add("presentWeather");
        _allDatamemberNames.add("presentWeatherSource");
        _allDatamemberNames.add("presentWeatherUncertainty");
        _allDatamemberNames.add("pressure");
        _allDatamemberNames.add("pressureSource");
        _allDatamemberNames.add("pressureUncertainty");
        _allDatamemberNames.add("relativeHumidity");
        _allDatamemberNames.add("relativeHumiditySource");
        _allDatamemberNames.add("relativeHumidityUncertainty");
        _allDatamemberNames.add("sourceFed");
        _allDatamemberNames.add("stationIDCode");
        _allDatamemberNames.add("stationName");
        _allDatamemberNames.add("stationState");
        _allDatamemberNames.add("time");
        _allDatamemberNames.add("timeZone");
        _allDatamemberNames.add("totalSkyCover");
        _allDatamemberNames.add("totalSkyCoverSource");
        _allDatamemberNames.add("totalSkyCoverUncertainty");
        _allDatamemberNames.add("windDirection");
        _allDatamemberNames.add("windDirectionSource");
        _allDatamemberNames.add("windDirectionUncertainty");
        _allDatamemberNames.add("windSpeed");
        _allDatamemberNames.add("windSpeedSource");
        _allDatamemberNames.add("windSpeedUncertainty");
        _allDatamemberNames.add("zenithLuminance");
        _allDatamemberNames.add("zenithLuminanceSource");
        _allDatamemberNames.add("zenithLuminanceUncertianty");
    }

    protected static void init(RTIambassador rti) {
        if (_isInitialized) return;
        _isInitialized = true;

        C2WInteractionRoot.init(rti);

        boolean isNotInitialized = true;
        while(isNotInitialized) {
            try {
                _handle = rti.getInteractionClassHandle("InteractionRoot.C2WInteractionRoot.TMYWeather");
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

        _classNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather", get_handle());
        _classHandleNameMap.put(get_handle(), "InteractionRoot.C2WInteractionRoot.TMYWeather");
        _classHandleSimpleNameMap.put(get_handle(), "TMYWeather");

        isNotInitialized = true;
        while(isNotInitialized) {
            try {
                _actualLogicalGenerationTime_handle = rti.getParameterHandle("actualLogicalGenerationTime", get_handle());
                _aerosolOpticalDepth_handle = rti.getParameterHandle("aerosolOpticalDepth", get_handle());
                _aerosolOpticalDepthSource_handle = rti.getParameterHandle("aerosolOpticalDepthSource", get_handle());
                _aerosolOpticalDepthUncertainty_handle = rti.getParameterHandle("aerosolOpticalDepthUncertainty", get_handle());
                _albedo_handle = rti.getParameterHandle("albedo", get_handle());
                _albedoSource_handle = rti.getParameterHandle("albedoSource", get_handle());
                _albedoUncertainty_handle = rti.getParameterHandle("albedoUncertainty", get_handle());
                _ceilingHeight_handle = rti.getParameterHandle("ceilingHeight", get_handle());
                _ceilingHeightSource_handle = rti.getParameterHandle("ceilingHeightSource", get_handle());
                _ceilingHeightUncertainty_handle = rti.getParameterHandle("ceilingHeightUncertainty", get_handle());
                _date_handle = rti.getParameterHandle("date", get_handle());
                _dewPointTemperature_handle = rti.getParameterHandle("dewPointTemperature", get_handle());
                _dewPointTemperatureSource_handle = rti.getParameterHandle("dewPointTemperatureSource", get_handle());
                _dewPointTemperatureUncertainty_handle = rti.getParameterHandle("dewPointTemperatureUncertainty", get_handle());
                _diffuseHorizontalIlluminance_handle = rti.getParameterHandle("diffuseHorizontalIlluminance", get_handle());
                _diffuseHorizontalIlluminanceSource_handle = rti.getParameterHandle("diffuseHorizontalIlluminanceSource", get_handle());
                _diffuseHorizontalIlluminanceUncertainty_handle = rti.getParameterHandle("diffuseHorizontalIlluminanceUncertainty", get_handle());
                _diffuseHorizontalIrradiancSource_handle = rti.getParameterHandle("diffuseHorizontalIrradiancSource", get_handle());
                _diffuseHorizontalIrradiancUncertainty_handle = rti.getParameterHandle("diffuseHorizontalIrradiancUncertainty", get_handle());
                _diffuseHorizontalIrradiance_handle = rti.getParameterHandle("diffuseHorizontalIrradiance", get_handle());
                _directNormalIlluminance_handle = rti.getParameterHandle("directNormalIlluminance", get_handle());
                _directNormalIlluminanceSource_handle = rti.getParameterHandle("directNormalIlluminanceSource", get_handle());
                _directNormalIlluminanceUncertainty_handle = rti.getParameterHandle("directNormalIlluminanceUncertainty", get_handle());
                _directNormalIrradiance_handle = rti.getParameterHandle("directNormalIrradiance", get_handle());
                _directNormalIrradianceSource_handle = rti.getParameterHandle("directNormalIrradianceSource", get_handle());
                _directNormalIrradianceUncertainty_handle = rti.getParameterHandle("directNormalIrradianceUncertainty", get_handle());
                _dryBulbTemperature_handle = rti.getParameterHandle("dryBulbTemperature", get_handle());
                _dryBulbTemperatureSource_handle = rti.getParameterHandle("dryBulbTemperatureSource", get_handle());
                _dryBulbTemperatureUncertainty_handle = rti.getParameterHandle("dryBulbTemperatureUncertainty", get_handle());
                _elevation_handle = rti.getParameterHandle("elevation", get_handle());
                _extraTerrestrialRadiation_handle = rti.getParameterHandle("extraTerrestrialRadiation", get_handle());
                _extraTerrestrialRadiationNormal_handle = rti.getParameterHandle("extraTerrestrialRadiationNormal", get_handle());
                _federateFilter_handle = rti.getParameterHandle("federateFilter", get_handle());
                _globalHorizontalIlluminance_handle = rti.getParameterHandle("globalHorizontalIlluminance", get_handle());
                _globalHorizontalIlluminanceSource_handle = rti.getParameterHandle("globalHorizontalIlluminanceSource", get_handle());
                _globalHorizontalIlluminanceUncertainty_handle = rti.getParameterHandle("globalHorizontalIlluminanceUncertainty", get_handle());
                _globalHorizontalIrradiance_handle = rti.getParameterHandle("globalHorizontalIrradiance", get_handle());
                _globalHorizontalIrradianceSource_handle = rti.getParameterHandle("globalHorizontalIrradianceSource", get_handle());
                _globalHorizontalIrradianceUncertainty_handle = rti.getParameterHandle("globalHorizontalIrradianceUncertainty", get_handle());
                _horizontalVisibility_handle = rti.getParameterHandle("horizontalVisibility", get_handle());
                _horizontalVisibilitySource_handle = rti.getParameterHandle("horizontalVisibilitySource", get_handle());
                _horizontalVisibilityUncertainty_handle = rti.getParameterHandle("horizontalVisibilityUncertainty", get_handle());
                _latitude_handle = rti.getParameterHandle("latitude", get_handle());
                _liquidPrecipitationDepth_handle = rti.getParameterHandle("liquidPrecipitationDepth", get_handle());
                _liquidPrecipitationDepthSource_handle = rti.getParameterHandle("liquidPrecipitationDepthSource", get_handle());
                _liquidPrecipitationDepthUncertainty_handle = rti.getParameterHandle("liquidPrecipitationDepthUncertainty", get_handle());
                _liquidPrecipitationQuantity_handle = rti.getParameterHandle("liquidPrecipitationQuantity", get_handle());
                _longitude_handle = rti.getParameterHandle("longitude", get_handle());
                _opaqueSkyCover_handle = rti.getParameterHandle("opaqueSkyCover", get_handle());
                _opaqueSkyCoverSource_handle = rti.getParameterHandle("opaqueSkyCoverSource", get_handle());
                _opaqueSkyCoverUncertainty_handle = rti.getParameterHandle("opaqueSkyCoverUncertainty", get_handle());
                _originFed_handle = rti.getParameterHandle("originFed", get_handle());
                _precipitableWater_handle = rti.getParameterHandle("precipitableWater", get_handle());
                _precipitableWaterSource_handle = rti.getParameterHandle("precipitableWaterSource", get_handle());
                _precipitableWaterUncertainty_handle = rti.getParameterHandle("precipitableWaterUncertainty", get_handle());
                _presentWeather_handle = rti.getParameterHandle("presentWeather", get_handle());
                _presentWeatherSource_handle = rti.getParameterHandle("presentWeatherSource", get_handle());
                _presentWeatherUncertainty_handle = rti.getParameterHandle("presentWeatherUncertainty", get_handle());
                _pressure_handle = rti.getParameterHandle("pressure", get_handle());
                _pressureSource_handle = rti.getParameterHandle("pressureSource", get_handle());
                _pressureUncertainty_handle = rti.getParameterHandle("pressureUncertainty", get_handle());
                _relativeHumidity_handle = rti.getParameterHandle("relativeHumidity", get_handle());
                _relativeHumiditySource_handle = rti.getParameterHandle("relativeHumiditySource", get_handle());
                _relativeHumidityUncertainty_handle = rti.getParameterHandle("relativeHumidityUncertainty", get_handle());
                _sourceFed_handle = rti.getParameterHandle("sourceFed", get_handle());
                _stationIDCode_handle = rti.getParameterHandle("stationIDCode", get_handle());
                _stationName_handle = rti.getParameterHandle("stationName", get_handle());
                _stationState_handle = rti.getParameterHandle("stationState", get_handle());
                _time_handle = rti.getParameterHandle("time", get_handle());
                _timeZone_handle = rti.getParameterHandle("timeZone", get_handle());
                _totalSkyCover_handle = rti.getParameterHandle("totalSkyCover", get_handle());
                _totalSkyCoverSource_handle = rti.getParameterHandle("totalSkyCoverSource", get_handle());
                _totalSkyCoverUncertainty_handle = rti.getParameterHandle("totalSkyCoverUncertainty", get_handle());
                _windDirection_handle = rti.getParameterHandle("windDirection", get_handle());
                _windDirectionSource_handle = rti.getParameterHandle("windDirectionSource", get_handle());
                _windDirectionUncertainty_handle = rti.getParameterHandle("windDirectionUncertainty", get_handle());
                _windSpeed_handle = rti.getParameterHandle("windSpeed", get_handle());
                _windSpeedSource_handle = rti.getParameterHandle("windSpeedSource", get_handle());
                _windSpeedUncertainty_handle = rti.getParameterHandle("windSpeedUncertainty", get_handle());
                _zenithLuminance_handle = rti.getParameterHandle("zenithLuminance", get_handle());
                _zenithLuminanceSource_handle = rti.getParameterHandle("zenithLuminanceSource", get_handle());
                _zenithLuminanceUncertianty_handle = rti.getParameterHandle("zenithLuminanceUncertianty", get_handle());
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (InteractionClassNotDefined e) {
                logger.error("could not initialize: Interaction Class Not Defined", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.actualLogicalGenerationTime", _actualLogicalGenerationTime_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.aerosolOpticalDepth", _aerosolOpticalDepth_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.aerosolOpticalDepthSource", _aerosolOpticalDepthSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.aerosolOpticalDepthUncertainty", _aerosolOpticalDepthUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.albedo", _albedo_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.albedoSource", _albedoSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.albedoUncertainty", _albedoUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.ceilingHeight", _ceilingHeight_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.ceilingHeightSource", _ceilingHeightSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.ceilingHeightUncertainty", _ceilingHeightUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.date", _date_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.dewPointTemperature", _dewPointTemperature_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.dewPointTemperatureSource", _dewPointTemperatureSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.dewPointTemperatureUncertainty", _dewPointTemperatureUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.diffuseHorizontalIlluminance", _diffuseHorizontalIlluminance_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.diffuseHorizontalIlluminanceSource", _diffuseHorizontalIlluminanceSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.diffuseHorizontalIlluminanceUncertainty", _diffuseHorizontalIlluminanceUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.diffuseHorizontalIrradiancSource", _diffuseHorizontalIrradiancSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.diffuseHorizontalIrradiancUncertainty", _diffuseHorizontalIrradiancUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.diffuseHorizontalIrradiance", _diffuseHorizontalIrradiance_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.directNormalIlluminance", _directNormalIlluminance_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.directNormalIlluminanceSource", _directNormalIlluminanceSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.directNormalIlluminanceUncertainty", _directNormalIlluminanceUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.directNormalIrradiance", _directNormalIrradiance_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.directNormalIrradianceSource", _directNormalIrradianceSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.directNormalIrradianceUncertainty", _directNormalIrradianceUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.dryBulbTemperature", _dryBulbTemperature_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.dryBulbTemperatureSource", _dryBulbTemperatureSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.dryBulbTemperatureUncertainty", _dryBulbTemperatureUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.elevation", _elevation_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.extraTerrestrialRadiation", _extraTerrestrialRadiation_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.extraTerrestrialRadiationNormal", _extraTerrestrialRadiationNormal_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.federateFilter", _federateFilter_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.globalHorizontalIlluminance", _globalHorizontalIlluminance_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.globalHorizontalIlluminanceSource", _globalHorizontalIlluminanceSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.globalHorizontalIlluminanceUncertainty", _globalHorizontalIlluminanceUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.globalHorizontalIrradiance", _globalHorizontalIrradiance_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.globalHorizontalIrradianceSource", _globalHorizontalIrradianceSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.globalHorizontalIrradianceUncertainty", _globalHorizontalIrradianceUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.horizontalVisibility", _horizontalVisibility_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.horizontalVisibilitySource", _horizontalVisibilitySource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.horizontalVisibilityUncertainty", _horizontalVisibilityUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.latitude", _latitude_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.liquidPrecipitationDepth", _liquidPrecipitationDepth_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.liquidPrecipitationDepthSource", _liquidPrecipitationDepthSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.liquidPrecipitationDepthUncertainty", _liquidPrecipitationDepthUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.liquidPrecipitationQuantity", _liquidPrecipitationQuantity_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.longitude", _longitude_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.opaqueSkyCover", _opaqueSkyCover_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.opaqueSkyCoverSource", _opaqueSkyCoverSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.opaqueSkyCoverUncertainty", _opaqueSkyCoverUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.originFed", _originFed_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.precipitableWater", _precipitableWater_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.precipitableWaterSource", _precipitableWaterSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.precipitableWaterUncertainty", _precipitableWaterUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.presentWeather", _presentWeather_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.presentWeatherSource", _presentWeatherSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.presentWeatherUncertainty", _presentWeatherUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.pressure", _pressure_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.pressureSource", _pressureSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.pressureUncertainty", _pressureUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.relativeHumidity", _relativeHumidity_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.relativeHumiditySource", _relativeHumiditySource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.relativeHumidityUncertainty", _relativeHumidityUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.sourceFed", _sourceFed_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.stationIDCode", _stationIDCode_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.stationName", _stationName_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.stationState", _stationState_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.time", _time_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.timeZone", _timeZone_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.totalSkyCover", _totalSkyCover_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.totalSkyCoverSource", _totalSkyCoverSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.totalSkyCoverUncertainty", _totalSkyCoverUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.windDirection", _windDirection_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.windDirectionSource", _windDirectionSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.windDirectionUncertainty", _windDirectionUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.windSpeed", _windSpeed_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.windSpeedSource", _windSpeedSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.windSpeedUncertainty", _windSpeedUncertainty_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.zenithLuminance", _zenithLuminance_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.zenithLuminanceSource", _zenithLuminanceSource_handle);
        _datamemberNameHandleMap.put("InteractionRoot.C2WInteractionRoot.TMYWeather.zenithLuminanceUncertianty", _zenithLuminanceUncertianty_handle);

        _datamemberHandleNameMap.put(_actualLogicalGenerationTime_handle, "actualLogicalGenerationTime");
        _datamemberHandleNameMap.put(_aerosolOpticalDepth_handle, "aerosolOpticalDepth");
        _datamemberHandleNameMap.put(_aerosolOpticalDepthSource_handle, "aerosolOpticalDepthSource");
        _datamemberHandleNameMap.put(_aerosolOpticalDepthUncertainty_handle, "aerosolOpticalDepthUncertainty");
        _datamemberHandleNameMap.put(_albedo_handle, "albedo");
        _datamemberHandleNameMap.put(_albedoSource_handle, "albedoSource");
        _datamemberHandleNameMap.put(_albedoUncertainty_handle, "albedoUncertainty");
        _datamemberHandleNameMap.put(_ceilingHeight_handle, "ceilingHeight");
        _datamemberHandleNameMap.put(_ceilingHeightSource_handle, "ceilingHeightSource");
        _datamemberHandleNameMap.put(_ceilingHeightUncertainty_handle, "ceilingHeightUncertainty");
        _datamemberHandleNameMap.put(_date_handle, "date");
        _datamemberHandleNameMap.put(_dewPointTemperature_handle, "dewPointTemperature");
        _datamemberHandleNameMap.put(_dewPointTemperatureSource_handle, "dewPointTemperatureSource");
        _datamemberHandleNameMap.put(_dewPointTemperatureUncertainty_handle, "dewPointTemperatureUncertainty");
        _datamemberHandleNameMap.put(_diffuseHorizontalIlluminance_handle, "diffuseHorizontalIlluminance");
        _datamemberHandleNameMap.put(_diffuseHorizontalIlluminanceSource_handle, "diffuseHorizontalIlluminanceSource");
        _datamemberHandleNameMap.put(_diffuseHorizontalIlluminanceUncertainty_handle, "diffuseHorizontalIlluminanceUncertainty");
        _datamemberHandleNameMap.put(_diffuseHorizontalIrradiancSource_handle, "diffuseHorizontalIrradiancSource");
        _datamemberHandleNameMap.put(_diffuseHorizontalIrradiancUncertainty_handle, "diffuseHorizontalIrradiancUncertainty");
        _datamemberHandleNameMap.put(_diffuseHorizontalIrradiance_handle, "diffuseHorizontalIrradiance");
        _datamemberHandleNameMap.put(_directNormalIlluminance_handle, "directNormalIlluminance");
        _datamemberHandleNameMap.put(_directNormalIlluminanceSource_handle, "directNormalIlluminanceSource");
        _datamemberHandleNameMap.put(_directNormalIlluminanceUncertainty_handle, "directNormalIlluminanceUncertainty");
        _datamemberHandleNameMap.put(_directNormalIrradiance_handle, "directNormalIrradiance");
        _datamemberHandleNameMap.put(_directNormalIrradianceSource_handle, "directNormalIrradianceSource");
        _datamemberHandleNameMap.put(_directNormalIrradianceUncertainty_handle, "directNormalIrradianceUncertainty");
        _datamemberHandleNameMap.put(_dryBulbTemperature_handle, "dryBulbTemperature");
        _datamemberHandleNameMap.put(_dryBulbTemperatureSource_handle, "dryBulbTemperatureSource");
        _datamemberHandleNameMap.put(_dryBulbTemperatureUncertainty_handle, "dryBulbTemperatureUncertainty");
        _datamemberHandleNameMap.put(_elevation_handle, "elevation");
        _datamemberHandleNameMap.put(_extraTerrestrialRadiation_handle, "extraTerrestrialRadiation");
        _datamemberHandleNameMap.put(_extraTerrestrialRadiationNormal_handle, "extraTerrestrialRadiationNormal");
        _datamemberHandleNameMap.put(_federateFilter_handle, "federateFilter");
        _datamemberHandleNameMap.put(_globalHorizontalIlluminance_handle, "globalHorizontalIlluminance");
        _datamemberHandleNameMap.put(_globalHorizontalIlluminanceSource_handle, "globalHorizontalIlluminanceSource");
        _datamemberHandleNameMap.put(_globalHorizontalIlluminanceUncertainty_handle, "globalHorizontalIlluminanceUncertainty");
        _datamemberHandleNameMap.put(_globalHorizontalIrradiance_handle, "globalHorizontalIrradiance");
        _datamemberHandleNameMap.put(_globalHorizontalIrradianceSource_handle, "globalHorizontalIrradianceSource");
        _datamemberHandleNameMap.put(_globalHorizontalIrradianceUncertainty_handle, "globalHorizontalIrradianceUncertainty");
        _datamemberHandleNameMap.put(_horizontalVisibility_handle, "horizontalVisibility");
        _datamemberHandleNameMap.put(_horizontalVisibilitySource_handle, "horizontalVisibilitySource");
        _datamemberHandleNameMap.put(_horizontalVisibilityUncertainty_handle, "horizontalVisibilityUncertainty");
        _datamemberHandleNameMap.put(_latitude_handle, "latitude");
        _datamemberHandleNameMap.put(_liquidPrecipitationDepth_handle, "liquidPrecipitationDepth");
        _datamemberHandleNameMap.put(_liquidPrecipitationDepthSource_handle, "liquidPrecipitationDepthSource");
        _datamemberHandleNameMap.put(_liquidPrecipitationDepthUncertainty_handle, "liquidPrecipitationDepthUncertainty");
        _datamemberHandleNameMap.put(_liquidPrecipitationQuantity_handle, "liquidPrecipitationQuantity");
        _datamemberHandleNameMap.put(_longitude_handle, "longitude");
        _datamemberHandleNameMap.put(_opaqueSkyCover_handle, "opaqueSkyCover");
        _datamemberHandleNameMap.put(_opaqueSkyCoverSource_handle, "opaqueSkyCoverSource");
        _datamemberHandleNameMap.put(_opaqueSkyCoverUncertainty_handle, "opaqueSkyCoverUncertainty");
        _datamemberHandleNameMap.put(_originFed_handle, "originFed");
        _datamemberHandleNameMap.put(_precipitableWater_handle, "precipitableWater");
        _datamemberHandleNameMap.put(_precipitableWaterSource_handle, "precipitableWaterSource");
        _datamemberHandleNameMap.put(_precipitableWaterUncertainty_handle, "precipitableWaterUncertainty");
        _datamemberHandleNameMap.put(_presentWeather_handle, "presentWeather");
        _datamemberHandleNameMap.put(_presentWeatherSource_handle, "presentWeatherSource");
        _datamemberHandleNameMap.put(_presentWeatherUncertainty_handle, "presentWeatherUncertainty");
        _datamemberHandleNameMap.put(_pressure_handle, "pressure");
        _datamemberHandleNameMap.put(_pressureSource_handle, "pressureSource");
        _datamemberHandleNameMap.put(_pressureUncertainty_handle, "pressureUncertainty");
        _datamemberHandleNameMap.put(_relativeHumidity_handle, "relativeHumidity");
        _datamemberHandleNameMap.put(_relativeHumiditySource_handle, "relativeHumiditySource");
        _datamemberHandleNameMap.put(_relativeHumidityUncertainty_handle, "relativeHumidityUncertainty");
        _datamemberHandleNameMap.put(_sourceFed_handle, "sourceFed");
        _datamemberHandleNameMap.put(_stationIDCode_handle, "stationIDCode");
        _datamemberHandleNameMap.put(_stationName_handle, "stationName");
        _datamemberHandleNameMap.put(_stationState_handle, "stationState");
        _datamemberHandleNameMap.put(_time_handle, "time");
        _datamemberHandleNameMap.put(_timeZone_handle, "timeZone");
        _datamemberHandleNameMap.put(_totalSkyCover_handle, "totalSkyCover");
        _datamemberHandleNameMap.put(_totalSkyCoverSource_handle, "totalSkyCoverSource");
        _datamemberHandleNameMap.put(_totalSkyCoverUncertainty_handle, "totalSkyCoverUncertainty");
        _datamemberHandleNameMap.put(_windDirection_handle, "windDirection");
        _datamemberHandleNameMap.put(_windDirectionSource_handle, "windDirectionSource");
        _datamemberHandleNameMap.put(_windDirectionUncertainty_handle, "windDirectionUncertainty");
        _datamemberHandleNameMap.put(_windSpeed_handle, "windSpeed");
        _datamemberHandleNameMap.put(_windSpeedSource_handle, "windSpeedSource");
        _datamemberHandleNameMap.put(_windSpeedUncertainty_handle, "windSpeedUncertainty");
        _datamemberHandleNameMap.put(_zenithLuminance_handle, "zenithLuminance");
        _datamemberHandleNameMap.put(_zenithLuminanceSource_handle, "zenithLuminanceSource");
        _datamemberHandleNameMap.put(_zenithLuminanceUncertianty_handle, "zenithLuminanceUncertianty");
    }

    private static boolean _isPublished = false;

    /**
    * Publishes the TMYWeather interaction class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void publish(RTIambassador rti) {
        if (_isPublished) return;

        init(rti);

        synchronized(rti) {
            boolean isNotPublished = true;
            while(isNotPublished) {
                try {
                    rti.publishInteractionClass(get_handle());
                    isNotPublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not publish: Federate Not Execution Member", e);
                    return;
                } catch (InteractionClassNotDefined e) {
                    logger.error("could not publish: Interaction Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = true;
        logger.debug("publish: {}", get_class_name());
    }

    /**
    * Unpublishes the TMYWeather interaction class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unpublish(RTIambassador rti) {
        if (!_isPublished) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnpublished = true;
            while(isNotUnpublished) {
                try {
                    rti.unpublishInteractionClass(get_handle());
                    isNotUnpublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unpublish: Federate Not Execution Member", e);
                    return;
                } catch (InteractionClassNotDefined e) {
                    logger.error("could not unpublish: Interaction Class Not Defined", e);
                    return;
                } catch (InteractionClassNotPublished e) {
                    logger.error("could not unpublish: Interaction Class Not Published", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = false;
        logger.debug("unpublish: {}", get_class_name());
    }

    private static boolean _isSubscribed = false;

    /**
    * Subscribes a federate to the TMYWeather interaction class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void subscribe(RTIambassador rti) {
        if (_isSubscribed) return;

        init(rti);

        synchronized(rti) {
            boolean isNotSubscribed = true;
            while(isNotSubscribed) {
                try {
                    rti.subscribeInteractionClass(get_handle());
                    isNotSubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not subscribe: Federate Not Execution Member", e);
                    return;
                } catch (InteractionClassNotDefined e) {
                    logger.error("could not subscribe: Interaction Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = true;
        logger.debug("subscribe: {}", get_class_name());
    }

    /**
    * Unsubscribes a federate from the TMYWeather interaction class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unsubscribe(RTIambassador rti) {
        if (!_isSubscribed) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnsubscribed = true;
            while(isNotUnsubscribed) {
                try {
                    rti.unsubscribeInteractionClass(get_handle());
                    isNotUnsubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unsubscribe: Federate Not Execution Member", e);
                    return;
                } catch (InteractionClassNotDefined e) {
                    logger.error("could not unsubscribe: Interaction Class Not Defined", e);
                    return;
                } catch (InteractionClassNotSubscribed e) {
                    logger.error("could not unsubscribe: Interaction Class Not Subscribed", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = false;
        logger.debug("unsubscribe: {}", get_class_name());
    }

    /**
    * Return true if "handle" is equal to the handle (RTI assigned) of this class
    * (that is, the TMYWeather interaction class).
    *
    * @param handle handle to compare to the value of the handle (RTI assigned) of
    * this class (the TMYWeather interaction class).
    * @return "true" if "handle" matches the value of the handle of this class
    * (that is, the TMYWeather interaction class).
    */
    public static boolean match(int handle) {
        return handle == get_handle();
    }

    /**
    * Returns the handle (RTI assigned) of this instance's interaction class .
    *
    * @return the handle (RTI assigned) if this instance's interaction class
    */
    public int getClassHandle() {
        return get_handle();
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of this instance's interaction class.
    *
    * @return the fully-qualified (dot-delimited) name of this instance's interaction class
    */
    public String getClassName() {
        return get_class_name();
    }

    /**
    * Returns the simple name (last name in its fully-qualified dot-delimited name)
    * of this instance's interaction class.
    *
    * @return the simple name of this instance's interaction class
    */
    public String getSimpleClassName() {
        return get_simple_class_name();
    }

    /**
    * Returns a set containing the names of all of the non-hiddenparameters of an
    * interaction class instance.
    *
    * @return set containing the names of all of the parameters of an
    * interaction class instance
    */
    public Set< String > getParameterNames() {
        return get_parameter_names();
    }

    /**
    * Returns a set containing the names of all of the parameters of an
    * interaction class instance.
    *
    * @return set containing the names of all of the parameters of an
    * interaction class instance
    */
    public Set< String > getAllParameterNames() {
        return get_all_parameter_names();
    }

    @Override
    public String getParameterName(int datamemberHandle) {
        if (datamemberHandle == _actualLogicalGenerationTime_handle) return "actualLogicalGenerationTime";
        else if (datamemberHandle == _aerosolOpticalDepth_handle) return "aerosolOpticalDepth";
        else if (datamemberHandle == _aerosolOpticalDepthSource_handle) return "aerosolOpticalDepthSource";
        else if (datamemberHandle == _aerosolOpticalDepthUncertainty_handle) return "aerosolOpticalDepthUncertainty";
        else if (datamemberHandle == _albedo_handle) return "albedo";
        else if (datamemberHandle == _albedoSource_handle) return "albedoSource";
        else if (datamemberHandle == _albedoUncertainty_handle) return "albedoUncertainty";
        else if (datamemberHandle == _ceilingHeight_handle) return "ceilingHeight";
        else if (datamemberHandle == _ceilingHeightSource_handle) return "ceilingHeightSource";
        else if (datamemberHandle == _ceilingHeightUncertainty_handle) return "ceilingHeightUncertainty";
        else if (datamemberHandle == _date_handle) return "date";
        else if (datamemberHandle == _dewPointTemperature_handle) return "dewPointTemperature";
        else if (datamemberHandle == _dewPointTemperatureSource_handle) return "dewPointTemperatureSource";
        else if (datamemberHandle == _dewPointTemperatureUncertainty_handle) return "dewPointTemperatureUncertainty";
        else if (datamemberHandle == _diffuseHorizontalIlluminance_handle) return "diffuseHorizontalIlluminance";
        else if (datamemberHandle == _diffuseHorizontalIlluminanceSource_handle) return "diffuseHorizontalIlluminanceSource";
        else if (datamemberHandle == _diffuseHorizontalIlluminanceUncertainty_handle) return "diffuseHorizontalIlluminanceUncertainty";
        else if (datamemberHandle == _diffuseHorizontalIrradiancSource_handle) return "diffuseHorizontalIrradiancSource";
        else if (datamemberHandle == _diffuseHorizontalIrradiancUncertainty_handle) return "diffuseHorizontalIrradiancUncertainty";
        else if (datamemberHandle == _diffuseHorizontalIrradiance_handle) return "diffuseHorizontalIrradiance";
        else if (datamemberHandle == _directNormalIlluminance_handle) return "directNormalIlluminance";
        else if (datamemberHandle == _directNormalIlluminanceSource_handle) return "directNormalIlluminanceSource";
        else if (datamemberHandle == _directNormalIlluminanceUncertainty_handle) return "directNormalIlluminanceUncertainty";
        else if (datamemberHandle == _directNormalIrradiance_handle) return "directNormalIrradiance";
        else if (datamemberHandle == _directNormalIrradianceSource_handle) return "directNormalIrradianceSource";
        else if (datamemberHandle == _directNormalIrradianceUncertainty_handle) return "directNormalIrradianceUncertainty";
        else if (datamemberHandle == _dryBulbTemperature_handle) return "dryBulbTemperature";
        else if (datamemberHandle == _dryBulbTemperatureSource_handle) return "dryBulbTemperatureSource";
        else if (datamemberHandle == _dryBulbTemperatureUncertainty_handle) return "dryBulbTemperatureUncertainty";
        else if (datamemberHandle == _elevation_handle) return "elevation";
        else if (datamemberHandle == _extraTerrestrialRadiation_handle) return "extraTerrestrialRadiation";
        else if (datamemberHandle == _extraTerrestrialRadiationNormal_handle) return "extraTerrestrialRadiationNormal";
        else if (datamemberHandle == _federateFilter_handle) return "federateFilter";
        else if (datamemberHandle == _globalHorizontalIlluminance_handle) return "globalHorizontalIlluminance";
        else if (datamemberHandle == _globalHorizontalIlluminanceSource_handle) return "globalHorizontalIlluminanceSource";
        else if (datamemberHandle == _globalHorizontalIlluminanceUncertainty_handle) return "globalHorizontalIlluminanceUncertainty";
        else if (datamemberHandle == _globalHorizontalIrradiance_handle) return "globalHorizontalIrradiance";
        else if (datamemberHandle == _globalHorizontalIrradianceSource_handle) return "globalHorizontalIrradianceSource";
        else if (datamemberHandle == _globalHorizontalIrradianceUncertainty_handle) return "globalHorizontalIrradianceUncertainty";
        else if (datamemberHandle == _horizontalVisibility_handle) return "horizontalVisibility";
        else if (datamemberHandle == _horizontalVisibilitySource_handle) return "horizontalVisibilitySource";
        else if (datamemberHandle == _horizontalVisibilityUncertainty_handle) return "horizontalVisibilityUncertainty";
        else if (datamemberHandle == _latitude_handle) return "latitude";
        else if (datamemberHandle == _liquidPrecipitationDepth_handle) return "liquidPrecipitationDepth";
        else if (datamemberHandle == _liquidPrecipitationDepthSource_handle) return "liquidPrecipitationDepthSource";
        else if (datamemberHandle == _liquidPrecipitationDepthUncertainty_handle) return "liquidPrecipitationDepthUncertainty";
        else if (datamemberHandle == _liquidPrecipitationQuantity_handle) return "liquidPrecipitationQuantity";
        else if (datamemberHandle == _longitude_handle) return "longitude";
        else if (datamemberHandle == _opaqueSkyCover_handle) return "opaqueSkyCover";
        else if (datamemberHandle == _opaqueSkyCoverSource_handle) return "opaqueSkyCoverSource";
        else if (datamemberHandle == _opaqueSkyCoverUncertainty_handle) return "opaqueSkyCoverUncertainty";
        else if (datamemberHandle == _originFed_handle) return "originFed";
        else if (datamemberHandle == _precipitableWater_handle) return "precipitableWater";
        else if (datamemberHandle == _precipitableWaterSource_handle) return "precipitableWaterSource";
        else if (datamemberHandle == _precipitableWaterUncertainty_handle) return "precipitableWaterUncertainty";
        else if (datamemberHandle == _presentWeather_handle) return "presentWeather";
        else if (datamemberHandle == _presentWeatherSource_handle) return "presentWeatherSource";
        else if (datamemberHandle == _presentWeatherUncertainty_handle) return "presentWeatherUncertainty";
        else if (datamemberHandle == _pressure_handle) return "pressure";
        else if (datamemberHandle == _pressureSource_handle) return "pressureSource";
        else if (datamemberHandle == _pressureUncertainty_handle) return "pressureUncertainty";
        else if (datamemberHandle == _relativeHumidity_handle) return "relativeHumidity";
        else if (datamemberHandle == _relativeHumiditySource_handle) return "relativeHumiditySource";
        else if (datamemberHandle == _relativeHumidityUncertainty_handle) return "relativeHumidityUncertainty";
        else if (datamemberHandle == _sourceFed_handle) return "sourceFed";
        else if (datamemberHandle == _stationIDCode_handle) return "stationIDCode";
        else if (datamemberHandle == _stationName_handle) return "stationName";
        else if (datamemberHandle == _stationState_handle) return "stationState";
        else if (datamemberHandle == _time_handle) return "time";
        else if (datamemberHandle == _timeZone_handle) return "timeZone";
        else if (datamemberHandle == _totalSkyCover_handle) return "totalSkyCover";
        else if (datamemberHandle == _totalSkyCoverSource_handle) return "totalSkyCoverSource";
        else if (datamemberHandle == _totalSkyCoverUncertainty_handle) return "totalSkyCoverUncertainty";
        else if (datamemberHandle == _windDirection_handle) return "windDirection";
        else if (datamemberHandle == _windDirectionSource_handle) return "windDirectionSource";
        else if (datamemberHandle == _windDirectionUncertainty_handle) return "windDirectionUncertainty";
        else if (datamemberHandle == _windSpeed_handle) return "windSpeed";
        else if (datamemberHandle == _windSpeedSource_handle) return "windSpeedSource";
        else if (datamemberHandle == _windSpeedUncertainty_handle) return "windSpeedUncertainty";
        else if (datamemberHandle == _zenithLuminance_handle) return "zenithLuminance";
        else if (datamemberHandle == _zenithLuminanceSource_handle) return "zenithLuminanceSource";
        else if (datamemberHandle == _zenithLuminanceUncertianty_handle) return "zenithLuminanceUncertianty";
        else return super.getParameterName(datamemberHandle);
    }

    /**
    * Publishes the interaction class of this instance of the class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void publishInteraction(RTIambassador rti) {
        publish(rti);
    }

    /**
    * Unpublishes the interaction class of this instance of this class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unpublishInteraction(RTIambassador rti) {
        unpublish(rti);
    }

    /**
    * Subscribes a federate to the interaction class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void subscribeInteraction(RTIambassador rti) {
        subscribe(rti);
    }

    /**
    * Unsubscribes a federate from the interaction class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unsubscribeInteraction(RTIambassador rti) {
        unsubscribe(rti);
    }

    @Override
    public String toString() {
        return getClass().getName() + "("
                + "actualLogicalGenerationTime:" + get_actualLogicalGenerationTime()
                + "," + "aerosolOpticalDepth:" + get_aerosolOpticalDepth()
                + "," + "aerosolOpticalDepthSource:" + get_aerosolOpticalDepthSource()
                + "," + "aerosolOpticalDepthUncertainty:" + get_aerosolOpticalDepthUncertainty()
                + "," + "albedo:" + get_albedo()
                + "," + "albedoSource:" + get_albedoSource()
                + "," + "albedoUncertainty:" + get_albedoUncertainty()
                + "," + "ceilingHeight:" + get_ceilingHeight()
                + "," + "ceilingHeightSource:" + get_ceilingHeightSource()
                + "," + "ceilingHeightUncertainty:" + get_ceilingHeightUncertainty()
                + "," + "date:" + get_date()
                + "," + "dewPointTemperature:" + get_dewPointTemperature()
                + "," + "dewPointTemperatureSource:" + get_dewPointTemperatureSource()
                + "," + "dewPointTemperatureUncertainty:" + get_dewPointTemperatureUncertainty()
                + "," + "diffuseHorizontalIlluminance:" + get_diffuseHorizontalIlluminance()
                + "," + "diffuseHorizontalIlluminanceSource:" + get_diffuseHorizontalIlluminanceSource()
                + "," + "diffuseHorizontalIlluminanceUncertainty:" + get_diffuseHorizontalIlluminanceUncertainty()
                + "," + "diffuseHorizontalIrradiancSource:" + get_diffuseHorizontalIrradiancSource()
                + "," + "diffuseHorizontalIrradiancUncertainty:" + get_diffuseHorizontalIrradiancUncertainty()
                + "," + "diffuseHorizontalIrradiance:" + get_diffuseHorizontalIrradiance()
                + "," + "directNormalIlluminance:" + get_directNormalIlluminance()
                + "," + "directNormalIlluminanceSource:" + get_directNormalIlluminanceSource()
                + "," + "directNormalIlluminanceUncertainty:" + get_directNormalIlluminanceUncertainty()
                + "," + "directNormalIrradiance:" + get_directNormalIrradiance()
                + "," + "directNormalIrradianceSource:" + get_directNormalIrradianceSource()
                + "," + "directNormalIrradianceUncertainty:" + get_directNormalIrradianceUncertainty()
                + "," + "dryBulbTemperature:" + get_dryBulbTemperature()
                + "," + "dryBulbTemperatureSource:" + get_dryBulbTemperatureSource()
                + "," + "dryBulbTemperatureUncertainty:" + get_dryBulbTemperatureUncertainty()
                + "," + "elevation:" + get_elevation()
                + "," + "extraTerrestrialRadiation:" + get_extraTerrestrialRadiation()
                + "," + "extraTerrestrialRadiationNormal:" + get_extraTerrestrialRadiationNormal()
                + "," + "federateFilter:" + get_federateFilter()
                + "," + "globalHorizontalIlluminance:" + get_globalHorizontalIlluminance()
                + "," + "globalHorizontalIlluminanceSource:" + get_globalHorizontalIlluminanceSource()
                + "," + "globalHorizontalIlluminanceUncertainty:" + get_globalHorizontalIlluminanceUncertainty()
                + "," + "globalHorizontalIrradiance:" + get_globalHorizontalIrradiance()
                + "," + "globalHorizontalIrradianceSource:" + get_globalHorizontalIrradianceSource()
                + "," + "globalHorizontalIrradianceUncertainty:" + get_globalHorizontalIrradianceUncertainty()
                + "," + "horizontalVisibility:" + get_horizontalVisibility()
                + "," + "horizontalVisibilitySource:" + get_horizontalVisibilitySource()
                + "," + "horizontalVisibilityUncertainty:" + get_horizontalVisibilityUncertainty()
                + "," + "latitude:" + get_latitude()
                + "," + "liquidPrecipitationDepth:" + get_liquidPrecipitationDepth()
                + "," + "liquidPrecipitationDepthSource:" + get_liquidPrecipitationDepthSource()
                + "," + "liquidPrecipitationDepthUncertainty:" + get_liquidPrecipitationDepthUncertainty()
                + "," + "liquidPrecipitationQuantity:" + get_liquidPrecipitationQuantity()
                + "," + "longitude:" + get_longitude()
                + "," + "opaqueSkyCover:" + get_opaqueSkyCover()
                + "," + "opaqueSkyCoverSource:" + get_opaqueSkyCoverSource()
                + "," + "opaqueSkyCoverUncertainty:" + get_opaqueSkyCoverUncertainty()
                + "," + "originFed:" + get_originFed()
                + "," + "precipitableWater:" + get_precipitableWater()
                + "," + "precipitableWaterSource:" + get_precipitableWaterSource()
                + "," + "precipitableWaterUncertainty:" + get_precipitableWaterUncertainty()
                + "," + "presentWeather:" + get_presentWeather()
                + "," + "presentWeatherSource:" + get_presentWeatherSource()
                + "," + "presentWeatherUncertainty:" + get_presentWeatherUncertainty()
                + "," + "pressure:" + get_pressure()
                + "," + "pressureSource:" + get_pressureSource()
                + "," + "pressureUncertainty:" + get_pressureUncertainty()
                + "," + "relativeHumidity:" + get_relativeHumidity()
                + "," + "relativeHumiditySource:" + get_relativeHumiditySource()
                + "," + "relativeHumidityUncertainty:" + get_relativeHumidityUncertainty()
                + "," + "sourceFed:" + get_sourceFed()
                + "," + "stationIDCode:" + get_stationIDCode()
                + "," + "stationName:" + get_stationName()
                + "," + "stationState:" + get_stationState()
                + "," + "time:" + get_time()
                + "," + "timeZone:" + get_timeZone()
                + "," + "totalSkyCover:" + get_totalSkyCover()
                + "," + "totalSkyCoverSource:" + get_totalSkyCoverSource()
                + "," + "totalSkyCoverUncertainty:" + get_totalSkyCoverUncertainty()
                + "," + "windDirection:" + get_windDirection()
                + "," + "windDirectionSource:" + get_windDirectionSource()
                + "," + "windDirectionUncertainty:" + get_windDirectionUncertainty()
                + "," + "windSpeed:" + get_windSpeed()
                + "," + "windSpeedSource:" + get_windSpeedSource()
                + "," + "windSpeedUncertainty:" + get_windSpeedUncertainty()
                + "," + "zenithLuminance:" + get_zenithLuminance()
                + "," + "zenithLuminanceSource:" + get_zenithLuminanceSource()
                + "," + "zenithLuminanceUncertianty:" + get_zenithLuminanceUncertianty()
                + ")";
    }

    private double _aerosolOpticalDepth = 0;
    private String _aerosolOpticalDepthSource = "";
    private double _aerosolOpticalDepthUncertainty = 0;
    private double _albedo = 0;
    private String _albedoSource = "";
    private double _albedoUncertainty = 0;
    private double _ceilingHeight = 0;
    private String _ceilingHeightSource = "";
    private double _ceilingHeightUncertainty = 0;
    private String _date = "";
    private double _dewPointTemperature = 0;
    private String _dewPointTemperatureSource = "";
    private double _dewPointTemperatureUncertainty = 0;
    private double _diffuseHorizontalIlluminance = 0;
    private String _diffuseHorizontalIlluminanceSource = "";
    private double _diffuseHorizontalIlluminanceUncertainty = 0;
    private String _diffuseHorizontalIrradiancSource = "";
    private double _diffuseHorizontalIrradiancUncertainty = 0;
    private double _diffuseHorizontalIrradiance = 0;
    private double _directNormalIlluminance = 0;
    private String _directNormalIlluminanceSource = "";
    private double _directNormalIlluminanceUncertainty = 0;
    private double _directNormalIrradiance = 0;
    private String _directNormalIrradianceSource = "";
    private double _directNormalIrradianceUncertainty = 0;
    private double _dryBulbTemperature = 0;
    private String _dryBulbTemperatureSource = "";
    private double _dryBulbTemperatureUncertainty = 0;
    private double _elevation = 0;
    private double _extraTerrestrialRadiation = 0;
    private double _extraTerrestrialRadiationNormal = 0;
    private double _globalHorizontalIlluminance = 0;
    private String _globalHorizontalIlluminanceSource = "";
    private double _globalHorizontalIlluminanceUncertainty = 0;
    private double _globalHorizontalIrradiance = 0;
    private String _globalHorizontalIrradianceSource = "";
    private double _globalHorizontalIrradianceUncertainty = 0;
    private double _horizontalVisibility = 0;
    private String _horizontalVisibilitySource = "";
    private double _horizontalVisibilityUncertainty = 0;
    private double _latitude = 0;
    private double _liquidPrecipitationDepth = 0;
    private String _liquidPrecipitationDepthSource = "";
    private double _liquidPrecipitationDepthUncertainty = 0;
    private double _liquidPrecipitationQuantity = 0;
    private double _longitude = 0;
    private double _opaqueSkyCover = 0;
    private String _opaqueSkyCoverSource = "";
    private double _opaqueSkyCoverUncertainty = 0;
    private double _precipitableWater = 0;
    private String _precipitableWaterSource = "";
    private double _precipitableWaterUncertainty = 0;
    private double _presentWeather = 0;
    private String _presentWeatherSource = "";
    private double _presentWeatherUncertainty = 0;
    private double _pressure = 0;
    private String _pressureSource = "";
    private double _pressureUncertainty = 0;
    private double _relativeHumidity = 0;
    private String _relativeHumiditySource = "";
    private double _relativeHumidityUncertainty = 0;
    private int _stationIDCode = 0;
    private String _stationName = "";
    private String _stationState = "";
    private String _time = "";
    private double _timeZone = 0;
    private double _totalSkyCover = 0;
    private String _totalSkyCoverSource = "";
    private double _totalSkyCoverUncertainty = 0;
    private double _windDirection = 0;
    private String _windDirectionSource = "";
    private double _windDirectionUncertainty = 0;
    private double _windSpeed = 0;
    private String _windSpeedSource = "";
    private double _windSpeedUncertainty = 0;
    private double _zenithLuminance = 0;
    private String _zenithLuminanceSource = "";
    private double _zenithLuminanceUncertianty = 0;

    /**
    * Set the value of the "aerosolOpticalDepth" parameter to "value" for this parameter.
    *
    * @param value the new value for the "aerosolOpticalDepth" parameter
    */
    public void set_aerosolOpticalDepth( double value ) {
        _aerosolOpticalDepth = value;
    }

    /**
    * Returns the value of the "aerosolOpticalDepth" parameter of this interaction.
    *
    * @return the value of the "aerosolOpticalDepth" parameter
    */
    public double get_aerosolOpticalDepth() {
        return _aerosolOpticalDepth;
    }
    /**
    * Set the value of the "aerosolOpticalDepthSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "aerosolOpticalDepthSource" parameter
    */
    public void set_aerosolOpticalDepthSource( String value ) {
        _aerosolOpticalDepthSource = value;
    }

    /**
    * Returns the value of the "aerosolOpticalDepthSource" parameter of this interaction.
    *
    * @return the value of the "aerosolOpticalDepthSource" parameter
    */
    public String get_aerosolOpticalDepthSource() {
        return _aerosolOpticalDepthSource;
    }
    /**
    * Set the value of the "aerosolOpticalDepthUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "aerosolOpticalDepthUncertainty" parameter
    */
    public void set_aerosolOpticalDepthUncertainty( double value ) {
        _aerosolOpticalDepthUncertainty = value;
    }

    /**
    * Returns the value of the "aerosolOpticalDepthUncertainty" parameter of this interaction.
    *
    * @return the value of the "aerosolOpticalDepthUncertainty" parameter
    */
    public double get_aerosolOpticalDepthUncertainty() {
        return _aerosolOpticalDepthUncertainty;
    }
    /**
    * Set the value of the "albedo" parameter to "value" for this parameter.
    *
    * @param value the new value for the "albedo" parameter
    */
    public void set_albedo( double value ) {
        _albedo = value;
    }

    /**
    * Returns the value of the "albedo" parameter of this interaction.
    *
    * @return the value of the "albedo" parameter
    */
    public double get_albedo() {
        return _albedo;
    }
    /**
    * Set the value of the "albedoSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "albedoSource" parameter
    */
    public void set_albedoSource( String value ) {
        _albedoSource = value;
    }

    /**
    * Returns the value of the "albedoSource" parameter of this interaction.
    *
    * @return the value of the "albedoSource" parameter
    */
    public String get_albedoSource() {
        return _albedoSource;
    }
    /**
    * Set the value of the "albedoUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "albedoUncertainty" parameter
    */
    public void set_albedoUncertainty( double value ) {
        _albedoUncertainty = value;
    }

    /**
    * Returns the value of the "albedoUncertainty" parameter of this interaction.
    *
    * @return the value of the "albedoUncertainty" parameter
    */
    public double get_albedoUncertainty() {
        return _albedoUncertainty;
    }
    /**
    * Set the value of the "ceilingHeight" parameter to "value" for this parameter.
    *
    * @param value the new value for the "ceilingHeight" parameter
    */
    public void set_ceilingHeight( double value ) {
        _ceilingHeight = value;
    }

    /**
    * Returns the value of the "ceilingHeight" parameter of this interaction.
    *
    * @return the value of the "ceilingHeight" parameter
    */
    public double get_ceilingHeight() {
        return _ceilingHeight;
    }
    /**
    * Set the value of the "ceilingHeightSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "ceilingHeightSource" parameter
    */
    public void set_ceilingHeightSource( String value ) {
        _ceilingHeightSource = value;
    }

    /**
    * Returns the value of the "ceilingHeightSource" parameter of this interaction.
    *
    * @return the value of the "ceilingHeightSource" parameter
    */
    public String get_ceilingHeightSource() {
        return _ceilingHeightSource;
    }
    /**
    * Set the value of the "ceilingHeightUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "ceilingHeightUncertainty" parameter
    */
    public void set_ceilingHeightUncertainty( double value ) {
        _ceilingHeightUncertainty = value;
    }

    /**
    * Returns the value of the "ceilingHeightUncertainty" parameter of this interaction.
    *
    * @return the value of the "ceilingHeightUncertainty" parameter
    */
    public double get_ceilingHeightUncertainty() {
        return _ceilingHeightUncertainty;
    }
    /**
    * Set the value of the "date" parameter to "value" for this parameter.
    *
    * @param value the new value for the "date" parameter
    */
    public void set_date( String value ) {
        _date = value;
    }

    /**
    * Returns the value of the "date" parameter of this interaction.
    *
    * @return the value of the "date" parameter
    */
    public String get_date() {
        return _date;
    }
    /**
    * Set the value of the "dewPointTemperature" parameter to "value" for this parameter.
    *
    * @param value the new value for the "dewPointTemperature" parameter
    */
    public void set_dewPointTemperature( double value ) {
        _dewPointTemperature = value;
    }

    /**
    * Returns the value of the "dewPointTemperature" parameter of this interaction.
    *
    * @return the value of the "dewPointTemperature" parameter
    */
    public double get_dewPointTemperature() {
        return _dewPointTemperature;
    }
    /**
    * Set the value of the "dewPointTemperatureSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "dewPointTemperatureSource" parameter
    */
    public void set_dewPointTemperatureSource( String value ) {
        _dewPointTemperatureSource = value;
    }

    /**
    * Returns the value of the "dewPointTemperatureSource" parameter of this interaction.
    *
    * @return the value of the "dewPointTemperatureSource" parameter
    */
    public String get_dewPointTemperatureSource() {
        return _dewPointTemperatureSource;
    }
    /**
    * Set the value of the "dewPointTemperatureUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "dewPointTemperatureUncertainty" parameter
    */
    public void set_dewPointTemperatureUncertainty( double value ) {
        _dewPointTemperatureUncertainty = value;
    }

    /**
    * Returns the value of the "dewPointTemperatureUncertainty" parameter of this interaction.
    *
    * @return the value of the "dewPointTemperatureUncertainty" parameter
    */
    public double get_dewPointTemperatureUncertainty() {
        return _dewPointTemperatureUncertainty;
    }
    /**
    * Set the value of the "diffuseHorizontalIlluminance" parameter to "value" for this parameter.
    *
    * @param value the new value for the "diffuseHorizontalIlluminance" parameter
    */
    public void set_diffuseHorizontalIlluminance( double value ) {
        _diffuseHorizontalIlluminance = value;
    }

    /**
    * Returns the value of the "diffuseHorizontalIlluminance" parameter of this interaction.
    *
    * @return the value of the "diffuseHorizontalIlluminance" parameter
    */
    public double get_diffuseHorizontalIlluminance() {
        return _diffuseHorizontalIlluminance;
    }
    /**
    * Set the value of the "diffuseHorizontalIlluminanceSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "diffuseHorizontalIlluminanceSource" parameter
    */
    public void set_diffuseHorizontalIlluminanceSource( String value ) {
        _diffuseHorizontalIlluminanceSource = value;
    }

    /**
    * Returns the value of the "diffuseHorizontalIlluminanceSource" parameter of this interaction.
    *
    * @return the value of the "diffuseHorizontalIlluminanceSource" parameter
    */
    public String get_diffuseHorizontalIlluminanceSource() {
        return _diffuseHorizontalIlluminanceSource;
    }
    /**
    * Set the value of the "diffuseHorizontalIlluminanceUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "diffuseHorizontalIlluminanceUncertainty" parameter
    */
    public void set_diffuseHorizontalIlluminanceUncertainty( double value ) {
        _diffuseHorizontalIlluminanceUncertainty = value;
    }

    /**
    * Returns the value of the "diffuseHorizontalIlluminanceUncertainty" parameter of this interaction.
    *
    * @return the value of the "diffuseHorizontalIlluminanceUncertainty" parameter
    */
    public double get_diffuseHorizontalIlluminanceUncertainty() {
        return _diffuseHorizontalIlluminanceUncertainty;
    }
    /**
    * Set the value of the "diffuseHorizontalIrradiancSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "diffuseHorizontalIrradiancSource" parameter
    */
    public void set_diffuseHorizontalIrradiancSource( String value ) {
        _diffuseHorizontalIrradiancSource = value;
    }

    /**
    * Returns the value of the "diffuseHorizontalIrradiancSource" parameter of this interaction.
    *
    * @return the value of the "diffuseHorizontalIrradiancSource" parameter
    */
    public String get_diffuseHorizontalIrradiancSource() {
        return _diffuseHorizontalIrradiancSource;
    }
    /**
    * Set the value of the "diffuseHorizontalIrradiancUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "diffuseHorizontalIrradiancUncertainty" parameter
    */
    public void set_diffuseHorizontalIrradiancUncertainty( double value ) {
        _diffuseHorizontalIrradiancUncertainty = value;
    }

    /**
    * Returns the value of the "diffuseHorizontalIrradiancUncertainty" parameter of this interaction.
    *
    * @return the value of the "diffuseHorizontalIrradiancUncertainty" parameter
    */
    public double get_diffuseHorizontalIrradiancUncertainty() {
        return _diffuseHorizontalIrradiancUncertainty;
    }
    /**
    * Set the value of the "diffuseHorizontalIrradiance" parameter to "value" for this parameter.
    *
    * @param value the new value for the "diffuseHorizontalIrradiance" parameter
    */
    public void set_diffuseHorizontalIrradiance( double value ) {
        _diffuseHorizontalIrradiance = value;
    }

    /**
    * Returns the value of the "diffuseHorizontalIrradiance" parameter of this interaction.
    *
    * @return the value of the "diffuseHorizontalIrradiance" parameter
    */
    public double get_diffuseHorizontalIrradiance() {
        return _diffuseHorizontalIrradiance;
    }
    /**
    * Set the value of the "directNormalIlluminance" parameter to "value" for this parameter.
    *
    * @param value the new value for the "directNormalIlluminance" parameter
    */
    public void set_directNormalIlluminance( double value ) {
        _directNormalIlluminance = value;
    }

    /**
    * Returns the value of the "directNormalIlluminance" parameter of this interaction.
    *
    * @return the value of the "directNormalIlluminance" parameter
    */
    public double get_directNormalIlluminance() {
        return _directNormalIlluminance;
    }
    /**
    * Set the value of the "directNormalIlluminanceSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "directNormalIlluminanceSource" parameter
    */
    public void set_directNormalIlluminanceSource( String value ) {
        _directNormalIlluminanceSource = value;
    }

    /**
    * Returns the value of the "directNormalIlluminanceSource" parameter of this interaction.
    *
    * @return the value of the "directNormalIlluminanceSource" parameter
    */
    public String get_directNormalIlluminanceSource() {
        return _directNormalIlluminanceSource;
    }
    /**
    * Set the value of the "directNormalIlluminanceUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "directNormalIlluminanceUncertainty" parameter
    */
    public void set_directNormalIlluminanceUncertainty( double value ) {
        _directNormalIlluminanceUncertainty = value;
    }

    /**
    * Returns the value of the "directNormalIlluminanceUncertainty" parameter of this interaction.
    *
    * @return the value of the "directNormalIlluminanceUncertainty" parameter
    */
    public double get_directNormalIlluminanceUncertainty() {
        return _directNormalIlluminanceUncertainty;
    }
    /**
    * Set the value of the "directNormalIrradiance" parameter to "value" for this parameter.
    *
    * @param value the new value for the "directNormalIrradiance" parameter
    */
    public void set_directNormalIrradiance( double value ) {
        _directNormalIrradiance = value;
    }

    /**
    * Returns the value of the "directNormalIrradiance" parameter of this interaction.
    *
    * @return the value of the "directNormalIrradiance" parameter
    */
    public double get_directNormalIrradiance() {
        return _directNormalIrradiance;
    }
    /**
    * Set the value of the "directNormalIrradianceSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "directNormalIrradianceSource" parameter
    */
    public void set_directNormalIrradianceSource( String value ) {
        _directNormalIrradianceSource = value;
    }

    /**
    * Returns the value of the "directNormalIrradianceSource" parameter of this interaction.
    *
    * @return the value of the "directNormalIrradianceSource" parameter
    */
    public String get_directNormalIrradianceSource() {
        return _directNormalIrradianceSource;
    }
    /**
    * Set the value of the "directNormalIrradianceUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "directNormalIrradianceUncertainty" parameter
    */
    public void set_directNormalIrradianceUncertainty( double value ) {
        _directNormalIrradianceUncertainty = value;
    }

    /**
    * Returns the value of the "directNormalIrradianceUncertainty" parameter of this interaction.
    *
    * @return the value of the "directNormalIrradianceUncertainty" parameter
    */
    public double get_directNormalIrradianceUncertainty() {
        return _directNormalIrradianceUncertainty;
    }
    /**
    * Set the value of the "dryBulbTemperature" parameter to "value" for this parameter.
    *
    * @param value the new value for the "dryBulbTemperature" parameter
    */
    public void set_dryBulbTemperature( double value ) {
        _dryBulbTemperature = value;
    }

    /**
    * Returns the value of the "dryBulbTemperature" parameter of this interaction.
    *
    * @return the value of the "dryBulbTemperature" parameter
    */
    public double get_dryBulbTemperature() {
        return _dryBulbTemperature;
    }
    /**
    * Set the value of the "dryBulbTemperatureSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "dryBulbTemperatureSource" parameter
    */
    public void set_dryBulbTemperatureSource( String value ) {
        _dryBulbTemperatureSource = value;
    }

    /**
    * Returns the value of the "dryBulbTemperatureSource" parameter of this interaction.
    *
    * @return the value of the "dryBulbTemperatureSource" parameter
    */
    public String get_dryBulbTemperatureSource() {
        return _dryBulbTemperatureSource;
    }
    /**
    * Set the value of the "dryBulbTemperatureUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "dryBulbTemperatureUncertainty" parameter
    */
    public void set_dryBulbTemperatureUncertainty( double value ) {
        _dryBulbTemperatureUncertainty = value;
    }

    /**
    * Returns the value of the "dryBulbTemperatureUncertainty" parameter of this interaction.
    *
    * @return the value of the "dryBulbTemperatureUncertainty" parameter
    */
    public double get_dryBulbTemperatureUncertainty() {
        return _dryBulbTemperatureUncertainty;
    }
    /**
    * Set the value of the "elevation" parameter to "value" for this parameter.
    *
    * @param value the new value for the "elevation" parameter
    */
    public void set_elevation( double value ) {
        _elevation = value;
    }

    /**
    * Returns the value of the "elevation" parameter of this interaction.
    *
    * @return the value of the "elevation" parameter
    */
    public double get_elevation() {
        return _elevation;
    }
    /**
    * Set the value of the "extraTerrestrialRadiation" parameter to "value" for this parameter.
    *
    * @param value the new value for the "extraTerrestrialRadiation" parameter
    */
    public void set_extraTerrestrialRadiation( double value ) {
        _extraTerrestrialRadiation = value;
    }

    /**
    * Returns the value of the "extraTerrestrialRadiation" parameter of this interaction.
    *
    * @return the value of the "extraTerrestrialRadiation" parameter
    */
    public double get_extraTerrestrialRadiation() {
        return _extraTerrestrialRadiation;
    }
    /**
    * Set the value of the "extraTerrestrialRadiationNormal" parameter to "value" for this parameter.
    *
    * @param value the new value for the "extraTerrestrialRadiationNormal" parameter
    */
    public void set_extraTerrestrialRadiationNormal( double value ) {
        _extraTerrestrialRadiationNormal = value;
    }

    /**
    * Returns the value of the "extraTerrestrialRadiationNormal" parameter of this interaction.
    *
    * @return the value of the "extraTerrestrialRadiationNormal" parameter
    */
    public double get_extraTerrestrialRadiationNormal() {
        return _extraTerrestrialRadiationNormal;
    }
    /**
    * Set the value of the "globalHorizontalIlluminance" parameter to "value" for this parameter.
    *
    * @param value the new value for the "globalHorizontalIlluminance" parameter
    */
    public void set_globalHorizontalIlluminance( double value ) {
        _globalHorizontalIlluminance = value;
    }

    /**
    * Returns the value of the "globalHorizontalIlluminance" parameter of this interaction.
    *
    * @return the value of the "globalHorizontalIlluminance" parameter
    */
    public double get_globalHorizontalIlluminance() {
        return _globalHorizontalIlluminance;
    }
    /**
    * Set the value of the "globalHorizontalIlluminanceSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "globalHorizontalIlluminanceSource" parameter
    */
    public void set_globalHorizontalIlluminanceSource( String value ) {
        _globalHorizontalIlluminanceSource = value;
    }

    /**
    * Returns the value of the "globalHorizontalIlluminanceSource" parameter of this interaction.
    *
    * @return the value of the "globalHorizontalIlluminanceSource" parameter
    */
    public String get_globalHorizontalIlluminanceSource() {
        return _globalHorizontalIlluminanceSource;
    }
    /**
    * Set the value of the "globalHorizontalIlluminanceUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "globalHorizontalIlluminanceUncertainty" parameter
    */
    public void set_globalHorizontalIlluminanceUncertainty( double value ) {
        _globalHorizontalIlluminanceUncertainty = value;
    }

    /**
    * Returns the value of the "globalHorizontalIlluminanceUncertainty" parameter of this interaction.
    *
    * @return the value of the "globalHorizontalIlluminanceUncertainty" parameter
    */
    public double get_globalHorizontalIlluminanceUncertainty() {
        return _globalHorizontalIlluminanceUncertainty;
    }
    /**
    * Set the value of the "globalHorizontalIrradiance" parameter to "value" for this parameter.
    *
    * @param value the new value for the "globalHorizontalIrradiance" parameter
    */
    public void set_globalHorizontalIrradiance( double value ) {
        _globalHorizontalIrradiance = value;
    }

    /**
    * Returns the value of the "globalHorizontalIrradiance" parameter of this interaction.
    *
    * @return the value of the "globalHorizontalIrradiance" parameter
    */
    public double get_globalHorizontalIrradiance() {
        return _globalHorizontalIrradiance;
    }
    /**
    * Set the value of the "globalHorizontalIrradianceSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "globalHorizontalIrradianceSource" parameter
    */
    public void set_globalHorizontalIrradianceSource( String value ) {
        _globalHorizontalIrradianceSource = value;
    }

    /**
    * Returns the value of the "globalHorizontalIrradianceSource" parameter of this interaction.
    *
    * @return the value of the "globalHorizontalIrradianceSource" parameter
    */
    public String get_globalHorizontalIrradianceSource() {
        return _globalHorizontalIrradianceSource;
    }
    /**
    * Set the value of the "globalHorizontalIrradianceUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "globalHorizontalIrradianceUncertainty" parameter
    */
    public void set_globalHorizontalIrradianceUncertainty( double value ) {
        _globalHorizontalIrradianceUncertainty = value;
    }

    /**
    * Returns the value of the "globalHorizontalIrradianceUncertainty" parameter of this interaction.
    *
    * @return the value of the "globalHorizontalIrradianceUncertainty" parameter
    */
    public double get_globalHorizontalIrradianceUncertainty() {
        return _globalHorizontalIrradianceUncertainty;
    }
    /**
    * Set the value of the "horizontalVisibility" parameter to "value" for this parameter.
    *
    * @param value the new value for the "horizontalVisibility" parameter
    */
    public void set_horizontalVisibility( double value ) {
        _horizontalVisibility = value;
    }

    /**
    * Returns the value of the "horizontalVisibility" parameter of this interaction.
    *
    * @return the value of the "horizontalVisibility" parameter
    */
    public double get_horizontalVisibility() {
        return _horizontalVisibility;
    }
    /**
    * Set the value of the "horizontalVisibilitySource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "horizontalVisibilitySource" parameter
    */
    public void set_horizontalVisibilitySource( String value ) {
        _horizontalVisibilitySource = value;
    }

    /**
    * Returns the value of the "horizontalVisibilitySource" parameter of this interaction.
    *
    * @return the value of the "horizontalVisibilitySource" parameter
    */
    public String get_horizontalVisibilitySource() {
        return _horizontalVisibilitySource;
    }
    /**
    * Set the value of the "horizontalVisibilityUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "horizontalVisibilityUncertainty" parameter
    */
    public void set_horizontalVisibilityUncertainty( double value ) {
        _horizontalVisibilityUncertainty = value;
    }

    /**
    * Returns the value of the "horizontalVisibilityUncertainty" parameter of this interaction.
    *
    * @return the value of the "horizontalVisibilityUncertainty" parameter
    */
    public double get_horizontalVisibilityUncertainty() {
        return _horizontalVisibilityUncertainty;
    }
    /**
    * Set the value of the "latitude" parameter to "value" for this parameter.
    *
    * @param value the new value for the "latitude" parameter
    */
    public void set_latitude( double value ) {
        _latitude = value;
    }

    /**
    * Returns the value of the "latitude" parameter of this interaction.
    *
    * @return the value of the "latitude" parameter
    */
    public double get_latitude() {
        return _latitude;
    }
    /**
    * Set the value of the "liquidPrecipitationDepth" parameter to "value" for this parameter.
    *
    * @param value the new value for the "liquidPrecipitationDepth" parameter
    */
    public void set_liquidPrecipitationDepth( double value ) {
        _liquidPrecipitationDepth = value;
    }

    /**
    * Returns the value of the "liquidPrecipitationDepth" parameter of this interaction.
    *
    * @return the value of the "liquidPrecipitationDepth" parameter
    */
    public double get_liquidPrecipitationDepth() {
        return _liquidPrecipitationDepth;
    }
    /**
    * Set the value of the "liquidPrecipitationDepthSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "liquidPrecipitationDepthSource" parameter
    */
    public void set_liquidPrecipitationDepthSource( String value ) {
        _liquidPrecipitationDepthSource = value;
    }

    /**
    * Returns the value of the "liquidPrecipitationDepthSource" parameter of this interaction.
    *
    * @return the value of the "liquidPrecipitationDepthSource" parameter
    */
    public String get_liquidPrecipitationDepthSource() {
        return _liquidPrecipitationDepthSource;
    }
    /**
    * Set the value of the "liquidPrecipitationDepthUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "liquidPrecipitationDepthUncertainty" parameter
    */
    public void set_liquidPrecipitationDepthUncertainty( double value ) {
        _liquidPrecipitationDepthUncertainty = value;
    }

    /**
    * Returns the value of the "liquidPrecipitationDepthUncertainty" parameter of this interaction.
    *
    * @return the value of the "liquidPrecipitationDepthUncertainty" parameter
    */
    public double get_liquidPrecipitationDepthUncertainty() {
        return _liquidPrecipitationDepthUncertainty;
    }
    /**
    * Set the value of the "liquidPrecipitationQuantity" parameter to "value" for this parameter.
    *
    * @param value the new value for the "liquidPrecipitationQuantity" parameter
    */
    public void set_liquidPrecipitationQuantity( double value ) {
        _liquidPrecipitationQuantity = value;
    }

    /**
    * Returns the value of the "liquidPrecipitationQuantity" parameter of this interaction.
    *
    * @return the value of the "liquidPrecipitationQuantity" parameter
    */
    public double get_liquidPrecipitationQuantity() {
        return _liquidPrecipitationQuantity;
    }
    /**
    * Set the value of the "longitude" parameter to "value" for this parameter.
    *
    * @param value the new value for the "longitude" parameter
    */
    public void set_longitude( double value ) {
        _longitude = value;
    }

    /**
    * Returns the value of the "longitude" parameter of this interaction.
    *
    * @return the value of the "longitude" parameter
    */
    public double get_longitude() {
        return _longitude;
    }
    /**
    * Set the value of the "opaqueSkyCover" parameter to "value" for this parameter.
    *
    * @param value the new value for the "opaqueSkyCover" parameter
    */
    public void set_opaqueSkyCover( double value ) {
        _opaqueSkyCover = value;
    }

    /**
    * Returns the value of the "opaqueSkyCover" parameter of this interaction.
    *
    * @return the value of the "opaqueSkyCover" parameter
    */
    public double get_opaqueSkyCover() {
        return _opaqueSkyCover;
    }
    /**
    * Set the value of the "opaqueSkyCoverSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "opaqueSkyCoverSource" parameter
    */
    public void set_opaqueSkyCoverSource( String value ) {
        _opaqueSkyCoverSource = value;
    }

    /**
    * Returns the value of the "opaqueSkyCoverSource" parameter of this interaction.
    *
    * @return the value of the "opaqueSkyCoverSource" parameter
    */
    public String get_opaqueSkyCoverSource() {
        return _opaqueSkyCoverSource;
    }
    /**
    * Set the value of the "opaqueSkyCoverUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "opaqueSkyCoverUncertainty" parameter
    */
    public void set_opaqueSkyCoverUncertainty( double value ) {
        _opaqueSkyCoverUncertainty = value;
    }

    /**
    * Returns the value of the "opaqueSkyCoverUncertainty" parameter of this interaction.
    *
    * @return the value of the "opaqueSkyCoverUncertainty" parameter
    */
    public double get_opaqueSkyCoverUncertainty() {
        return _opaqueSkyCoverUncertainty;
    }
    /**
    * Set the value of the "precipitableWater" parameter to "value" for this parameter.
    *
    * @param value the new value for the "precipitableWater" parameter
    */
    public void set_precipitableWater( double value ) {
        _precipitableWater = value;
    }

    /**
    * Returns the value of the "precipitableWater" parameter of this interaction.
    *
    * @return the value of the "precipitableWater" parameter
    */
    public double get_precipitableWater() {
        return _precipitableWater;
    }
    /**
    * Set the value of the "precipitableWaterSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "precipitableWaterSource" parameter
    */
    public void set_precipitableWaterSource( String value ) {
        _precipitableWaterSource = value;
    }

    /**
    * Returns the value of the "precipitableWaterSource" parameter of this interaction.
    *
    * @return the value of the "precipitableWaterSource" parameter
    */
    public String get_precipitableWaterSource() {
        return _precipitableWaterSource;
    }
    /**
    * Set the value of the "precipitableWaterUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "precipitableWaterUncertainty" parameter
    */
    public void set_precipitableWaterUncertainty( double value ) {
        _precipitableWaterUncertainty = value;
    }

    /**
    * Returns the value of the "precipitableWaterUncertainty" parameter of this interaction.
    *
    * @return the value of the "precipitableWaterUncertainty" parameter
    */
    public double get_precipitableWaterUncertainty() {
        return _precipitableWaterUncertainty;
    }
    /**
    * Set the value of the "presentWeather" parameter to "value" for this parameter.
    *
    * @param value the new value for the "presentWeather" parameter
    */
    public void set_presentWeather( double value ) {
        _presentWeather = value;
    }

    /**
    * Returns the value of the "presentWeather" parameter of this interaction.
    *
    * @return the value of the "presentWeather" parameter
    */
    public double get_presentWeather() {
        return _presentWeather;
    }
    /**
    * Set the value of the "presentWeatherSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "presentWeatherSource" parameter
    */
    public void set_presentWeatherSource( String value ) {
        _presentWeatherSource = value;
    }

    /**
    * Returns the value of the "presentWeatherSource" parameter of this interaction.
    *
    * @return the value of the "presentWeatherSource" parameter
    */
    public String get_presentWeatherSource() {
        return _presentWeatherSource;
    }
    /**
    * Set the value of the "presentWeatherUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "presentWeatherUncertainty" parameter
    */
    public void set_presentWeatherUncertainty( double value ) {
        _presentWeatherUncertainty = value;
    }

    /**
    * Returns the value of the "presentWeatherUncertainty" parameter of this interaction.
    *
    * @return the value of the "presentWeatherUncertainty" parameter
    */
    public double get_presentWeatherUncertainty() {
        return _presentWeatherUncertainty;
    }
    /**
    * Set the value of the "pressure" parameter to "value" for this parameter.
    *
    * @param value the new value for the "pressure" parameter
    */
    public void set_pressure( double value ) {
        _pressure = value;
    }

    /**
    * Returns the value of the "pressure" parameter of this interaction.
    *
    * @return the value of the "pressure" parameter
    */
    public double get_pressure() {
        return _pressure;
    }
    /**
    * Set the value of the "pressureSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "pressureSource" parameter
    */
    public void set_pressureSource( String value ) {
        _pressureSource = value;
    }

    /**
    * Returns the value of the "pressureSource" parameter of this interaction.
    *
    * @return the value of the "pressureSource" parameter
    */
    public String get_pressureSource() {
        return _pressureSource;
    }
    /**
    * Set the value of the "pressureUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "pressureUncertainty" parameter
    */
    public void set_pressureUncertainty( double value ) {
        _pressureUncertainty = value;
    }

    /**
    * Returns the value of the "pressureUncertainty" parameter of this interaction.
    *
    * @return the value of the "pressureUncertainty" parameter
    */
    public double get_pressureUncertainty() {
        return _pressureUncertainty;
    }
    /**
    * Set the value of the "relativeHumidity" parameter to "value" for this parameter.
    *
    * @param value the new value for the "relativeHumidity" parameter
    */
    public void set_relativeHumidity( double value ) {
        _relativeHumidity = value;
    }

    /**
    * Returns the value of the "relativeHumidity" parameter of this interaction.
    *
    * @return the value of the "relativeHumidity" parameter
    */
    public double get_relativeHumidity() {
        return _relativeHumidity;
    }
    /**
    * Set the value of the "relativeHumiditySource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "relativeHumiditySource" parameter
    */
    public void set_relativeHumiditySource( String value ) {
        _relativeHumiditySource = value;
    }

    /**
    * Returns the value of the "relativeHumiditySource" parameter of this interaction.
    *
    * @return the value of the "relativeHumiditySource" parameter
    */
    public String get_relativeHumiditySource() {
        return _relativeHumiditySource;
    }
    /**
    * Set the value of the "relativeHumidityUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "relativeHumidityUncertainty" parameter
    */
    public void set_relativeHumidityUncertainty( double value ) {
        _relativeHumidityUncertainty = value;
    }

    /**
    * Returns the value of the "relativeHumidityUncertainty" parameter of this interaction.
    *
    * @return the value of the "relativeHumidityUncertainty" parameter
    */
    public double get_relativeHumidityUncertainty() {
        return _relativeHumidityUncertainty;
    }
    /**
    * Set the value of the "stationIDCode" parameter to "value" for this parameter.
    *
    * @param value the new value for the "stationIDCode" parameter
    */
    public void set_stationIDCode( int value ) {
        _stationIDCode = value;
    }

    /**
    * Returns the value of the "stationIDCode" parameter of this interaction.
    *
    * @return the value of the "stationIDCode" parameter
    */
    public int get_stationIDCode() {
        return _stationIDCode;
    }
    /**
    * Set the value of the "stationName" parameter to "value" for this parameter.
    *
    * @param value the new value for the "stationName" parameter
    */
    public void set_stationName( String value ) {
        _stationName = value;
    }

    /**
    * Returns the value of the "stationName" parameter of this interaction.
    *
    * @return the value of the "stationName" parameter
    */
    public String get_stationName() {
        return _stationName;
    }
    /**
    * Set the value of the "stationState" parameter to "value" for this parameter.
    *
    * @param value the new value for the "stationState" parameter
    */
    public void set_stationState( String value ) {
        _stationState = value;
    }

    /**
    * Returns the value of the "stationState" parameter of this interaction.
    *
    * @return the value of the "stationState" parameter
    */
    public String get_stationState() {
        return _stationState;
    }
    /**
    * Set the value of the "time" parameter to "value" for this parameter.
    *
    * @param value the new value for the "time" parameter
    */
    public void set_time( String value ) {
        _time = value;
    }

    /**
    * Returns the value of the "time" parameter of this interaction.
    *
    * @return the value of the "time" parameter
    */
    public String get_time() {
        return _time;
    }
    /**
    * Set the value of the "timeZone" parameter to "value" for this parameter.
    *
    * @param value the new value for the "timeZone" parameter
    */
    public void set_timeZone( double value ) {
        _timeZone = value;
    }

    /**
    * Returns the value of the "timeZone" parameter of this interaction.
    *
    * @return the value of the "timeZone" parameter
    */
    public double get_timeZone() {
        return _timeZone;
    }
    /**
    * Set the value of the "totalSkyCover" parameter to "value" for this parameter.
    *
    * @param value the new value for the "totalSkyCover" parameter
    */
    public void set_totalSkyCover( double value ) {
        _totalSkyCover = value;
    }

    /**
    * Returns the value of the "totalSkyCover" parameter of this interaction.
    *
    * @return the value of the "totalSkyCover" parameter
    */
    public double get_totalSkyCover() {
        return _totalSkyCover;
    }
    /**
    * Set the value of the "totalSkyCoverSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "totalSkyCoverSource" parameter
    */
    public void set_totalSkyCoverSource( String value ) {
        _totalSkyCoverSource = value;
    }

    /**
    * Returns the value of the "totalSkyCoverSource" parameter of this interaction.
    *
    * @return the value of the "totalSkyCoverSource" parameter
    */
    public String get_totalSkyCoverSource() {
        return _totalSkyCoverSource;
    }
    /**
    * Set the value of the "totalSkyCoverUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "totalSkyCoverUncertainty" parameter
    */
    public void set_totalSkyCoverUncertainty( double value ) {
        _totalSkyCoverUncertainty = value;
    }

    /**
    * Returns the value of the "totalSkyCoverUncertainty" parameter of this interaction.
    *
    * @return the value of the "totalSkyCoverUncertainty" parameter
    */
    public double get_totalSkyCoverUncertainty() {
        return _totalSkyCoverUncertainty;
    }
    /**
    * Set the value of the "windDirection" parameter to "value" for this parameter.
    *
    * @param value the new value for the "windDirection" parameter
    */
    public void set_windDirection( double value ) {
        _windDirection = value;
    }

    /**
    * Returns the value of the "windDirection" parameter of this interaction.
    *
    * @return the value of the "windDirection" parameter
    */
    public double get_windDirection() {
        return _windDirection;
    }
    /**
    * Set the value of the "windDirectionSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "windDirectionSource" parameter
    */
    public void set_windDirectionSource( String value ) {
        _windDirectionSource = value;
    }

    /**
    * Returns the value of the "windDirectionSource" parameter of this interaction.
    *
    * @return the value of the "windDirectionSource" parameter
    */
    public String get_windDirectionSource() {
        return _windDirectionSource;
    }
    /**
    * Set the value of the "windDirectionUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "windDirectionUncertainty" parameter
    */
    public void set_windDirectionUncertainty( double value ) {
        _windDirectionUncertainty = value;
    }

    /**
    * Returns the value of the "windDirectionUncertainty" parameter of this interaction.
    *
    * @return the value of the "windDirectionUncertainty" parameter
    */
    public double get_windDirectionUncertainty() {
        return _windDirectionUncertainty;
    }
    /**
    * Set the value of the "windSpeed" parameter to "value" for this parameter.
    *
    * @param value the new value for the "windSpeed" parameter
    */
    public void set_windSpeed( double value ) {
        _windSpeed = value;
    }

    /**
    * Returns the value of the "windSpeed" parameter of this interaction.
    *
    * @return the value of the "windSpeed" parameter
    */
    public double get_windSpeed() {
        return _windSpeed;
    }
    /**
    * Set the value of the "windSpeedSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "windSpeedSource" parameter
    */
    public void set_windSpeedSource( String value ) {
        _windSpeedSource = value;
    }

    /**
    * Returns the value of the "windSpeedSource" parameter of this interaction.
    *
    * @return the value of the "windSpeedSource" parameter
    */
    public String get_windSpeedSource() {
        return _windSpeedSource;
    }
    /**
    * Set the value of the "windSpeedUncertainty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "windSpeedUncertainty" parameter
    */
    public void set_windSpeedUncertainty( double value ) {
        _windSpeedUncertainty = value;
    }

    /**
    * Returns the value of the "windSpeedUncertainty" parameter of this interaction.
    *
    * @return the value of the "windSpeedUncertainty" parameter
    */
    public double get_windSpeedUncertainty() {
        return _windSpeedUncertainty;
    }
    /**
    * Set the value of the "zenithLuminance" parameter to "value" for this parameter.
    *
    * @param value the new value for the "zenithLuminance" parameter
    */
    public void set_zenithLuminance( double value ) {
        _zenithLuminance = value;
    }

    /**
    * Returns the value of the "zenithLuminance" parameter of this interaction.
    *
    * @return the value of the "zenithLuminance" parameter
    */
    public double get_zenithLuminance() {
        return _zenithLuminance;
    }
    /**
    * Set the value of the "zenithLuminanceSource" parameter to "value" for this parameter.
    *
    * @param value the new value for the "zenithLuminanceSource" parameter
    */
    public void set_zenithLuminanceSource( String value ) {
        _zenithLuminanceSource = value;
    }

    /**
    * Returns the value of the "zenithLuminanceSource" parameter of this interaction.
    *
    * @return the value of the "zenithLuminanceSource" parameter
    */
    public String get_zenithLuminanceSource() {
        return _zenithLuminanceSource;
    }
    /**
    * Set the value of the "zenithLuminanceUncertianty" parameter to "value" for this parameter.
    *
    * @param value the new value for the "zenithLuminanceUncertianty" parameter
    */
    public void set_zenithLuminanceUncertianty( double value ) {
        _zenithLuminanceUncertianty = value;
    }

    /**
    * Returns the value of the "zenithLuminanceUncertianty" parameter of this interaction.
    *
    * @return the value of the "zenithLuminanceUncertianty" parameter
    */
    public double get_zenithLuminanceUncertianty() {
        return _zenithLuminanceUncertianty;
    }

    protected TMYWeather( ReceivedInteraction datamemberMap, boolean initFlag ) {
        super( datamemberMap, false );
        if ( initFlag ) setParameters( datamemberMap );
    }

    protected TMYWeather( ReceivedInteraction datamemberMap, LogicalTime logicalTime, boolean initFlag ) {
        super( datamemberMap, logicalTime, false );
        if ( initFlag ) setParameters( datamemberMap );
    }

    /**
    * Creates an instance of the TMYWeather interaction class, using
    * "datamemberMap" to initialize its parameter values.
    * "datamemberMap" is usually acquired as an argument to an RTI federate
    * callback method, such as "receiveInteraction".
    *
    * @param datamemberMap data structure containing initial values for the
    * parameters of this new TMYWeather interaction class instance
    */
    public TMYWeather( ReceivedInteraction datamemberMap ) {
        this( datamemberMap, true );
    }

    /**
    * Like {@link #TMYWeather( ReceivedInteraction datamemberMap )}, except this
    * new TMYWeather interaction class instance is given a timestamp of
    * "logicalTime".
    *
    * @param datamemberMap data structure containing initial values for the
    * parameters of this new TMYWeather interaction class instance
    * @param logicalTime timestamp for this new TMYWeather interaction class
    * instance
    */
    public TMYWeather( ReceivedInteraction datamemberMap, LogicalTime logicalTime ) {
        this( datamemberMap, logicalTime, true );
    }

    /**
    * Creates a new TMYWeather interaction class instance that is a duplicate
    * of the instance referred to by TMYWeather_var.
    *
    * @param TMYWeather_var TMYWeather interaction class instance of which
    * this newly created TMYWeather interaction class instance will be a
    * duplicate
    */
    public TMYWeather( TMYWeather TMYWeather_var ) {
        super( TMYWeather_var );

        set_aerosolOpticalDepth( TMYWeather_var.get_aerosolOpticalDepth() );
        set_aerosolOpticalDepthSource( TMYWeather_var.get_aerosolOpticalDepthSource() );
        set_aerosolOpticalDepthUncertainty( TMYWeather_var.get_aerosolOpticalDepthUncertainty() );
        set_albedo( TMYWeather_var.get_albedo() );
        set_albedoSource( TMYWeather_var.get_albedoSource() );
        set_albedoUncertainty( TMYWeather_var.get_albedoUncertainty() );
        set_ceilingHeight( TMYWeather_var.get_ceilingHeight() );
        set_ceilingHeightSource( TMYWeather_var.get_ceilingHeightSource() );
        set_ceilingHeightUncertainty( TMYWeather_var.get_ceilingHeightUncertainty() );
        set_date( TMYWeather_var.get_date() );
        set_dewPointTemperature( TMYWeather_var.get_dewPointTemperature() );
        set_dewPointTemperatureSource( TMYWeather_var.get_dewPointTemperatureSource() );
        set_dewPointTemperatureUncertainty( TMYWeather_var.get_dewPointTemperatureUncertainty() );
        set_diffuseHorizontalIlluminance( TMYWeather_var.get_diffuseHorizontalIlluminance() );
        set_diffuseHorizontalIlluminanceSource( TMYWeather_var.get_diffuseHorizontalIlluminanceSource() );
        set_diffuseHorizontalIlluminanceUncertainty( TMYWeather_var.get_diffuseHorizontalIlluminanceUncertainty() );
        set_diffuseHorizontalIrradiancSource( TMYWeather_var.get_diffuseHorizontalIrradiancSource() );
        set_diffuseHorizontalIrradiancUncertainty( TMYWeather_var.get_diffuseHorizontalIrradiancUncertainty() );
        set_diffuseHorizontalIrradiance( TMYWeather_var.get_diffuseHorizontalIrradiance() );
        set_directNormalIlluminance( TMYWeather_var.get_directNormalIlluminance() );
        set_directNormalIlluminanceSource( TMYWeather_var.get_directNormalIlluminanceSource() );
        set_directNormalIlluminanceUncertainty( TMYWeather_var.get_directNormalIlluminanceUncertainty() );
        set_directNormalIrradiance( TMYWeather_var.get_directNormalIrradiance() );
        set_directNormalIrradianceSource( TMYWeather_var.get_directNormalIrradianceSource() );
        set_directNormalIrradianceUncertainty( TMYWeather_var.get_directNormalIrradianceUncertainty() );
        set_dryBulbTemperature( TMYWeather_var.get_dryBulbTemperature() );
        set_dryBulbTemperatureSource( TMYWeather_var.get_dryBulbTemperatureSource() );
        set_dryBulbTemperatureUncertainty( TMYWeather_var.get_dryBulbTemperatureUncertainty() );
        set_elevation( TMYWeather_var.get_elevation() );
        set_extraTerrestrialRadiation( TMYWeather_var.get_extraTerrestrialRadiation() );
        set_extraTerrestrialRadiationNormal( TMYWeather_var.get_extraTerrestrialRadiationNormal() );
        set_globalHorizontalIlluminance( TMYWeather_var.get_globalHorizontalIlluminance() );
        set_globalHorizontalIlluminanceSource( TMYWeather_var.get_globalHorizontalIlluminanceSource() );
        set_globalHorizontalIlluminanceUncertainty( TMYWeather_var.get_globalHorizontalIlluminanceUncertainty() );
        set_globalHorizontalIrradiance( TMYWeather_var.get_globalHorizontalIrradiance() );
        set_globalHorizontalIrradianceSource( TMYWeather_var.get_globalHorizontalIrradianceSource() );
        set_globalHorizontalIrradianceUncertainty( TMYWeather_var.get_globalHorizontalIrradianceUncertainty() );
        set_horizontalVisibility( TMYWeather_var.get_horizontalVisibility() );
        set_horizontalVisibilitySource( TMYWeather_var.get_horizontalVisibilitySource() );
        set_horizontalVisibilityUncertainty( TMYWeather_var.get_horizontalVisibilityUncertainty() );
        set_latitude( TMYWeather_var.get_latitude() );
        set_liquidPrecipitationDepth( TMYWeather_var.get_liquidPrecipitationDepth() );
        set_liquidPrecipitationDepthSource( TMYWeather_var.get_liquidPrecipitationDepthSource() );
        set_liquidPrecipitationDepthUncertainty( TMYWeather_var.get_liquidPrecipitationDepthUncertainty() );
        set_liquidPrecipitationQuantity( TMYWeather_var.get_liquidPrecipitationQuantity() );
        set_longitude( TMYWeather_var.get_longitude() );
        set_opaqueSkyCover( TMYWeather_var.get_opaqueSkyCover() );
        set_opaqueSkyCoverSource( TMYWeather_var.get_opaqueSkyCoverSource() );
        set_opaqueSkyCoverUncertainty( TMYWeather_var.get_opaqueSkyCoverUncertainty() );
        set_precipitableWater( TMYWeather_var.get_precipitableWater() );
        set_precipitableWaterSource( TMYWeather_var.get_precipitableWaterSource() );
        set_precipitableWaterUncertainty( TMYWeather_var.get_precipitableWaterUncertainty() );
        set_presentWeather( TMYWeather_var.get_presentWeather() );
        set_presentWeatherSource( TMYWeather_var.get_presentWeatherSource() );
        set_presentWeatherUncertainty( TMYWeather_var.get_presentWeatherUncertainty() );
        set_pressure( TMYWeather_var.get_pressure() );
        set_pressureSource( TMYWeather_var.get_pressureSource() );
        set_pressureUncertainty( TMYWeather_var.get_pressureUncertainty() );
        set_relativeHumidity( TMYWeather_var.get_relativeHumidity() );
        set_relativeHumiditySource( TMYWeather_var.get_relativeHumiditySource() );
        set_relativeHumidityUncertainty( TMYWeather_var.get_relativeHumidityUncertainty() );
        set_stationIDCode( TMYWeather_var.get_stationIDCode() );
        set_stationName( TMYWeather_var.get_stationName() );
        set_stationState( TMYWeather_var.get_stationState() );
        set_time( TMYWeather_var.get_time() );
        set_timeZone( TMYWeather_var.get_timeZone() );
        set_totalSkyCover( TMYWeather_var.get_totalSkyCover() );
        set_totalSkyCoverSource( TMYWeather_var.get_totalSkyCoverSource() );
        set_totalSkyCoverUncertainty( TMYWeather_var.get_totalSkyCoverUncertainty() );
        set_windDirection( TMYWeather_var.get_windDirection() );
        set_windDirectionSource( TMYWeather_var.get_windDirectionSource() );
        set_windDirectionUncertainty( TMYWeather_var.get_windDirectionUncertainty() );
        set_windSpeed( TMYWeather_var.get_windSpeed() );
        set_windSpeedSource( TMYWeather_var.get_windSpeedSource() );
        set_windSpeedUncertainty( TMYWeather_var.get_windSpeedUncertainty() );
        set_zenithLuminance( TMYWeather_var.get_zenithLuminance() );
        set_zenithLuminanceSource( TMYWeather_var.get_zenithLuminanceSource() );
        set_zenithLuminanceUncertianty( TMYWeather_var.get_zenithLuminanceUncertianty() );
    }

    /**
    * Returns the value of the parameter whose name is "datamemberName"
    * for this interaction.
    *
    * @param datamemberName name of parameter whose value is to be
    * returned
    * @return value of the parameter whose name is "datamemberName"
    * for this interaction
    */
    public Object getParameter( String datamemberName ) {
        if ( "aerosolOpticalDepth".equals(datamemberName) ) return new Double(get_aerosolOpticalDepth());
        else if ( "aerosolOpticalDepthSource".equals(datamemberName) ) return get_aerosolOpticalDepthSource();
        else if ( "aerosolOpticalDepthUncertainty".equals(datamemberName) ) return new Double(get_aerosolOpticalDepthUncertainty());
        else if ( "albedo".equals(datamemberName) ) return new Double(get_albedo());
        else if ( "albedoSource".equals(datamemberName) ) return get_albedoSource();
        else if ( "albedoUncertainty".equals(datamemberName) ) return new Double(get_albedoUncertainty());
        else if ( "ceilingHeight".equals(datamemberName) ) return new Double(get_ceilingHeight());
        else if ( "ceilingHeightSource".equals(datamemberName) ) return get_ceilingHeightSource();
        else if ( "ceilingHeightUncertainty".equals(datamemberName) ) return new Double(get_ceilingHeightUncertainty());
        else if ( "date".equals(datamemberName) ) return get_date();
        else if ( "dewPointTemperature".equals(datamemberName) ) return new Double(get_dewPointTemperature());
        else if ( "dewPointTemperatureSource".equals(datamemberName) ) return get_dewPointTemperatureSource();
        else if ( "dewPointTemperatureUncertainty".equals(datamemberName) ) return new Double(get_dewPointTemperatureUncertainty());
        else if ( "diffuseHorizontalIlluminance".equals(datamemberName) ) return new Double(get_diffuseHorizontalIlluminance());
        else if ( "diffuseHorizontalIlluminanceSource".equals(datamemberName) ) return get_diffuseHorizontalIlluminanceSource();
        else if ( "diffuseHorizontalIlluminanceUncertainty".equals(datamemberName) ) return new Double(get_diffuseHorizontalIlluminanceUncertainty());
        else if ( "diffuseHorizontalIrradiancSource".equals(datamemberName) ) return get_diffuseHorizontalIrradiancSource();
        else if ( "diffuseHorizontalIrradiancUncertainty".equals(datamemberName) ) return new Double(get_diffuseHorizontalIrradiancUncertainty());
        else if ( "diffuseHorizontalIrradiance".equals(datamemberName) ) return new Double(get_diffuseHorizontalIrradiance());
        else if ( "directNormalIlluminance".equals(datamemberName) ) return new Double(get_directNormalIlluminance());
        else if ( "directNormalIlluminanceSource".equals(datamemberName) ) return get_directNormalIlluminanceSource();
        else if ( "directNormalIlluminanceUncertainty".equals(datamemberName) ) return new Double(get_directNormalIlluminanceUncertainty());
        else if ( "directNormalIrradiance".equals(datamemberName) ) return new Double(get_directNormalIrradiance());
        else if ( "directNormalIrradianceSource".equals(datamemberName) ) return get_directNormalIrradianceSource();
        else if ( "directNormalIrradianceUncertainty".equals(datamemberName) ) return new Double(get_directNormalIrradianceUncertainty());
        else if ( "dryBulbTemperature".equals(datamemberName) ) return new Double(get_dryBulbTemperature());
        else if ( "dryBulbTemperatureSource".equals(datamemberName) ) return get_dryBulbTemperatureSource();
        else if ( "dryBulbTemperatureUncertainty".equals(datamemberName) ) return new Double(get_dryBulbTemperatureUncertainty());
        else if ( "elevation".equals(datamemberName) ) return new Double(get_elevation());
        else if ( "extraTerrestrialRadiation".equals(datamemberName) ) return new Double(get_extraTerrestrialRadiation());
        else if ( "extraTerrestrialRadiationNormal".equals(datamemberName) ) return new Double(get_extraTerrestrialRadiationNormal());
        else if ( "globalHorizontalIlluminance".equals(datamemberName) ) return new Double(get_globalHorizontalIlluminance());
        else if ( "globalHorizontalIlluminanceSource".equals(datamemberName) ) return get_globalHorizontalIlluminanceSource();
        else if ( "globalHorizontalIlluminanceUncertainty".equals(datamemberName) ) return new Double(get_globalHorizontalIlluminanceUncertainty());
        else if ( "globalHorizontalIrradiance".equals(datamemberName) ) return new Double(get_globalHorizontalIrradiance());
        else if ( "globalHorizontalIrradianceSource".equals(datamemberName) ) return get_globalHorizontalIrradianceSource();
        else if ( "globalHorizontalIrradianceUncertainty".equals(datamemberName) ) return new Double(get_globalHorizontalIrradianceUncertainty());
        else if ( "horizontalVisibility".equals(datamemberName) ) return new Double(get_horizontalVisibility());
        else if ( "horizontalVisibilitySource".equals(datamemberName) ) return get_horizontalVisibilitySource();
        else if ( "horizontalVisibilityUncertainty".equals(datamemberName) ) return new Double(get_horizontalVisibilityUncertainty());
        else if ( "latitude".equals(datamemberName) ) return new Double(get_latitude());
        else if ( "liquidPrecipitationDepth".equals(datamemberName) ) return new Double(get_liquidPrecipitationDepth());
        else if ( "liquidPrecipitationDepthSource".equals(datamemberName) ) return get_liquidPrecipitationDepthSource();
        else if ( "liquidPrecipitationDepthUncertainty".equals(datamemberName) ) return new Double(get_liquidPrecipitationDepthUncertainty());
        else if ( "liquidPrecipitationQuantity".equals(datamemberName) ) return new Double(get_liquidPrecipitationQuantity());
        else if ( "longitude".equals(datamemberName) ) return new Double(get_longitude());
        else if ( "opaqueSkyCover".equals(datamemberName) ) return new Double(get_opaqueSkyCover());
        else if ( "opaqueSkyCoverSource".equals(datamemberName) ) return get_opaqueSkyCoverSource();
        else if ( "opaqueSkyCoverUncertainty".equals(datamemberName) ) return new Double(get_opaqueSkyCoverUncertainty());
        else if ( "precipitableWater".equals(datamemberName) ) return new Double(get_precipitableWater());
        else if ( "precipitableWaterSource".equals(datamemberName) ) return get_precipitableWaterSource();
        else if ( "precipitableWaterUncertainty".equals(datamemberName) ) return new Double(get_precipitableWaterUncertainty());
        else if ( "presentWeather".equals(datamemberName) ) return new Double(get_presentWeather());
        else if ( "presentWeatherSource".equals(datamemberName) ) return get_presentWeatherSource();
        else if ( "presentWeatherUncertainty".equals(datamemberName) ) return new Double(get_presentWeatherUncertainty());
        else if ( "pressure".equals(datamemberName) ) return new Double(get_pressure());
        else if ( "pressureSource".equals(datamemberName) ) return get_pressureSource();
        else if ( "pressureUncertainty".equals(datamemberName) ) return new Double(get_pressureUncertainty());
        else if ( "relativeHumidity".equals(datamemberName) ) return new Double(get_relativeHumidity());
        else if ( "relativeHumiditySource".equals(datamemberName) ) return get_relativeHumiditySource();
        else if ( "relativeHumidityUncertainty".equals(datamemberName) ) return new Double(get_relativeHumidityUncertainty());
        else if ( "stationIDCode".equals(datamemberName) ) return new Integer(get_stationIDCode());
        else if ( "stationName".equals(datamemberName) ) return get_stationName();
        else if ( "stationState".equals(datamemberName) ) return get_stationState();
        else if ( "time".equals(datamemberName) ) return get_time();
        else if ( "timeZone".equals(datamemberName) ) return new Double(get_timeZone());
        else if ( "totalSkyCover".equals(datamemberName) ) return new Double(get_totalSkyCover());
        else if ( "totalSkyCoverSource".equals(datamemberName) ) return get_totalSkyCoverSource();
        else if ( "totalSkyCoverUncertainty".equals(datamemberName) ) return new Double(get_totalSkyCoverUncertainty());
        else if ( "windDirection".equals(datamemberName) ) return new Double(get_windDirection());
        else if ( "windDirectionSource".equals(datamemberName) ) return get_windDirectionSource();
        else if ( "windDirectionUncertainty".equals(datamemberName) ) return new Double(get_windDirectionUncertainty());
        else if ( "windSpeed".equals(datamemberName) ) return new Double(get_windSpeed());
        else if ( "windSpeedSource".equals(datamemberName) ) return get_windSpeedSource();
        else if ( "windSpeedUncertainty".equals(datamemberName) ) return new Double(get_windSpeedUncertainty());
        else if ( "zenithLuminance".equals(datamemberName) ) return new Double(get_zenithLuminance());
        else if ( "zenithLuminanceSource".equals(datamemberName) ) return get_zenithLuminanceSource();
        else if ( "zenithLuminanceUncertianty".equals(datamemberName) ) return new Double(get_zenithLuminanceUncertianty());
        else return super.getParameter( datamemberName );
    }

    protected boolean setParameterAux( String datamemberName, String val ) {
        boolean retval = true;
        if ( "aerosolOpticalDepth".equals( datamemberName) ) set_aerosolOpticalDepth( Double.parseDouble(val) );
        else if ( "aerosolOpticalDepthSource".equals( datamemberName) ) set_aerosolOpticalDepthSource( val );
        else if ( "aerosolOpticalDepthUncertainty".equals( datamemberName) ) set_aerosolOpticalDepthUncertainty( Double.parseDouble(val) );
        else if ( "albedo".equals( datamemberName) ) set_albedo( Double.parseDouble(val) );
        else if ( "albedoSource".equals( datamemberName) ) set_albedoSource( val );
        else if ( "albedoUncertainty".equals( datamemberName) ) set_albedoUncertainty( Double.parseDouble(val) );
        else if ( "ceilingHeight".equals( datamemberName) ) set_ceilingHeight( Double.parseDouble(val) );
        else if ( "ceilingHeightSource".equals( datamemberName) ) set_ceilingHeightSource( val );
        else if ( "ceilingHeightUncertainty".equals( datamemberName) ) set_ceilingHeightUncertainty( Double.parseDouble(val) );
        else if ( "date".equals( datamemberName) ) set_date( val );
        else if ( "dewPointTemperature".equals( datamemberName) ) set_dewPointTemperature( Double.parseDouble(val) );
        else if ( "dewPointTemperatureSource".equals( datamemberName) ) set_dewPointTemperatureSource( val );
        else if ( "dewPointTemperatureUncertainty".equals( datamemberName) ) set_dewPointTemperatureUncertainty( Double.parseDouble(val) );
        else if ( "diffuseHorizontalIlluminance".equals( datamemberName) ) set_diffuseHorizontalIlluminance( Double.parseDouble(val) );
        else if ( "diffuseHorizontalIlluminanceSource".equals( datamemberName) ) set_diffuseHorizontalIlluminanceSource( val );
        else if ( "diffuseHorizontalIlluminanceUncertainty".equals( datamemberName) ) set_diffuseHorizontalIlluminanceUncertainty( Double.parseDouble(val) );
        else if ( "diffuseHorizontalIrradiancSource".equals( datamemberName) ) set_diffuseHorizontalIrradiancSource( val );
        else if ( "diffuseHorizontalIrradiancUncertainty".equals( datamemberName) ) set_diffuseHorizontalIrradiancUncertainty( Double.parseDouble(val) );
        else if ( "diffuseHorizontalIrradiance".equals( datamemberName) ) set_diffuseHorizontalIrradiance( Double.parseDouble(val) );
        else if ( "directNormalIlluminance".equals( datamemberName) ) set_directNormalIlluminance( Double.parseDouble(val) );
        else if ( "directNormalIlluminanceSource".equals( datamemberName) ) set_directNormalIlluminanceSource( val );
        else if ( "directNormalIlluminanceUncertainty".equals( datamemberName) ) set_directNormalIlluminanceUncertainty( Double.parseDouble(val) );
        else if ( "directNormalIrradiance".equals( datamemberName) ) set_directNormalIrradiance( Double.parseDouble(val) );
        else if ( "directNormalIrradianceSource".equals( datamemberName) ) set_directNormalIrradianceSource( val );
        else if ( "directNormalIrradianceUncertainty".equals( datamemberName) ) set_directNormalIrradianceUncertainty( Double.parseDouble(val) );
        else if ( "dryBulbTemperature".equals( datamemberName) ) set_dryBulbTemperature( Double.parseDouble(val) );
        else if ( "dryBulbTemperatureSource".equals( datamemberName) ) set_dryBulbTemperatureSource( val );
        else if ( "dryBulbTemperatureUncertainty".equals( datamemberName) ) set_dryBulbTemperatureUncertainty( Double.parseDouble(val) );
        else if ( "elevation".equals( datamemberName) ) set_elevation( Double.parseDouble(val) );
        else if ( "extraTerrestrialRadiation".equals( datamemberName) ) set_extraTerrestrialRadiation( Double.parseDouble(val) );
        else if ( "extraTerrestrialRadiationNormal".equals( datamemberName) ) set_extraTerrestrialRadiationNormal( Double.parseDouble(val) );
        else if ( "globalHorizontalIlluminance".equals( datamemberName) ) set_globalHorizontalIlluminance( Double.parseDouble(val) );
        else if ( "globalHorizontalIlluminanceSource".equals( datamemberName) ) set_globalHorizontalIlluminanceSource( val );
        else if ( "globalHorizontalIlluminanceUncertainty".equals( datamemberName) ) set_globalHorizontalIlluminanceUncertainty( Double.parseDouble(val) );
        else if ( "globalHorizontalIrradiance".equals( datamemberName) ) set_globalHorizontalIrradiance( Double.parseDouble(val) );
        else if ( "globalHorizontalIrradianceSource".equals( datamemberName) ) set_globalHorizontalIrradianceSource( val );
        else if ( "globalHorizontalIrradianceUncertainty".equals( datamemberName) ) set_globalHorizontalIrradianceUncertainty( Double.parseDouble(val) );
        else if ( "horizontalVisibility".equals( datamemberName) ) set_horizontalVisibility( Double.parseDouble(val) );
        else if ( "horizontalVisibilitySource".equals( datamemberName) ) set_horizontalVisibilitySource( val );
        else if ( "horizontalVisibilityUncertainty".equals( datamemberName) ) set_horizontalVisibilityUncertainty( Double.parseDouble(val) );
        else if ( "latitude".equals( datamemberName) ) set_latitude( Double.parseDouble(val) );
        else if ( "liquidPrecipitationDepth".equals( datamemberName) ) set_liquidPrecipitationDepth( Double.parseDouble(val) );
        else if ( "liquidPrecipitationDepthSource".equals( datamemberName) ) set_liquidPrecipitationDepthSource( val );
        else if ( "liquidPrecipitationDepthUncertainty".equals( datamemberName) ) set_liquidPrecipitationDepthUncertainty( Double.parseDouble(val) );
        else if ( "liquidPrecipitationQuantity".equals( datamemberName) ) set_liquidPrecipitationQuantity( Double.parseDouble(val) );
        else if ( "longitude".equals( datamemberName) ) set_longitude( Double.parseDouble(val) );
        else if ( "opaqueSkyCover".equals( datamemberName) ) set_opaqueSkyCover( Double.parseDouble(val) );
        else if ( "opaqueSkyCoverSource".equals( datamemberName) ) set_opaqueSkyCoverSource( val );
        else if ( "opaqueSkyCoverUncertainty".equals( datamemberName) ) set_opaqueSkyCoverUncertainty( Double.parseDouble(val) );
        else if ( "precipitableWater".equals( datamemberName) ) set_precipitableWater( Double.parseDouble(val) );
        else if ( "precipitableWaterSource".equals( datamemberName) ) set_precipitableWaterSource( val );
        else if ( "precipitableWaterUncertainty".equals( datamemberName) ) set_precipitableWaterUncertainty( Double.parseDouble(val) );
        else if ( "presentWeather".equals( datamemberName) ) set_presentWeather( Double.parseDouble(val) );
        else if ( "presentWeatherSource".equals( datamemberName) ) set_presentWeatherSource( val );
        else if ( "presentWeatherUncertainty".equals( datamemberName) ) set_presentWeatherUncertainty( Double.parseDouble(val) );
        else if ( "pressure".equals( datamemberName) ) set_pressure( Double.parseDouble(val) );
        else if ( "pressureSource".equals( datamemberName) ) set_pressureSource( val );
        else if ( "pressureUncertainty".equals( datamemberName) ) set_pressureUncertainty( Double.parseDouble(val) );
        else if ( "relativeHumidity".equals( datamemberName) ) set_relativeHumidity( Double.parseDouble(val) );
        else if ( "relativeHumiditySource".equals( datamemberName) ) set_relativeHumiditySource( val );
        else if ( "relativeHumidityUncertainty".equals( datamemberName) ) set_relativeHumidityUncertainty( Double.parseDouble(val) );
        else if ( "stationIDCode".equals( datamemberName) ) set_stationIDCode( Integer.parseInt(val) );
        else if ( "stationName".equals( datamemberName) ) set_stationName( val );
        else if ( "stationState".equals( datamemberName) ) set_stationState( val );
        else if ( "time".equals( datamemberName) ) set_time( val );
        else if ( "timeZone".equals( datamemberName) ) set_timeZone( Double.parseDouble(val) );
        else if ( "totalSkyCover".equals( datamemberName) ) set_totalSkyCover( Double.parseDouble(val) );
        else if ( "totalSkyCoverSource".equals( datamemberName) ) set_totalSkyCoverSource( val );
        else if ( "totalSkyCoverUncertainty".equals( datamemberName) ) set_totalSkyCoverUncertainty( Double.parseDouble(val) );
        else if ( "windDirection".equals( datamemberName) ) set_windDirection( Double.parseDouble(val) );
        else if ( "windDirectionSource".equals( datamemberName) ) set_windDirectionSource( val );
        else if ( "windDirectionUncertainty".equals( datamemberName) ) set_windDirectionUncertainty( Double.parseDouble(val) );
        else if ( "windSpeed".equals( datamemberName) ) set_windSpeed( Double.parseDouble(val) );
        else if ( "windSpeedSource".equals( datamemberName) ) set_windSpeedSource( val );
        else if ( "windSpeedUncertainty".equals( datamemberName) ) set_windSpeedUncertainty( Double.parseDouble(val) );
        else if ( "zenithLuminance".equals( datamemberName) ) set_zenithLuminance( Double.parseDouble(val) );
        else if ( "zenithLuminanceSource".equals( datamemberName) ) set_zenithLuminanceSource( val );
        else if ( "zenithLuminanceUncertianty".equals( datamemberName) ) set_zenithLuminanceUncertianty( Double.parseDouble(val) );
        else retval = super.setParameterAux( datamemberName, val );

        return retval;
    }

    protected boolean setParameterAux( String datamemberName, Object val ) {
        boolean retval = true;
        if ( "aerosolOpticalDepth".equals( datamemberName) ) set_aerosolOpticalDepth( (Double)val );
        else if ( "aerosolOpticalDepthSource".equals( datamemberName) ) set_aerosolOpticalDepthSource( (String)val );
        else if ( "aerosolOpticalDepthUncertainty".equals( datamemberName) ) set_aerosolOpticalDepthUncertainty( (Double)val );
        else if ( "albedo".equals( datamemberName) ) set_albedo( (Double)val );
        else if ( "albedoSource".equals( datamemberName) ) set_albedoSource( (String)val );
        else if ( "albedoUncertainty".equals( datamemberName) ) set_albedoUncertainty( (Double)val );
        else if ( "ceilingHeight".equals( datamemberName) ) set_ceilingHeight( (Double)val );
        else if ( "ceilingHeightSource".equals( datamemberName) ) set_ceilingHeightSource( (String)val );
        else if ( "ceilingHeightUncertainty".equals( datamemberName) ) set_ceilingHeightUncertainty( (Double)val );
        else if ( "date".equals( datamemberName) ) set_date( (String)val );
        else if ( "dewPointTemperature".equals( datamemberName) ) set_dewPointTemperature( (Double)val );
        else if ( "dewPointTemperatureSource".equals( datamemberName) ) set_dewPointTemperatureSource( (String)val );
        else if ( "dewPointTemperatureUncertainty".equals( datamemberName) ) set_dewPointTemperatureUncertainty( (Double)val );
        else if ( "diffuseHorizontalIlluminance".equals( datamemberName) ) set_diffuseHorizontalIlluminance( (Double)val );
        else if ( "diffuseHorizontalIlluminanceSource".equals( datamemberName) ) set_diffuseHorizontalIlluminanceSource( (String)val );
        else if ( "diffuseHorizontalIlluminanceUncertainty".equals( datamemberName) ) set_diffuseHorizontalIlluminanceUncertainty( (Double)val );
        else if ( "diffuseHorizontalIrradiancSource".equals( datamemberName) ) set_diffuseHorizontalIrradiancSource( (String)val );
        else if ( "diffuseHorizontalIrradiancUncertainty".equals( datamemberName) ) set_diffuseHorizontalIrradiancUncertainty( (Double)val );
        else if ( "diffuseHorizontalIrradiance".equals( datamemberName) ) set_diffuseHorizontalIrradiance( (Double)val );
        else if ( "directNormalIlluminance".equals( datamemberName) ) set_directNormalIlluminance( (Double)val );
        else if ( "directNormalIlluminanceSource".equals( datamemberName) ) set_directNormalIlluminanceSource( (String)val );
        else if ( "directNormalIlluminanceUncertainty".equals( datamemberName) ) set_directNormalIlluminanceUncertainty( (Double)val );
        else if ( "directNormalIrradiance".equals( datamemberName) ) set_directNormalIrradiance( (Double)val );
        else if ( "directNormalIrradianceSource".equals( datamemberName) ) set_directNormalIrradianceSource( (String)val );
        else if ( "directNormalIrradianceUncertainty".equals( datamemberName) ) set_directNormalIrradianceUncertainty( (Double)val );
        else if ( "dryBulbTemperature".equals( datamemberName) ) set_dryBulbTemperature( (Double)val );
        else if ( "dryBulbTemperatureSource".equals( datamemberName) ) set_dryBulbTemperatureSource( (String)val );
        else if ( "dryBulbTemperatureUncertainty".equals( datamemberName) ) set_dryBulbTemperatureUncertainty( (Double)val );
        else if ( "elevation".equals( datamemberName) ) set_elevation( (Double)val );
        else if ( "extraTerrestrialRadiation".equals( datamemberName) ) set_extraTerrestrialRadiation( (Double)val );
        else if ( "extraTerrestrialRadiationNormal".equals( datamemberName) ) set_extraTerrestrialRadiationNormal( (Double)val );
        else if ( "globalHorizontalIlluminance".equals( datamemberName) ) set_globalHorizontalIlluminance( (Double)val );
        else if ( "globalHorizontalIlluminanceSource".equals( datamemberName) ) set_globalHorizontalIlluminanceSource( (String)val );
        else if ( "globalHorizontalIlluminanceUncertainty".equals( datamemberName) ) set_globalHorizontalIlluminanceUncertainty( (Double)val );
        else if ( "globalHorizontalIrradiance".equals( datamemberName) ) set_globalHorizontalIrradiance( (Double)val );
        else if ( "globalHorizontalIrradianceSource".equals( datamemberName) ) set_globalHorizontalIrradianceSource( (String)val );
        else if ( "globalHorizontalIrradianceUncertainty".equals( datamemberName) ) set_globalHorizontalIrradianceUncertainty( (Double)val );
        else if ( "horizontalVisibility".equals( datamemberName) ) set_horizontalVisibility( (Double)val );
        else if ( "horizontalVisibilitySource".equals( datamemberName) ) set_horizontalVisibilitySource( (String)val );
        else if ( "horizontalVisibilityUncertainty".equals( datamemberName) ) set_horizontalVisibilityUncertainty( (Double)val );
        else if ( "latitude".equals( datamemberName) ) set_latitude( (Double)val );
        else if ( "liquidPrecipitationDepth".equals( datamemberName) ) set_liquidPrecipitationDepth( (Double)val );
        else if ( "liquidPrecipitationDepthSource".equals( datamemberName) ) set_liquidPrecipitationDepthSource( (String)val );
        else if ( "liquidPrecipitationDepthUncertainty".equals( datamemberName) ) set_liquidPrecipitationDepthUncertainty( (Double)val );
        else if ( "liquidPrecipitationQuantity".equals( datamemberName) ) set_liquidPrecipitationQuantity( (Double)val );
        else if ( "longitude".equals( datamemberName) ) set_longitude( (Double)val );
        else if ( "opaqueSkyCover".equals( datamemberName) ) set_opaqueSkyCover( (Double)val );
        else if ( "opaqueSkyCoverSource".equals( datamemberName) ) set_opaqueSkyCoverSource( (String)val );
        else if ( "opaqueSkyCoverUncertainty".equals( datamemberName) ) set_opaqueSkyCoverUncertainty( (Double)val );
        else if ( "precipitableWater".equals( datamemberName) ) set_precipitableWater( (Double)val );
        else if ( "precipitableWaterSource".equals( datamemberName) ) set_precipitableWaterSource( (String)val );
        else if ( "precipitableWaterUncertainty".equals( datamemberName) ) set_precipitableWaterUncertainty( (Double)val );
        else if ( "presentWeather".equals( datamemberName) ) set_presentWeather( (Double)val );
        else if ( "presentWeatherSource".equals( datamemberName) ) set_presentWeatherSource( (String)val );
        else if ( "presentWeatherUncertainty".equals( datamemberName) ) set_presentWeatherUncertainty( (Double)val );
        else if ( "pressure".equals( datamemberName) ) set_pressure( (Double)val );
        else if ( "pressureSource".equals( datamemberName) ) set_pressureSource( (String)val );
        else if ( "pressureUncertainty".equals( datamemberName) ) set_pressureUncertainty( (Double)val );
        else if ( "relativeHumidity".equals( datamemberName) ) set_relativeHumidity( (Double)val );
        else if ( "relativeHumiditySource".equals( datamemberName) ) set_relativeHumiditySource( (String)val );
        else if ( "relativeHumidityUncertainty".equals( datamemberName) ) set_relativeHumidityUncertainty( (Double)val );
        else if ( "stationIDCode".equals( datamemberName) ) set_stationIDCode( (Integer)val );
        else if ( "stationName".equals( datamemberName) ) set_stationName( (String)val );
        else if ( "stationState".equals( datamemberName) ) set_stationState( (String)val );
        else if ( "time".equals( datamemberName) ) set_time( (String)val );
        else if ( "timeZone".equals( datamemberName) ) set_timeZone( (Double)val );
        else if ( "totalSkyCover".equals( datamemberName) ) set_totalSkyCover( (Double)val );
        else if ( "totalSkyCoverSource".equals( datamemberName) ) set_totalSkyCoverSource( (String)val );
        else if ( "totalSkyCoverUncertainty".equals( datamemberName) ) set_totalSkyCoverUncertainty( (Double)val );
        else if ( "windDirection".equals( datamemberName) ) set_windDirection( (Double)val );
        else if ( "windDirectionSource".equals( datamemberName) ) set_windDirectionSource( (String)val );
        else if ( "windDirectionUncertainty".equals( datamemberName) ) set_windDirectionUncertainty( (Double)val );
        else if ( "windSpeed".equals( datamemberName) ) set_windSpeed( (Double)val );
        else if ( "windSpeedSource".equals( datamemberName) ) set_windSpeedSource( (String)val );
        else if ( "windSpeedUncertainty".equals( datamemberName) ) set_windSpeedUncertainty( (Double)val );
        else if ( "zenithLuminance".equals( datamemberName) ) set_zenithLuminance( (Double)val );
        else if ( "zenithLuminanceSource".equals( datamemberName) ) set_zenithLuminanceSource( (String)val );
        else if ( "zenithLuminanceUncertianty".equals( datamemberName) ) set_zenithLuminanceUncertianty( (Double)val );
        else retval = super.setParameterAux( datamemberName, val );

        return retval;
    }

    public void copyFrom( Object object ) {
        super.copyFrom( object );
        if ( object instanceof TMYWeather ) {
            TMYWeather data = (TMYWeather)object;
            _aerosolOpticalDepth = data._aerosolOpticalDepth;
            _aerosolOpticalDepthSource = data._aerosolOpticalDepthSource;
            _aerosolOpticalDepthUncertainty = data._aerosolOpticalDepthUncertainty;
            _albedo = data._albedo;
            _albedoSource = data._albedoSource;
            _albedoUncertainty = data._albedoUncertainty;
            _ceilingHeight = data._ceilingHeight;
            _ceilingHeightSource = data._ceilingHeightSource;
            _ceilingHeightUncertainty = data._ceilingHeightUncertainty;
            _date = data._date;
            _dewPointTemperature = data._dewPointTemperature;
            _dewPointTemperatureSource = data._dewPointTemperatureSource;
            _dewPointTemperatureUncertainty = data._dewPointTemperatureUncertainty;
            _diffuseHorizontalIlluminance = data._diffuseHorizontalIlluminance;
            _diffuseHorizontalIlluminanceSource = data._diffuseHorizontalIlluminanceSource;
            _diffuseHorizontalIlluminanceUncertainty = data._diffuseHorizontalIlluminanceUncertainty;
            _diffuseHorizontalIrradiancSource = data._diffuseHorizontalIrradiancSource;
            _diffuseHorizontalIrradiancUncertainty = data._diffuseHorizontalIrradiancUncertainty;
            _diffuseHorizontalIrradiance = data._diffuseHorizontalIrradiance;
            _directNormalIlluminance = data._directNormalIlluminance;
            _directNormalIlluminanceSource = data._directNormalIlluminanceSource;
            _directNormalIlluminanceUncertainty = data._directNormalIlluminanceUncertainty;
            _directNormalIrradiance = data._directNormalIrradiance;
            _directNormalIrradianceSource = data._directNormalIrradianceSource;
            _directNormalIrradianceUncertainty = data._directNormalIrradianceUncertainty;
            _dryBulbTemperature = data._dryBulbTemperature;
            _dryBulbTemperatureSource = data._dryBulbTemperatureSource;
            _dryBulbTemperatureUncertainty = data._dryBulbTemperatureUncertainty;
            _elevation = data._elevation;
            _extraTerrestrialRadiation = data._extraTerrestrialRadiation;
            _extraTerrestrialRadiationNormal = data._extraTerrestrialRadiationNormal;
            _globalHorizontalIlluminance = data._globalHorizontalIlluminance;
            _globalHorizontalIlluminanceSource = data._globalHorizontalIlluminanceSource;
            _globalHorizontalIlluminanceUncertainty = data._globalHorizontalIlluminanceUncertainty;
            _globalHorizontalIrradiance = data._globalHorizontalIrradiance;
            _globalHorizontalIrradianceSource = data._globalHorizontalIrradianceSource;
            _globalHorizontalIrradianceUncertainty = data._globalHorizontalIrradianceUncertainty;
            _horizontalVisibility = data._horizontalVisibility;
            _horizontalVisibilitySource = data._horizontalVisibilitySource;
            _horizontalVisibilityUncertainty = data._horizontalVisibilityUncertainty;
            _latitude = data._latitude;
            _liquidPrecipitationDepth = data._liquidPrecipitationDepth;
            _liquidPrecipitationDepthSource = data._liquidPrecipitationDepthSource;
            _liquidPrecipitationDepthUncertainty = data._liquidPrecipitationDepthUncertainty;
            _liquidPrecipitationQuantity = data._liquidPrecipitationQuantity;
            _longitude = data._longitude;
            _opaqueSkyCover = data._opaqueSkyCover;
            _opaqueSkyCoverSource = data._opaqueSkyCoverSource;
            _opaqueSkyCoverUncertainty = data._opaqueSkyCoverUncertainty;
            _precipitableWater = data._precipitableWater;
            _precipitableWaterSource = data._precipitableWaterSource;
            _precipitableWaterUncertainty = data._precipitableWaterUncertainty;
            _presentWeather = data._presentWeather;
            _presentWeatherSource = data._presentWeatherSource;
            _presentWeatherUncertainty = data._presentWeatherUncertainty;
            _pressure = data._pressure;
            _pressureSource = data._pressureSource;
            _pressureUncertainty = data._pressureUncertainty;
            _relativeHumidity = data._relativeHumidity;
            _relativeHumiditySource = data._relativeHumiditySource;
            _relativeHumidityUncertainty = data._relativeHumidityUncertainty;
            _stationIDCode = data._stationIDCode;
            _stationName = data._stationName;
            _stationState = data._stationState;
            _time = data._time;
            _timeZone = data._timeZone;
            _totalSkyCover = data._totalSkyCover;
            _totalSkyCoverSource = data._totalSkyCoverSource;
            _totalSkyCoverUncertainty = data._totalSkyCoverUncertainty;
            _windDirection = data._windDirection;
            _windDirectionSource = data._windDirectionSource;
            _windDirectionUncertainty = data._windDirectionUncertainty;
            _windSpeed = data._windSpeed;
            _windSpeedSource = data._windSpeedSource;
            _windSpeedUncertainty = data._windSpeedUncertainty;
            _zenithLuminance = data._zenithLuminance;
            _zenithLuminanceSource = data._zenithLuminanceSource;
            _zenithLuminanceUncertianty = data._zenithLuminanceUncertianty;
        }
    }
}

