// This file was generated by the WebGME Federates Exporter plugin. Do not edit manually!

package SupervisoryController;

import java.util.HashSet;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.cpswt.utils.CpswtUtils;

import hla.rti.AttributeHandleSet;
import hla.rti.FederateNotExecutionMember;
import hla.rti.LogicalTime;
import hla.rti.NameNotFound;
import hla.rti.ObjectClassNotDefined;
import hla.rti.ObjectClassNotPublished;
import hla.rti.ObjectClassNotSubscribed;
import hla.rti.RTIambassador;
import hla.rti.ReflectedAttributes;
import hla.rti.SuppliedAttributes;

import org.cpswt.hla.*;

/**
* Implements ObjectRoot.ResourcesPhysicalStatus
*/
public class ResourcesPhysicalStatus extends ObjectRoot {

    private static final Logger logger = LogManager.getLogger();

    /**
    * Creates an instance of the ResourcesPhysicalStatus object class with default attribute values.
    */
    public ResourcesPhysicalStatus() {}

    private static int _current_Imaginary_A_handle;
    private static int _current_Imaginary_B_handle;
    private static int _current_Imaginary_C_handle;
    private static int _current_Real_A_handle;
    private static int _current_Real_B_handle;
    private static int _current_Real_C_handle;
    private static int _gridNodeId_handle;
    private static int _impedance_Imaginary_A_handle;
    private static int _impedance_Imaginary_B_handle;
    private static int _impedance_Imaginary_C_handle;
    private static int _impedance_Real_A_handle;
    private static int _impedance_Real_B_handle;
    private static int _impedance_Real_C_handle;
    private static int _loadInstanceName_handle;
    private static int _name_handle;
    private static int _phases_handle;
    private static int _power_Imaginary_A_handle;
    private static int _power_Imaginary_B_handle;
    private static int _power_Imaginary_C_handle;
    private static int _power_Real_A_handle;
    private static int _power_Real_B_handle;
    private static int _power_Real_C_handle;
    private static int _status_handle;
    private static int _type_handle;
    private static int _voltage_Imaginary_A_handle;
    private static int _voltage_Imaginary_B_handle;
    private static int _voltage_Imaginary_C_handle;
    private static int _voltage_Real_A_handle;
    private static int _voltage_Real_B_handle;
    private static int _voltage_Real_C_handle;

    private static boolean _isInitialized = false;

    private static int _handle;

    /**
    * Returns the handle (RTI assigned) of the ResourcesPhysicalStatus object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the handle of the class pertaining to the reference,
    * rather than the handle of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassHandle()}.
    *
    * @return the RTI assigned integer handle that represents this object class
    */
    public static int get_handle() {
        return _handle;
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of the ResourcesPhysicalStatus object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the name of the class pertaining to the reference,
    * rather than the name of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassName()}.
    *
    * @return the fully-qualified HLA class path for this object class
    */
    public static String get_class_name() {
        return "ObjectRoot.ResourcesPhysicalStatus";
    }

    /**
    * Returns the simple name (the last name in the dot-delimited fully-qualified
    * class name) of the ResourcesPhysicalStatus object class.
    *
    * @return the name of this object class
    */
    public static String get_simple_class_name() {
        return "ResourcesPhysicalStatus";
    }

    private static Set< String > _datamemberNames = new HashSet< String >();
    private static Set< String > _allDatamemberNames = new HashSet< String >();

    /**
    * Returns a set containing the names of all of the non-hidden attributes in the
    * ResourcesPhysicalStatus object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #getAttributeNames()}.
    *
    * @return a modifiable set of the non-hidden attribute names for this object class
    */
    public static Set< String > get_attribute_names() {
        return new HashSet< String >(_datamemberNames);
    }

    /**
    * Returns a set containing the names of all of the attributes in the
    * ResourcesPhysicalStatus object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #getAttributeNames()}.
    *
    * @return a modifiable set of the attribute names for this object class
    */
    public static Set< String > get_all_attribute_names() {
        return new HashSet< String >(_allDatamemberNames);
    }

    private static Set< String > _publishAttributeNameSet = new HashSet< String >();
    private static Set< String > _subscribeAttributeNameSet = new HashSet< String >();

    static {
        _classNameSet.add("ObjectRoot.ResourcesPhysicalStatus");
        _classNameClassMap.put("ObjectRoot.ResourcesPhysicalStatus", ResourcesPhysicalStatus.class);

        _datamemberClassNameSetMap.put("ObjectRoot.ResourcesPhysicalStatus", _datamemberNames);
        _allDatamemberClassNameSetMap.put("ObjectRoot.ResourcesPhysicalStatus", _allDatamemberNames);

        _datamemberNames.add("current_Imaginary_A");
        _datamemberNames.add("current_Imaginary_B");
        _datamemberNames.add("current_Imaginary_C");
        _datamemberNames.add("current_Real_A");
        _datamemberNames.add("current_Real_B");
        _datamemberNames.add("current_Real_C");
        _datamemberNames.add("gridNodeId");
        _datamemberNames.add("impedance_Imaginary_A");
        _datamemberNames.add("impedance_Imaginary_B");
        _datamemberNames.add("impedance_Imaginary_C");
        _datamemberNames.add("impedance_Real_A");
        _datamemberNames.add("impedance_Real_B");
        _datamemberNames.add("impedance_Real_C");
        _datamemberNames.add("loadInstanceName");
        _datamemberNames.add("name");
        _datamemberNames.add("phases");
        _datamemberNames.add("power_Imaginary_A");
        _datamemberNames.add("power_Imaginary_B");
        _datamemberNames.add("power_Imaginary_C");
        _datamemberNames.add("power_Real_A");
        _datamemberNames.add("power_Real_B");
        _datamemberNames.add("power_Real_C");
        _datamemberNames.add("status");
        _datamemberNames.add("type");
        _datamemberNames.add("voltage_Imaginary_A");
        _datamemberNames.add("voltage_Imaginary_B");
        _datamemberNames.add("voltage_Imaginary_C");
        _datamemberNames.add("voltage_Real_A");
        _datamemberNames.add("voltage_Real_B");
        _datamemberNames.add("voltage_Real_C");

        _datamemberTypeMap.put("current_Imaginary_A", "float");
        _datamemberTypeMap.put("current_Imaginary_B", "float");
        _datamemberTypeMap.put("current_Imaginary_C", "float");
        _datamemberTypeMap.put("current_Real_A", "float");
        _datamemberTypeMap.put("current_Real_B", "float");
        _datamemberTypeMap.put("current_Real_C", "float");
        _datamemberTypeMap.put("gridNodeId", "String");
        _datamemberTypeMap.put("impedance_Imaginary_A", "float");
        _datamemberTypeMap.put("impedance_Imaginary_B", "float");
        _datamemberTypeMap.put("impedance_Imaginary_C", "float");
        _datamemberTypeMap.put("impedance_Real_A", "float");
        _datamemberTypeMap.put("impedance_Real_B", "float");
        _datamemberTypeMap.put("impedance_Real_C", "float");
        _datamemberTypeMap.put("loadInstanceName", "String");
        _datamemberTypeMap.put("name", "String");
        _datamemberTypeMap.put("phases", "String");
        _datamemberTypeMap.put("power_Imaginary_A", "float");
        _datamemberTypeMap.put("power_Imaginary_B", "float");
        _datamemberTypeMap.put("power_Imaginary_C", "float");
        _datamemberTypeMap.put("power_Real_A", "float");
        _datamemberTypeMap.put("power_Real_B", "float");
        _datamemberTypeMap.put("power_Real_C", "float");
        _datamemberTypeMap.put("status", "boolean");
        _datamemberTypeMap.put("type", "String");
        _datamemberTypeMap.put("voltage_Imaginary_A", "float");
        _datamemberTypeMap.put("voltage_Imaginary_B", "float");
        _datamemberTypeMap.put("voltage_Imaginary_C", "float");
        _datamemberTypeMap.put("voltage_Real_A", "float");
        _datamemberTypeMap.put("voltage_Real_B", "float");
        _datamemberTypeMap.put("voltage_Real_C", "float");

        _allDatamemberNames.add("current_Imaginary_A");
        _allDatamemberNames.add("current_Imaginary_B");
        _allDatamemberNames.add("current_Imaginary_C");
        _allDatamemberNames.add("current_Real_A");
        _allDatamemberNames.add("current_Real_B");
        _allDatamemberNames.add("current_Real_C");
        _allDatamemberNames.add("gridNodeId");
        _allDatamemberNames.add("impedance_Imaginary_A");
        _allDatamemberNames.add("impedance_Imaginary_B");
        _allDatamemberNames.add("impedance_Imaginary_C");
        _allDatamemberNames.add("impedance_Real_A");
        _allDatamemberNames.add("impedance_Real_B");
        _allDatamemberNames.add("impedance_Real_C");
        _allDatamemberNames.add("loadInstanceName");
        _allDatamemberNames.add("name");
        _allDatamemberNames.add("phases");
        _allDatamemberNames.add("power_Imaginary_A");
        _allDatamemberNames.add("power_Imaginary_B");
        _allDatamemberNames.add("power_Imaginary_C");
        _allDatamemberNames.add("power_Real_A");
        _allDatamemberNames.add("power_Real_B");
        _allDatamemberNames.add("power_Real_C");
        _allDatamemberNames.add("status");
        _allDatamemberNames.add("type");
        _allDatamemberNames.add("voltage_Imaginary_A");
        _allDatamemberNames.add("voltage_Imaginary_B");
        _allDatamemberNames.add("voltage_Imaginary_C");
        _allDatamemberNames.add("voltage_Real_A");
        _allDatamemberNames.add("voltage_Real_B");
        _allDatamemberNames.add("voltage_Real_C");

        _classNamePublishAttributeNameMap.put("ObjectRoot.ResourcesPhysicalStatus", _publishAttributeNameSet);
        _classNameSubscribeAttributeNameMap.put("ObjectRoot.ResourcesPhysicalStatus", _subscribeAttributeNameSet);
    }

    protected static void init(RTIambassador rti) {
        if (_isInitialized) return;
        _isInitialized = true;

        ObjectRoot.init(rti);

        boolean isNotInitialized = true;
        while(isNotInitialized) {
            try {
                _handle = rti.getObjectClassHandle("ObjectRoot.ResourcesPhysicalStatus");
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

        _classNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus", get_handle());
        _classHandleNameMap.put(get_handle(), "ObjectRoot.ResourcesPhysicalStatus");
        _classHandleSimpleNameMap.put(get_handle(), "ResourcesPhysicalStatus");

        isNotInitialized = true;
        while(isNotInitialized) {
            try {
                _current_Imaginary_A_handle = rti.getAttributeHandle("current_Imaginary_A", get_handle());
                _current_Imaginary_B_handle = rti.getAttributeHandle("current_Imaginary_B", get_handle());
                _current_Imaginary_C_handle = rti.getAttributeHandle("current_Imaginary_C", get_handle());
                _current_Real_A_handle = rti.getAttributeHandle("current_Real_A", get_handle());
                _current_Real_B_handle = rti.getAttributeHandle("current_Real_B", get_handle());
                _current_Real_C_handle = rti.getAttributeHandle("current_Real_C", get_handle());
                _gridNodeId_handle = rti.getAttributeHandle("gridNodeId", get_handle());
                _impedance_Imaginary_A_handle = rti.getAttributeHandle("impedance_Imaginary_A", get_handle());
                _impedance_Imaginary_B_handle = rti.getAttributeHandle("impedance_Imaginary_B", get_handle());
                _impedance_Imaginary_C_handle = rti.getAttributeHandle("impedance_Imaginary_C", get_handle());
                _impedance_Real_A_handle = rti.getAttributeHandle("impedance_Real_A", get_handle());
                _impedance_Real_B_handle = rti.getAttributeHandle("impedance_Real_B", get_handle());
                _impedance_Real_C_handle = rti.getAttributeHandle("impedance_Real_C", get_handle());
                _loadInstanceName_handle = rti.getAttributeHandle("loadInstanceName", get_handle());
                _name_handle = rti.getAttributeHandle("name", get_handle());
                _phases_handle = rti.getAttributeHandle("phases", get_handle());
                _power_Imaginary_A_handle = rti.getAttributeHandle("power_Imaginary_A", get_handle());
                _power_Imaginary_B_handle = rti.getAttributeHandle("power_Imaginary_B", get_handle());
                _power_Imaginary_C_handle = rti.getAttributeHandle("power_Imaginary_C", get_handle());
                _power_Real_A_handle = rti.getAttributeHandle("power_Real_A", get_handle());
                _power_Real_B_handle = rti.getAttributeHandle("power_Real_B", get_handle());
                _power_Real_C_handle = rti.getAttributeHandle("power_Real_C", get_handle());
                _status_handle = rti.getAttributeHandle("status", get_handle());
                _type_handle = rti.getAttributeHandle("type", get_handle());
                _voltage_Imaginary_A_handle = rti.getAttributeHandle("voltage_Imaginary_A", get_handle());
                _voltage_Imaginary_B_handle = rti.getAttributeHandle("voltage_Imaginary_B", get_handle());
                _voltage_Imaginary_C_handle = rti.getAttributeHandle("voltage_Imaginary_C", get_handle());
                _voltage_Real_A_handle = rti.getAttributeHandle("voltage_Real_A", get_handle());
                _voltage_Real_B_handle = rti.getAttributeHandle("voltage_Real_B", get_handle());
                _voltage_Real_C_handle = rti.getAttributeHandle("voltage_Real_C", get_handle());
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (ObjectClassNotDefined e) {
                logger.error("could not initialize: Object Class Not Defined", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.current_Imaginary_A", _current_Imaginary_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.current_Imaginary_B", _current_Imaginary_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.current_Imaginary_C", _current_Imaginary_C_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.current_Real_A", _current_Real_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.current_Real_B", _current_Real_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.current_Real_C", _current_Real_C_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.gridNodeId", _gridNodeId_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.impedance_Imaginary_A", _impedance_Imaginary_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.impedance_Imaginary_B", _impedance_Imaginary_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.impedance_Imaginary_C", _impedance_Imaginary_C_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.impedance_Real_A", _impedance_Real_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.impedance_Real_B", _impedance_Real_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.impedance_Real_C", _impedance_Real_C_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.loadInstanceName", _loadInstanceName_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.name", _name_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.phases", _phases_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.power_Imaginary_A", _power_Imaginary_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.power_Imaginary_B", _power_Imaginary_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.power_Imaginary_C", _power_Imaginary_C_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.power_Real_A", _power_Real_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.power_Real_B", _power_Real_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.power_Real_C", _power_Real_C_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.status", _status_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.type", _type_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.voltage_Imaginary_A", _voltage_Imaginary_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.voltage_Imaginary_B", _voltage_Imaginary_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.voltage_Imaginary_C", _voltage_Imaginary_C_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.voltage_Real_A", _voltage_Real_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.voltage_Real_B", _voltage_Real_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.ResourcesPhysicalStatus.voltage_Real_C", _voltage_Real_C_handle);

        _datamemberHandleNameMap.put(_current_Imaginary_A_handle, "current_Imaginary_A");
        _datamemberHandleNameMap.put(_current_Imaginary_B_handle, "current_Imaginary_B");
        _datamemberHandleNameMap.put(_current_Imaginary_C_handle, "current_Imaginary_C");
        _datamemberHandleNameMap.put(_current_Real_A_handle, "current_Real_A");
        _datamemberHandleNameMap.put(_current_Real_B_handle, "current_Real_B");
        _datamemberHandleNameMap.put(_current_Real_C_handle, "current_Real_C");
        _datamemberHandleNameMap.put(_gridNodeId_handle, "gridNodeId");
        _datamemberHandleNameMap.put(_impedance_Imaginary_A_handle, "impedance_Imaginary_A");
        _datamemberHandleNameMap.put(_impedance_Imaginary_B_handle, "impedance_Imaginary_B");
        _datamemberHandleNameMap.put(_impedance_Imaginary_C_handle, "impedance_Imaginary_C");
        _datamemberHandleNameMap.put(_impedance_Real_A_handle, "impedance_Real_A");
        _datamemberHandleNameMap.put(_impedance_Real_B_handle, "impedance_Real_B");
        _datamemberHandleNameMap.put(_impedance_Real_C_handle, "impedance_Real_C");
        _datamemberHandleNameMap.put(_loadInstanceName_handle, "loadInstanceName");
        _datamemberHandleNameMap.put(_name_handle, "name");
        _datamemberHandleNameMap.put(_phases_handle, "phases");
        _datamemberHandleNameMap.put(_power_Imaginary_A_handle, "power_Imaginary_A");
        _datamemberHandleNameMap.put(_power_Imaginary_B_handle, "power_Imaginary_B");
        _datamemberHandleNameMap.put(_power_Imaginary_C_handle, "power_Imaginary_C");
        _datamemberHandleNameMap.put(_power_Real_A_handle, "power_Real_A");
        _datamemberHandleNameMap.put(_power_Real_B_handle, "power_Real_B");
        _datamemberHandleNameMap.put(_power_Real_C_handle, "power_Real_C");
        _datamemberHandleNameMap.put(_status_handle, "status");
        _datamemberHandleNameMap.put(_type_handle, "type");
        _datamemberHandleNameMap.put(_voltage_Imaginary_A_handle, "voltage_Imaginary_A");
        _datamemberHandleNameMap.put(_voltage_Imaginary_B_handle, "voltage_Imaginary_B");
        _datamemberHandleNameMap.put(_voltage_Imaginary_C_handle, "voltage_Imaginary_C");
        _datamemberHandleNameMap.put(_voltage_Real_A_handle, "voltage_Real_A");
        _datamemberHandleNameMap.put(_voltage_Real_B_handle, "voltage_Real_B");
        _datamemberHandleNameMap.put(_voltage_Real_C_handle, "voltage_Real_C");
    }

    private static boolean _isPublished = false;

    /**
    * Publishes the ResourcesPhysicalStatus object class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void publish(RTIambassador rti) {
        if (_isPublished) return;

        init(rti);

        AttributeHandleSet publishedAttributeHandleSet = _factory.createAttributeHandleSet();
        for(String attributeName : _publishAttributeNameSet) {
            try {
                publishedAttributeHandleSet.add(_datamemberNameHandleMap.get("ObjectRoot.ResourcesPhysicalStatus." + attributeName));
                logger.trace("publish {}:{}", get_class_name(), attributeName);
            } catch (Exception e) {
                logger.error("could not publish \"" + attributeName + "\" attribute.", e);
            }
        }

        synchronized(rti) {
            boolean isNotPublished = true;
            while(isNotPublished) {
                try {
                    rti.publishObjectClass(get_handle(), publishedAttributeHandleSet);
                    isNotPublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not publish: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not publish: Object Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = true;
        logger.debug("publish: {}", get_class_name());
    }

    /**
    * Unpublishes the ResourcesPhysicalStatus object class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unpublish(RTIambassador rti) {
        if (!_isPublished) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnpublished = true;
            while(isNotUnpublished) {
                try {
                    rti.unpublishObjectClass(get_handle());
                    isNotUnpublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unpublish: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not unpublish: Object Class Not Defined", e);
                    return;
                } catch (ObjectClassNotPublished e) {
                    logger.error("could not unpublish: Object Class Not Published", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = false;
        logger.debug("unpublish: {}", get_class_name());
    }

    private static boolean _isSubscribed = false;

    /**
    * Subscribes a federate to the ResourcesPhysicalStatus object class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void subscribe(RTIambassador rti) {
        if (_isSubscribed) return;

        init(rti);

        AttributeHandleSet subscribedAttributeHandleSet = _factory.createAttributeHandleSet();
        for(String attributeName : _subscribeAttributeNameSet) {
            try {
                subscribedAttributeHandleSet.add(_datamemberNameHandleMap.get("ObjectRoot.ResourcesPhysicalStatus." + attributeName));
                logger.trace("subscribe {}:{}", get_class_name(), attributeName);
            } catch (Exception e) {
                logger.error("could not subscribe to \"" + attributeName + "\" attribute.", e);
            }
        }

        synchronized(rti) {
            boolean isNotSubscribed = true;
            while(isNotSubscribed) {
                try {
                    rti.subscribeObjectClassAttributes(get_handle(), subscribedAttributeHandleSet);
                    isNotSubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not subscribe: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not subscribe: Object Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = true;
        logger.debug("subscribe: {}", get_class_name());
    }

    /**
    * Unsubscribes a federate from the ResourcesPhysicalStatus object class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unsubscribe(RTIambassador rti) {
        if (!_isSubscribed) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnsubscribed = true;
            while(isNotUnsubscribed) {
                try {
                    rti.unsubscribeObjectClass(get_handle());
                    isNotUnsubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unsubscribe: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not unsubscribe: Object Class Not Defined", e);
                    return;
                } catch (ObjectClassNotSubscribed e) {
                    logger.error("could not unsubscribe: Object Class Not Subscribed", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = false;
        logger.debug("unsubscribe: {}", get_class_name());
    }

    /**
    * Return true if "handle" is equal to the handle (RTI assigned) of this class
    * (that is, the ResourcesPhysicalStatus object class).
    *
    * @param handle handle to compare to the value of the handle (RTI assigned) of
    * this class (the ResourcesPhysicalStatus object class).
    * @return "true" if "handle" matches the value of the handle of this class
    * (that is, the ResourcesPhysicalStatus object class).
    */
    public static boolean match(int handle) {
        return handle == get_handle();
    }

    /**
    * Returns the handle (RTI assigned) of this instance's object class .
    *
    * @return the handle (RTI assigned) if this instance's object class
    */
    public int getClassHandle() {
        return get_handle();
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of this instance's object class.
    *
    * @return the fully-qualified (dot-delimited) name of this instance's object class
    */
    public String getClassName() {
        return get_class_name();
    }

    /**
    * Returns the simple name (last name in its fully-qualified dot-delimited name)
    * of this instance's object class.
    *
    * @return the simple name of this instance's object class
    */
    public String getSimpleClassName() {
        return get_simple_class_name();
    }

    /**
    * Returns a set containing the names of all of the non-hiddenattributes of an
    * object class instance.
    *
    * @return set containing the names of all of the attributes of an
    * object class instance
    */
    public Set< String > getAttributeNames() {
        return get_attribute_names();
    }

    /**
    * Returns a set containing the names of all of the attributes of an
    * object class instance.
    *
    * @return set containing the names of all of the attributes of an
    * object class instance
    */
    public Set< String > getAllAttributeNames() {
        return get_all_attribute_names();
    }

    @Override
    public String getAttributeName(int datamemberHandle) {
        if (datamemberHandle == _current_Imaginary_A_handle) return "current_Imaginary_A";
        else if (datamemberHandle == _current_Imaginary_B_handle) return "current_Imaginary_B";
        else if (datamemberHandle == _current_Imaginary_C_handle) return "current_Imaginary_C";
        else if (datamemberHandle == _current_Real_A_handle) return "current_Real_A";
        else if (datamemberHandle == _current_Real_B_handle) return "current_Real_B";
        else if (datamemberHandle == _current_Real_C_handle) return "current_Real_C";
        else if (datamemberHandle == _gridNodeId_handle) return "gridNodeId";
        else if (datamemberHandle == _impedance_Imaginary_A_handle) return "impedance_Imaginary_A";
        else if (datamemberHandle == _impedance_Imaginary_B_handle) return "impedance_Imaginary_B";
        else if (datamemberHandle == _impedance_Imaginary_C_handle) return "impedance_Imaginary_C";
        else if (datamemberHandle == _impedance_Real_A_handle) return "impedance_Real_A";
        else if (datamemberHandle == _impedance_Real_B_handle) return "impedance_Real_B";
        else if (datamemberHandle == _impedance_Real_C_handle) return "impedance_Real_C";
        else if (datamemberHandle == _loadInstanceName_handle) return "loadInstanceName";
        else if (datamemberHandle == _name_handle) return "name";
        else if (datamemberHandle == _phases_handle) return "phases";
        else if (datamemberHandle == _power_Imaginary_A_handle) return "power_Imaginary_A";
        else if (datamemberHandle == _power_Imaginary_B_handle) return "power_Imaginary_B";
        else if (datamemberHandle == _power_Imaginary_C_handle) return "power_Imaginary_C";
        else if (datamemberHandle == _power_Real_A_handle) return "power_Real_A";
        else if (datamemberHandle == _power_Real_B_handle) return "power_Real_B";
        else if (datamemberHandle == _power_Real_C_handle) return "power_Real_C";
        else if (datamemberHandle == _status_handle) return "status";
        else if (datamemberHandle == _type_handle) return "type";
        else if (datamemberHandle == _voltage_Imaginary_A_handle) return "voltage_Imaginary_A";
        else if (datamemberHandle == _voltage_Imaginary_B_handle) return "voltage_Imaginary_B";
        else if (datamemberHandle == _voltage_Imaginary_C_handle) return "voltage_Imaginary_C";
        else if (datamemberHandle == _voltage_Real_A_handle) return "voltage_Real_A";
        else if (datamemberHandle == _voltage_Real_B_handle) return "voltage_Real_B";
        else if (datamemberHandle == _voltage_Real_C_handle) return "voltage_Real_C";
        else return super.getAttributeName(datamemberHandle);
    }

    /**
    * Publishes the object class of this instance of the class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void publishObject(RTIambassador rti) {
        publish(rti);
    }

    /**
    * Unpublishes the object class of this instance of this class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unpublishObject(RTIambassador rti) {
        unpublish(rti);
    }

    /**
    * Subscribes a federate to the object class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void subscribeObject(RTIambassador rti) {
        subscribe(rti);
    }

    /**
    * Unsubscribes a federate from the object class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unsubscribeObject(RTIambassador rti) {
        unsubscribe(rti);
    }

    @Override
    public String toString() {
        return getClass().getName() + "("
                + "current_Imaginary_A:" + get_current_Imaginary_A()
                + "," + "current_Imaginary_B:" + get_current_Imaginary_B()
                + "," + "current_Imaginary_C:" + get_current_Imaginary_C()
                + "," + "current_Real_A:" + get_current_Real_A()
                + "," + "current_Real_B:" + get_current_Real_B()
                + "," + "current_Real_C:" + get_current_Real_C()
                + "," + "gridNodeId:" + get_gridNodeId()
                + "," + "impedance_Imaginary_A:" + get_impedance_Imaginary_A()
                + "," + "impedance_Imaginary_B:" + get_impedance_Imaginary_B()
                + "," + "impedance_Imaginary_C:" + get_impedance_Imaginary_C()
                + "," + "impedance_Real_A:" + get_impedance_Real_A()
                + "," + "impedance_Real_B:" + get_impedance_Real_B()
                + "," + "impedance_Real_C:" + get_impedance_Real_C()
                + "," + "loadInstanceName:" + get_loadInstanceName()
                + "," + "name:" + get_name()
                + "," + "phases:" + get_phases()
                + "," + "power_Imaginary_A:" + get_power_Imaginary_A()
                + "," + "power_Imaginary_B:" + get_power_Imaginary_B()
                + "," + "power_Imaginary_C:" + get_power_Imaginary_C()
                + "," + "power_Real_A:" + get_power_Real_A()
                + "," + "power_Real_B:" + get_power_Real_B()
                + "," + "power_Real_C:" + get_power_Real_C()
                + "," + "status:" + get_status()
                + "," + "type:" + get_type()
                + "," + "voltage_Imaginary_A:" + get_voltage_Imaginary_A()
                + "," + "voltage_Imaginary_B:" + get_voltage_Imaginary_B()
                + "," + "voltage_Imaginary_C:" + get_voltage_Imaginary_C()
                + "," + "voltage_Real_A:" + get_voltage_Real_A()
                + "," + "voltage_Real_B:" + get_voltage_Real_B()
                + "," + "voltage_Real_C:" + get_voltage_Real_C()
                + ")";
    }


    /**
    * Publishes the "current_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Imaginary_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_current_Imaginary_A() {
        _publishAttributeNameSet.add( "current_Imaginary_A" );
    }

    /**
    * Unpublishes the "current_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Imaginary_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_current_Imaginary_A() {
        _publishAttributeNameSet.remove( "current_Imaginary_A" );
    }

    /**
    * Subscribes a federate to the "current_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Imaginary_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_current_Imaginary_A() {
        _subscribeAttributeNameSet.add( "current_Imaginary_A" );
    }

    /**
    * Unsubscribes a federate from the "current_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Imaginary_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_current_Imaginary_A() {
        _subscribeAttributeNameSet.remove( "current_Imaginary_A" );
    }

    /**
    * Publishes the "current_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Imaginary_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_current_Imaginary_B() {
        _publishAttributeNameSet.add( "current_Imaginary_B" );
    }

    /**
    * Unpublishes the "current_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Imaginary_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_current_Imaginary_B() {
        _publishAttributeNameSet.remove( "current_Imaginary_B" );
    }

    /**
    * Subscribes a federate to the "current_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Imaginary_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_current_Imaginary_B() {
        _subscribeAttributeNameSet.add( "current_Imaginary_B" );
    }

    /**
    * Unsubscribes a federate from the "current_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Imaginary_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_current_Imaginary_B() {
        _subscribeAttributeNameSet.remove( "current_Imaginary_B" );
    }

    /**
    * Publishes the "current_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Imaginary_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_current_Imaginary_C() {
        _publishAttributeNameSet.add( "current_Imaginary_C" );
    }

    /**
    * Unpublishes the "current_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Imaginary_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_current_Imaginary_C() {
        _publishAttributeNameSet.remove( "current_Imaginary_C" );
    }

    /**
    * Subscribes a federate to the "current_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Imaginary_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_current_Imaginary_C() {
        _subscribeAttributeNameSet.add( "current_Imaginary_C" );
    }

    /**
    * Unsubscribes a federate from the "current_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Imaginary_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_current_Imaginary_C() {
        _subscribeAttributeNameSet.remove( "current_Imaginary_C" );
    }

    /**
    * Publishes the "current_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Real_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_current_Real_A() {
        _publishAttributeNameSet.add( "current_Real_A" );
    }

    /**
    * Unpublishes the "current_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Real_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_current_Real_A() {
        _publishAttributeNameSet.remove( "current_Real_A" );
    }

    /**
    * Subscribes a federate to the "current_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Real_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_current_Real_A() {
        _subscribeAttributeNameSet.add( "current_Real_A" );
    }

    /**
    * Unsubscribes a federate from the "current_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Real_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_current_Real_A() {
        _subscribeAttributeNameSet.remove( "current_Real_A" );
    }

    /**
    * Publishes the "current_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Real_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_current_Real_B() {
        _publishAttributeNameSet.add( "current_Real_B" );
    }

    /**
    * Unpublishes the "current_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Real_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_current_Real_B() {
        _publishAttributeNameSet.remove( "current_Real_B" );
    }

    /**
    * Subscribes a federate to the "current_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Real_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_current_Real_B() {
        _subscribeAttributeNameSet.add( "current_Real_B" );
    }

    /**
    * Unsubscribes a federate from the "current_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Real_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_current_Real_B() {
        _subscribeAttributeNameSet.remove( "current_Real_B" );
    }

    /**
    * Publishes the "current_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Real_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_current_Real_C() {
        _publishAttributeNameSet.add( "current_Real_C" );
    }

    /**
    * Unpublishes the "current_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "current_Real_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_current_Real_C() {
        _publishAttributeNameSet.remove( "current_Real_C" );
    }

    /**
    * Subscribes a federate to the "current_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Real_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_current_Real_C() {
        _subscribeAttributeNameSet.add( "current_Real_C" );
    }

    /**
    * Unsubscribes a federate from the "current_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "current_Real_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_current_Real_C() {
        _subscribeAttributeNameSet.remove( "current_Real_C" );
    }

    /**
    * Publishes the "gridNodeId" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "gridNodeId" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_gridNodeId() {
        _publishAttributeNameSet.add( "gridNodeId" );
    }

    /**
    * Unpublishes the "gridNodeId" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "gridNodeId" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_gridNodeId() {
        _publishAttributeNameSet.remove( "gridNodeId" );
    }

    /**
    * Subscribes a federate to the "gridNodeId" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "gridNodeId" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_gridNodeId() {
        _subscribeAttributeNameSet.add( "gridNodeId" );
    }

    /**
    * Unsubscribes a federate from the "gridNodeId" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "gridNodeId" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_gridNodeId() {
        _subscribeAttributeNameSet.remove( "gridNodeId" );
    }

    /**
    * Publishes the "impedance_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Imaginary_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_impedance_Imaginary_A() {
        _publishAttributeNameSet.add( "impedance_Imaginary_A" );
    }

    /**
    * Unpublishes the "impedance_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Imaginary_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_impedance_Imaginary_A() {
        _publishAttributeNameSet.remove( "impedance_Imaginary_A" );
    }

    /**
    * Subscribes a federate to the "impedance_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Imaginary_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_impedance_Imaginary_A() {
        _subscribeAttributeNameSet.add( "impedance_Imaginary_A" );
    }

    /**
    * Unsubscribes a federate from the "impedance_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Imaginary_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_impedance_Imaginary_A() {
        _subscribeAttributeNameSet.remove( "impedance_Imaginary_A" );
    }

    /**
    * Publishes the "impedance_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Imaginary_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_impedance_Imaginary_B() {
        _publishAttributeNameSet.add( "impedance_Imaginary_B" );
    }

    /**
    * Unpublishes the "impedance_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Imaginary_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_impedance_Imaginary_B() {
        _publishAttributeNameSet.remove( "impedance_Imaginary_B" );
    }

    /**
    * Subscribes a federate to the "impedance_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Imaginary_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_impedance_Imaginary_B() {
        _subscribeAttributeNameSet.add( "impedance_Imaginary_B" );
    }

    /**
    * Unsubscribes a federate from the "impedance_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Imaginary_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_impedance_Imaginary_B() {
        _subscribeAttributeNameSet.remove( "impedance_Imaginary_B" );
    }

    /**
    * Publishes the "impedance_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Imaginary_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_impedance_Imaginary_C() {
        _publishAttributeNameSet.add( "impedance_Imaginary_C" );
    }

    /**
    * Unpublishes the "impedance_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Imaginary_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_impedance_Imaginary_C() {
        _publishAttributeNameSet.remove( "impedance_Imaginary_C" );
    }

    /**
    * Subscribes a federate to the "impedance_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Imaginary_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_impedance_Imaginary_C() {
        _subscribeAttributeNameSet.add( "impedance_Imaginary_C" );
    }

    /**
    * Unsubscribes a federate from the "impedance_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Imaginary_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_impedance_Imaginary_C() {
        _subscribeAttributeNameSet.remove( "impedance_Imaginary_C" );
    }

    /**
    * Publishes the "impedance_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Real_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_impedance_Real_A() {
        _publishAttributeNameSet.add( "impedance_Real_A" );
    }

    /**
    * Unpublishes the "impedance_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Real_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_impedance_Real_A() {
        _publishAttributeNameSet.remove( "impedance_Real_A" );
    }

    /**
    * Subscribes a federate to the "impedance_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Real_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_impedance_Real_A() {
        _subscribeAttributeNameSet.add( "impedance_Real_A" );
    }

    /**
    * Unsubscribes a federate from the "impedance_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Real_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_impedance_Real_A() {
        _subscribeAttributeNameSet.remove( "impedance_Real_A" );
    }

    /**
    * Publishes the "impedance_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Real_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_impedance_Real_B() {
        _publishAttributeNameSet.add( "impedance_Real_B" );
    }

    /**
    * Unpublishes the "impedance_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Real_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_impedance_Real_B() {
        _publishAttributeNameSet.remove( "impedance_Real_B" );
    }

    /**
    * Subscribes a federate to the "impedance_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Real_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_impedance_Real_B() {
        _subscribeAttributeNameSet.add( "impedance_Real_B" );
    }

    /**
    * Unsubscribes a federate from the "impedance_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Real_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_impedance_Real_B() {
        _subscribeAttributeNameSet.remove( "impedance_Real_B" );
    }

    /**
    * Publishes the "impedance_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Real_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_impedance_Real_C() {
        _publishAttributeNameSet.add( "impedance_Real_C" );
    }

    /**
    * Unpublishes the "impedance_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "impedance_Real_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_impedance_Real_C() {
        _publishAttributeNameSet.remove( "impedance_Real_C" );
    }

    /**
    * Subscribes a federate to the "impedance_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Real_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_impedance_Real_C() {
        _subscribeAttributeNameSet.add( "impedance_Real_C" );
    }

    /**
    * Unsubscribes a federate from the "impedance_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "impedance_Real_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_impedance_Real_C() {
        _subscribeAttributeNameSet.remove( "impedance_Real_C" );
    }

    /**
    * Publishes the "loadInstanceName" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "loadInstanceName" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_loadInstanceName() {
        _publishAttributeNameSet.add( "loadInstanceName" );
    }

    /**
    * Unpublishes the "loadInstanceName" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "loadInstanceName" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_loadInstanceName() {
        _publishAttributeNameSet.remove( "loadInstanceName" );
    }

    /**
    * Subscribes a federate to the "loadInstanceName" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "loadInstanceName" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_loadInstanceName() {
        _subscribeAttributeNameSet.add( "loadInstanceName" );
    }

    /**
    * Unsubscribes a federate from the "loadInstanceName" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "loadInstanceName" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_loadInstanceName() {
        _subscribeAttributeNameSet.remove( "loadInstanceName" );
    }

    /**
    * Publishes the "name" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "name" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_name() {
        _publishAttributeNameSet.add( "name" );
    }

    /**
    * Unpublishes the "name" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "name" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_name() {
        _publishAttributeNameSet.remove( "name" );
    }

    /**
    * Subscribes a federate to the "name" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "name" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_name() {
        _subscribeAttributeNameSet.add( "name" );
    }

    /**
    * Unsubscribes a federate from the "name" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "name" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_name() {
        _subscribeAttributeNameSet.remove( "name" );
    }

    /**
    * Publishes the "phases" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "phases" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_phases() {
        _publishAttributeNameSet.add( "phases" );
    }

    /**
    * Unpublishes the "phases" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "phases" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_phases() {
        _publishAttributeNameSet.remove( "phases" );
    }

    /**
    * Subscribes a federate to the "phases" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "phases" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_phases() {
        _subscribeAttributeNameSet.add( "phases" );
    }

    /**
    * Unsubscribes a federate from the "phases" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "phases" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_phases() {
        _subscribeAttributeNameSet.remove( "phases" );
    }

    /**
    * Publishes the "power_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Imaginary_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_power_Imaginary_A() {
        _publishAttributeNameSet.add( "power_Imaginary_A" );
    }

    /**
    * Unpublishes the "power_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Imaginary_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_power_Imaginary_A() {
        _publishAttributeNameSet.remove( "power_Imaginary_A" );
    }

    /**
    * Subscribes a federate to the "power_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Imaginary_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_power_Imaginary_A() {
        _subscribeAttributeNameSet.add( "power_Imaginary_A" );
    }

    /**
    * Unsubscribes a federate from the "power_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Imaginary_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_power_Imaginary_A() {
        _subscribeAttributeNameSet.remove( "power_Imaginary_A" );
    }

    /**
    * Publishes the "power_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Imaginary_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_power_Imaginary_B() {
        _publishAttributeNameSet.add( "power_Imaginary_B" );
    }

    /**
    * Unpublishes the "power_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Imaginary_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_power_Imaginary_B() {
        _publishAttributeNameSet.remove( "power_Imaginary_B" );
    }

    /**
    * Subscribes a federate to the "power_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Imaginary_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_power_Imaginary_B() {
        _subscribeAttributeNameSet.add( "power_Imaginary_B" );
    }

    /**
    * Unsubscribes a federate from the "power_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Imaginary_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_power_Imaginary_B() {
        _subscribeAttributeNameSet.remove( "power_Imaginary_B" );
    }

    /**
    * Publishes the "power_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Imaginary_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_power_Imaginary_C() {
        _publishAttributeNameSet.add( "power_Imaginary_C" );
    }

    /**
    * Unpublishes the "power_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Imaginary_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_power_Imaginary_C() {
        _publishAttributeNameSet.remove( "power_Imaginary_C" );
    }

    /**
    * Subscribes a federate to the "power_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Imaginary_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_power_Imaginary_C() {
        _subscribeAttributeNameSet.add( "power_Imaginary_C" );
    }

    /**
    * Unsubscribes a federate from the "power_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Imaginary_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_power_Imaginary_C() {
        _subscribeAttributeNameSet.remove( "power_Imaginary_C" );
    }

    /**
    * Publishes the "power_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Real_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_power_Real_A() {
        _publishAttributeNameSet.add( "power_Real_A" );
    }

    /**
    * Unpublishes the "power_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Real_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_power_Real_A() {
        _publishAttributeNameSet.remove( "power_Real_A" );
    }

    /**
    * Subscribes a federate to the "power_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Real_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_power_Real_A() {
        _subscribeAttributeNameSet.add( "power_Real_A" );
    }

    /**
    * Unsubscribes a federate from the "power_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Real_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_power_Real_A() {
        _subscribeAttributeNameSet.remove( "power_Real_A" );
    }

    /**
    * Publishes the "power_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Real_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_power_Real_B() {
        _publishAttributeNameSet.add( "power_Real_B" );
    }

    /**
    * Unpublishes the "power_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Real_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_power_Real_B() {
        _publishAttributeNameSet.remove( "power_Real_B" );
    }

    /**
    * Subscribes a federate to the "power_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Real_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_power_Real_B() {
        _subscribeAttributeNameSet.add( "power_Real_B" );
    }

    /**
    * Unsubscribes a federate from the "power_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Real_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_power_Real_B() {
        _subscribeAttributeNameSet.remove( "power_Real_B" );
    }

    /**
    * Publishes the "power_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Real_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_power_Real_C() {
        _publishAttributeNameSet.add( "power_Real_C" );
    }

    /**
    * Unpublishes the "power_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "power_Real_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_power_Real_C() {
        _publishAttributeNameSet.remove( "power_Real_C" );
    }

    /**
    * Subscribes a federate to the "power_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Real_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_power_Real_C() {
        _subscribeAttributeNameSet.add( "power_Real_C" );
    }

    /**
    * Unsubscribes a federate from the "power_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "power_Real_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_power_Real_C() {
        _subscribeAttributeNameSet.remove( "power_Real_C" );
    }

    /**
    * Publishes the "status" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "status" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_status() {
        _publishAttributeNameSet.add( "status" );
    }

    /**
    * Unpublishes the "status" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "status" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_status() {
        _publishAttributeNameSet.remove( "status" );
    }

    /**
    * Subscribes a federate to the "status" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "status" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_status() {
        _subscribeAttributeNameSet.add( "status" );
    }

    /**
    * Unsubscribes a federate from the "status" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "status" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_status() {
        _subscribeAttributeNameSet.remove( "status" );
    }

    /**
    * Publishes the "type" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "type" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_type() {
        _publishAttributeNameSet.add( "type" );
    }

    /**
    * Unpublishes the "type" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "type" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_type() {
        _publishAttributeNameSet.remove( "type" );
    }

    /**
    * Subscribes a federate to the "type" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "type" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_type() {
        _subscribeAttributeNameSet.add( "type" );
    }

    /**
    * Unsubscribes a federate from the "type" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "type" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_type() {
        _subscribeAttributeNameSet.remove( "type" );
    }

    /**
    * Publishes the "voltage_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Imaginary_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_voltage_Imaginary_A() {
        _publishAttributeNameSet.add( "voltage_Imaginary_A" );
    }

    /**
    * Unpublishes the "voltage_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Imaginary_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_voltage_Imaginary_A() {
        _publishAttributeNameSet.remove( "voltage_Imaginary_A" );
    }

    /**
    * Subscribes a federate to the "voltage_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Imaginary_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_voltage_Imaginary_A() {
        _subscribeAttributeNameSet.add( "voltage_Imaginary_A" );
    }

    /**
    * Unsubscribes a federate from the "voltage_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Imaginary_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_voltage_Imaginary_A() {
        _subscribeAttributeNameSet.remove( "voltage_Imaginary_A" );
    }

    /**
    * Publishes the "voltage_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Imaginary_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_voltage_Imaginary_B() {
        _publishAttributeNameSet.add( "voltage_Imaginary_B" );
    }

    /**
    * Unpublishes the "voltage_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Imaginary_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_voltage_Imaginary_B() {
        _publishAttributeNameSet.remove( "voltage_Imaginary_B" );
    }

    /**
    * Subscribes a federate to the "voltage_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Imaginary_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_voltage_Imaginary_B() {
        _subscribeAttributeNameSet.add( "voltage_Imaginary_B" );
    }

    /**
    * Unsubscribes a federate from the "voltage_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Imaginary_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_voltage_Imaginary_B() {
        _subscribeAttributeNameSet.remove( "voltage_Imaginary_B" );
    }

    /**
    * Publishes the "voltage_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Imaginary_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_voltage_Imaginary_C() {
        _publishAttributeNameSet.add( "voltage_Imaginary_C" );
    }

    /**
    * Unpublishes the "voltage_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Imaginary_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_voltage_Imaginary_C() {
        _publishAttributeNameSet.remove( "voltage_Imaginary_C" );
    }

    /**
    * Subscribes a federate to the "voltage_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Imaginary_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_voltage_Imaginary_C() {
        _subscribeAttributeNameSet.add( "voltage_Imaginary_C" );
    }

    /**
    * Unsubscribes a federate from the "voltage_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Imaginary_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_voltage_Imaginary_C() {
        _subscribeAttributeNameSet.remove( "voltage_Imaginary_C" );
    }

    /**
    * Publishes the "voltage_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Real_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_voltage_Real_A() {
        _publishAttributeNameSet.add( "voltage_Real_A" );
    }

    /**
    * Unpublishes the "voltage_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Real_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_voltage_Real_A() {
        _publishAttributeNameSet.remove( "voltage_Real_A" );
    }

    /**
    * Subscribes a federate to the "voltage_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Real_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_voltage_Real_A() {
        _subscribeAttributeNameSet.add( "voltage_Real_A" );
    }

    /**
    * Unsubscribes a federate from the "voltage_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Real_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_voltage_Real_A() {
        _subscribeAttributeNameSet.remove( "voltage_Real_A" );
    }

    /**
    * Publishes the "voltage_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Real_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_voltage_Real_B() {
        _publishAttributeNameSet.add( "voltage_Real_B" );
    }

    /**
    * Unpublishes the "voltage_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Real_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_voltage_Real_B() {
        _publishAttributeNameSet.remove( "voltage_Real_B" );
    }

    /**
    * Subscribes a federate to the "voltage_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Real_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_voltage_Real_B() {
        _subscribeAttributeNameSet.add( "voltage_Real_B" );
    }

    /**
    * Unsubscribes a federate from the "voltage_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Real_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_voltage_Real_B() {
        _subscribeAttributeNameSet.remove( "voltage_Real_B" );
    }

    /**
    * Publishes the "voltage_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Real_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_voltage_Real_C() {
        _publishAttributeNameSet.add( "voltage_Real_C" );
    }

    /**
    * Unpublishes the "voltage_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "voltage_Real_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_voltage_Real_C() {
        _publishAttributeNameSet.remove( "voltage_Real_C" );
    }

    /**
    * Subscribes a federate to the "voltage_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Real_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_voltage_Real_C() {
        _subscribeAttributeNameSet.add( "voltage_Real_C" );
    }

    /**
    * Unsubscribes a federate from the "voltage_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "voltage_Real_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_voltage_Real_C() {
        _subscribeAttributeNameSet.remove( "voltage_Real_C" );
    }

    protected Attribute< Float > _current_Imaginary_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "current_Imaginary_A" attribute to "value" for this object.
    *
    * @param value the new value for the "current_Imaginary_A" attribute
    */
    public void set_current_Imaginary_A( float value ) {
        _current_Imaginary_A.setValue( value );
        _current_Imaginary_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "current_Imaginary_A" attribute of this object.
    *
    * @return the value of the "current_Imaginary_A" attribute
    */
    public float get_current_Imaginary_A() {
        return _current_Imaginary_A.getValue();
    }

    /**
    * Returns the current timestamp of the "current_Imaginary_A" attribute of this object.
    *
    * @return the current timestamp of the "current_Imaginary_A" attribute
    */
    public double get_current_Imaginary_A_time() {
        return _current_Imaginary_A.getTime();
    }

    protected Attribute< Float > _current_Imaginary_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "current_Imaginary_B" attribute to "value" for this object.
    *
    * @param value the new value for the "current_Imaginary_B" attribute
    */
    public void set_current_Imaginary_B( float value ) {
        _current_Imaginary_B.setValue( value );
        _current_Imaginary_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "current_Imaginary_B" attribute of this object.
    *
    * @return the value of the "current_Imaginary_B" attribute
    */
    public float get_current_Imaginary_B() {
        return _current_Imaginary_B.getValue();
    }

    /**
    * Returns the current timestamp of the "current_Imaginary_B" attribute of this object.
    *
    * @return the current timestamp of the "current_Imaginary_B" attribute
    */
    public double get_current_Imaginary_B_time() {
        return _current_Imaginary_B.getTime();
    }

    protected Attribute< Float > _current_Imaginary_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "current_Imaginary_C" attribute to "value" for this object.
    *
    * @param value the new value for the "current_Imaginary_C" attribute
    */
    public void set_current_Imaginary_C( float value ) {
        _current_Imaginary_C.setValue( value );
        _current_Imaginary_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "current_Imaginary_C" attribute of this object.
    *
    * @return the value of the "current_Imaginary_C" attribute
    */
    public float get_current_Imaginary_C() {
        return _current_Imaginary_C.getValue();
    }

    /**
    * Returns the current timestamp of the "current_Imaginary_C" attribute of this object.
    *
    * @return the current timestamp of the "current_Imaginary_C" attribute
    */
    public double get_current_Imaginary_C_time() {
        return _current_Imaginary_C.getTime();
    }

    protected Attribute< Float > _current_Real_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "current_Real_A" attribute to "value" for this object.
    *
    * @param value the new value for the "current_Real_A" attribute
    */
    public void set_current_Real_A( float value ) {
        _current_Real_A.setValue( value );
        _current_Real_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "current_Real_A" attribute of this object.
    *
    * @return the value of the "current_Real_A" attribute
    */
    public float get_current_Real_A() {
        return _current_Real_A.getValue();
    }

    /**
    * Returns the current timestamp of the "current_Real_A" attribute of this object.
    *
    * @return the current timestamp of the "current_Real_A" attribute
    */
    public double get_current_Real_A_time() {
        return _current_Real_A.getTime();
    }

    protected Attribute< Float > _current_Real_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "current_Real_B" attribute to "value" for this object.
    *
    * @param value the new value for the "current_Real_B" attribute
    */
    public void set_current_Real_B( float value ) {
        _current_Real_B.setValue( value );
        _current_Real_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "current_Real_B" attribute of this object.
    *
    * @return the value of the "current_Real_B" attribute
    */
    public float get_current_Real_B() {
        return _current_Real_B.getValue();
    }

    /**
    * Returns the current timestamp of the "current_Real_B" attribute of this object.
    *
    * @return the current timestamp of the "current_Real_B" attribute
    */
    public double get_current_Real_B_time() {
        return _current_Real_B.getTime();
    }

    protected Attribute< Float > _current_Real_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "current_Real_C" attribute to "value" for this object.
    *
    * @param value the new value for the "current_Real_C" attribute
    */
    public void set_current_Real_C( float value ) {
        _current_Real_C.setValue( value );
        _current_Real_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "current_Real_C" attribute of this object.
    *
    * @return the value of the "current_Real_C" attribute
    */
    public float get_current_Real_C() {
        return _current_Real_C.getValue();
    }

    /**
    * Returns the current timestamp of the "current_Real_C" attribute of this object.
    *
    * @return the current timestamp of the "current_Real_C" attribute
    */
    public double get_current_Real_C_time() {
        return _current_Real_C.getTime();
    }

    protected Attribute< String > _gridNodeId =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "gridNodeId" attribute to "value" for this object.
    *
    * @param value the new value for the "gridNodeId" attribute
    */
    public void set_gridNodeId( String value ) {
        _gridNodeId.setValue( value );
        _gridNodeId.setTime( getTime() );
    }

    /**
    * Returns the value of the "gridNodeId" attribute of this object.
    *
    * @return the value of the "gridNodeId" attribute
    */
    public String get_gridNodeId() {
        return _gridNodeId.getValue();
    }

    /**
    * Returns the current timestamp of the "gridNodeId" attribute of this object.
    *
    * @return the current timestamp of the "gridNodeId" attribute
    */
    public double get_gridNodeId_time() {
        return _gridNodeId.getTime();
    }

    protected Attribute< Float > _impedance_Imaginary_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "impedance_Imaginary_A" attribute to "value" for this object.
    *
    * @param value the new value for the "impedance_Imaginary_A" attribute
    */
    public void set_impedance_Imaginary_A( float value ) {
        _impedance_Imaginary_A.setValue( value );
        _impedance_Imaginary_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "impedance_Imaginary_A" attribute of this object.
    *
    * @return the value of the "impedance_Imaginary_A" attribute
    */
    public float get_impedance_Imaginary_A() {
        return _impedance_Imaginary_A.getValue();
    }

    /**
    * Returns the current timestamp of the "impedance_Imaginary_A" attribute of this object.
    *
    * @return the current timestamp of the "impedance_Imaginary_A" attribute
    */
    public double get_impedance_Imaginary_A_time() {
        return _impedance_Imaginary_A.getTime();
    }

    protected Attribute< Float > _impedance_Imaginary_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "impedance_Imaginary_B" attribute to "value" for this object.
    *
    * @param value the new value for the "impedance_Imaginary_B" attribute
    */
    public void set_impedance_Imaginary_B( float value ) {
        _impedance_Imaginary_B.setValue( value );
        _impedance_Imaginary_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "impedance_Imaginary_B" attribute of this object.
    *
    * @return the value of the "impedance_Imaginary_B" attribute
    */
    public float get_impedance_Imaginary_B() {
        return _impedance_Imaginary_B.getValue();
    }

    /**
    * Returns the current timestamp of the "impedance_Imaginary_B" attribute of this object.
    *
    * @return the current timestamp of the "impedance_Imaginary_B" attribute
    */
    public double get_impedance_Imaginary_B_time() {
        return _impedance_Imaginary_B.getTime();
    }

    protected Attribute< Float > _impedance_Imaginary_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "impedance_Imaginary_C" attribute to "value" for this object.
    *
    * @param value the new value for the "impedance_Imaginary_C" attribute
    */
    public void set_impedance_Imaginary_C( float value ) {
        _impedance_Imaginary_C.setValue( value );
        _impedance_Imaginary_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "impedance_Imaginary_C" attribute of this object.
    *
    * @return the value of the "impedance_Imaginary_C" attribute
    */
    public float get_impedance_Imaginary_C() {
        return _impedance_Imaginary_C.getValue();
    }

    /**
    * Returns the current timestamp of the "impedance_Imaginary_C" attribute of this object.
    *
    * @return the current timestamp of the "impedance_Imaginary_C" attribute
    */
    public double get_impedance_Imaginary_C_time() {
        return _impedance_Imaginary_C.getTime();
    }

    protected Attribute< Float > _impedance_Real_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "impedance_Real_A" attribute to "value" for this object.
    *
    * @param value the new value for the "impedance_Real_A" attribute
    */
    public void set_impedance_Real_A( float value ) {
        _impedance_Real_A.setValue( value );
        _impedance_Real_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "impedance_Real_A" attribute of this object.
    *
    * @return the value of the "impedance_Real_A" attribute
    */
    public float get_impedance_Real_A() {
        return _impedance_Real_A.getValue();
    }

    /**
    * Returns the current timestamp of the "impedance_Real_A" attribute of this object.
    *
    * @return the current timestamp of the "impedance_Real_A" attribute
    */
    public double get_impedance_Real_A_time() {
        return _impedance_Real_A.getTime();
    }

    protected Attribute< Float > _impedance_Real_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "impedance_Real_B" attribute to "value" for this object.
    *
    * @param value the new value for the "impedance_Real_B" attribute
    */
    public void set_impedance_Real_B( float value ) {
        _impedance_Real_B.setValue( value );
        _impedance_Real_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "impedance_Real_B" attribute of this object.
    *
    * @return the value of the "impedance_Real_B" attribute
    */
    public float get_impedance_Real_B() {
        return _impedance_Real_B.getValue();
    }

    /**
    * Returns the current timestamp of the "impedance_Real_B" attribute of this object.
    *
    * @return the current timestamp of the "impedance_Real_B" attribute
    */
    public double get_impedance_Real_B_time() {
        return _impedance_Real_B.getTime();
    }

    protected Attribute< Float > _impedance_Real_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "impedance_Real_C" attribute to "value" for this object.
    *
    * @param value the new value for the "impedance_Real_C" attribute
    */
    public void set_impedance_Real_C( float value ) {
        _impedance_Real_C.setValue( value );
        _impedance_Real_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "impedance_Real_C" attribute of this object.
    *
    * @return the value of the "impedance_Real_C" attribute
    */
    public float get_impedance_Real_C() {
        return _impedance_Real_C.getValue();
    }

    /**
    * Returns the current timestamp of the "impedance_Real_C" attribute of this object.
    *
    * @return the current timestamp of the "impedance_Real_C" attribute
    */
    public double get_impedance_Real_C_time() {
        return _impedance_Real_C.getTime();
    }

    protected Attribute< String > _loadInstanceName =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "loadInstanceName" attribute to "value" for this object.
    *
    * @param value the new value for the "loadInstanceName" attribute
    */
    public void set_loadInstanceName( String value ) {
        _loadInstanceName.setValue( value );
        _loadInstanceName.setTime( getTime() );
    }

    /**
    * Returns the value of the "loadInstanceName" attribute of this object.
    *
    * @return the value of the "loadInstanceName" attribute
    */
    public String get_loadInstanceName() {
        return _loadInstanceName.getValue();
    }

    /**
    * Returns the current timestamp of the "loadInstanceName" attribute of this object.
    *
    * @return the current timestamp of the "loadInstanceName" attribute
    */
    public double get_loadInstanceName_time() {
        return _loadInstanceName.getTime();
    }

    protected Attribute< String > _name =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "name" attribute to "value" for this object.
    *
    * @param value the new value for the "name" attribute
    */
    public void set_name( String value ) {
        _name.setValue( value );
        _name.setTime( getTime() );
    }

    /**
    * Returns the value of the "name" attribute of this object.
    *
    * @return the value of the "name" attribute
    */
    public String get_name() {
        return _name.getValue();
    }

    /**
    * Returns the current timestamp of the "name" attribute of this object.
    *
    * @return the current timestamp of the "name" attribute
    */
    public double get_name_time() {
        return _name.getTime();
    }

    protected Attribute< String > _phases =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "phases" attribute to "value" for this object.
    *
    * @param value the new value for the "phases" attribute
    */
    public void set_phases( String value ) {
        _phases.setValue( value );
        _phases.setTime( getTime() );
    }

    /**
    * Returns the value of the "phases" attribute of this object.
    *
    * @return the value of the "phases" attribute
    */
    public String get_phases() {
        return _phases.getValue();
    }

    /**
    * Returns the current timestamp of the "phases" attribute of this object.
    *
    * @return the current timestamp of the "phases" attribute
    */
    public double get_phases_time() {
        return _phases.getTime();
    }

    protected Attribute< Float > _power_Imaginary_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "power_Imaginary_A" attribute to "value" for this object.
    *
    * @param value the new value for the "power_Imaginary_A" attribute
    */
    public void set_power_Imaginary_A( float value ) {
        _power_Imaginary_A.setValue( value );
        _power_Imaginary_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "power_Imaginary_A" attribute of this object.
    *
    * @return the value of the "power_Imaginary_A" attribute
    */
    public float get_power_Imaginary_A() {
        return _power_Imaginary_A.getValue();
    }

    /**
    * Returns the current timestamp of the "power_Imaginary_A" attribute of this object.
    *
    * @return the current timestamp of the "power_Imaginary_A" attribute
    */
    public double get_power_Imaginary_A_time() {
        return _power_Imaginary_A.getTime();
    }

    protected Attribute< Float > _power_Imaginary_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "power_Imaginary_B" attribute to "value" for this object.
    *
    * @param value the new value for the "power_Imaginary_B" attribute
    */
    public void set_power_Imaginary_B( float value ) {
        _power_Imaginary_B.setValue( value );
        _power_Imaginary_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "power_Imaginary_B" attribute of this object.
    *
    * @return the value of the "power_Imaginary_B" attribute
    */
    public float get_power_Imaginary_B() {
        return _power_Imaginary_B.getValue();
    }

    /**
    * Returns the current timestamp of the "power_Imaginary_B" attribute of this object.
    *
    * @return the current timestamp of the "power_Imaginary_B" attribute
    */
    public double get_power_Imaginary_B_time() {
        return _power_Imaginary_B.getTime();
    }

    protected Attribute< Float > _power_Imaginary_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "power_Imaginary_C" attribute to "value" for this object.
    *
    * @param value the new value for the "power_Imaginary_C" attribute
    */
    public void set_power_Imaginary_C( float value ) {
        _power_Imaginary_C.setValue( value );
        _power_Imaginary_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "power_Imaginary_C" attribute of this object.
    *
    * @return the value of the "power_Imaginary_C" attribute
    */
    public float get_power_Imaginary_C() {
        return _power_Imaginary_C.getValue();
    }

    /**
    * Returns the current timestamp of the "power_Imaginary_C" attribute of this object.
    *
    * @return the current timestamp of the "power_Imaginary_C" attribute
    */
    public double get_power_Imaginary_C_time() {
        return _power_Imaginary_C.getTime();
    }

    protected Attribute< Float > _power_Real_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "power_Real_A" attribute to "value" for this object.
    *
    * @param value the new value for the "power_Real_A" attribute
    */
    public void set_power_Real_A( float value ) {
        _power_Real_A.setValue( value );
        _power_Real_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "power_Real_A" attribute of this object.
    *
    * @return the value of the "power_Real_A" attribute
    */
    public float get_power_Real_A() {
        return _power_Real_A.getValue();
    }

    /**
    * Returns the current timestamp of the "power_Real_A" attribute of this object.
    *
    * @return the current timestamp of the "power_Real_A" attribute
    */
    public double get_power_Real_A_time() {
        return _power_Real_A.getTime();
    }

    protected Attribute< Float > _power_Real_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "power_Real_B" attribute to "value" for this object.
    *
    * @param value the new value for the "power_Real_B" attribute
    */
    public void set_power_Real_B( float value ) {
        _power_Real_B.setValue( value );
        _power_Real_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "power_Real_B" attribute of this object.
    *
    * @return the value of the "power_Real_B" attribute
    */
    public float get_power_Real_B() {
        return _power_Real_B.getValue();
    }

    /**
    * Returns the current timestamp of the "power_Real_B" attribute of this object.
    *
    * @return the current timestamp of the "power_Real_B" attribute
    */
    public double get_power_Real_B_time() {
        return _power_Real_B.getTime();
    }

    protected Attribute< Float > _power_Real_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "power_Real_C" attribute to "value" for this object.
    *
    * @param value the new value for the "power_Real_C" attribute
    */
    public void set_power_Real_C( float value ) {
        _power_Real_C.setValue( value );
        _power_Real_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "power_Real_C" attribute of this object.
    *
    * @return the value of the "power_Real_C" attribute
    */
    public float get_power_Real_C() {
        return _power_Real_C.getValue();
    }

    /**
    * Returns the current timestamp of the "power_Real_C" attribute of this object.
    *
    * @return the current timestamp of the "power_Real_C" attribute
    */
    public double get_power_Real_C_time() {
        return _power_Real_C.getTime();
    }

    protected Attribute< Boolean > _status =
            new Attribute< Boolean >(  new Boolean( false )  );

    /**
    * Set the value of the "status" attribute to "value" for this object.
    *
    * @param value the new value for the "status" attribute
    */
    public void set_status( boolean value ) {
        _status.setValue( value );
        _status.setTime( getTime() );
    }

    /**
    * Returns the value of the "status" attribute of this object.
    *
    * @return the value of the "status" attribute
    */
    public boolean get_status() {
        return _status.getValue();
    }

    /**
    * Returns the current timestamp of the "status" attribute of this object.
    *
    * @return the current timestamp of the "status" attribute
    */
    public double get_status_time() {
        return _status.getTime();
    }

    protected Attribute< String > _type =
            new Attribute< String >(  new String( "" )  );

    /**
    * Set the value of the "type" attribute to "value" for this object.
    *
    * @param value the new value for the "type" attribute
    */
    public void set_type( String value ) {
        _type.setValue( value );
        _type.setTime( getTime() );
    }

    /**
    * Returns the value of the "type" attribute of this object.
    *
    * @return the value of the "type" attribute
    */
    public String get_type() {
        return _type.getValue();
    }

    /**
    * Returns the current timestamp of the "type" attribute of this object.
    *
    * @return the current timestamp of the "type" attribute
    */
    public double get_type_time() {
        return _type.getTime();
    }

    protected Attribute< Float > _voltage_Imaginary_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "voltage_Imaginary_A" attribute to "value" for this object.
    *
    * @param value the new value for the "voltage_Imaginary_A" attribute
    */
    public void set_voltage_Imaginary_A( float value ) {
        _voltage_Imaginary_A.setValue( value );
        _voltage_Imaginary_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "voltage_Imaginary_A" attribute of this object.
    *
    * @return the value of the "voltage_Imaginary_A" attribute
    */
    public float get_voltage_Imaginary_A() {
        return _voltage_Imaginary_A.getValue();
    }

    /**
    * Returns the current timestamp of the "voltage_Imaginary_A" attribute of this object.
    *
    * @return the current timestamp of the "voltage_Imaginary_A" attribute
    */
    public double get_voltage_Imaginary_A_time() {
        return _voltage_Imaginary_A.getTime();
    }

    protected Attribute< Float > _voltage_Imaginary_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "voltage_Imaginary_B" attribute to "value" for this object.
    *
    * @param value the new value for the "voltage_Imaginary_B" attribute
    */
    public void set_voltage_Imaginary_B( float value ) {
        _voltage_Imaginary_B.setValue( value );
        _voltage_Imaginary_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "voltage_Imaginary_B" attribute of this object.
    *
    * @return the value of the "voltage_Imaginary_B" attribute
    */
    public float get_voltage_Imaginary_B() {
        return _voltage_Imaginary_B.getValue();
    }

    /**
    * Returns the current timestamp of the "voltage_Imaginary_B" attribute of this object.
    *
    * @return the current timestamp of the "voltage_Imaginary_B" attribute
    */
    public double get_voltage_Imaginary_B_time() {
        return _voltage_Imaginary_B.getTime();
    }

    protected Attribute< Float > _voltage_Imaginary_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "voltage_Imaginary_C" attribute to "value" for this object.
    *
    * @param value the new value for the "voltage_Imaginary_C" attribute
    */
    public void set_voltage_Imaginary_C( float value ) {
        _voltage_Imaginary_C.setValue( value );
        _voltage_Imaginary_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "voltage_Imaginary_C" attribute of this object.
    *
    * @return the value of the "voltage_Imaginary_C" attribute
    */
    public float get_voltage_Imaginary_C() {
        return _voltage_Imaginary_C.getValue();
    }

    /**
    * Returns the current timestamp of the "voltage_Imaginary_C" attribute of this object.
    *
    * @return the current timestamp of the "voltage_Imaginary_C" attribute
    */
    public double get_voltage_Imaginary_C_time() {
        return _voltage_Imaginary_C.getTime();
    }

    protected Attribute< Float > _voltage_Real_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "voltage_Real_A" attribute to "value" for this object.
    *
    * @param value the new value for the "voltage_Real_A" attribute
    */
    public void set_voltage_Real_A( float value ) {
        _voltage_Real_A.setValue( value );
        _voltage_Real_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "voltage_Real_A" attribute of this object.
    *
    * @return the value of the "voltage_Real_A" attribute
    */
    public float get_voltage_Real_A() {
        return _voltage_Real_A.getValue();
    }

    /**
    * Returns the current timestamp of the "voltage_Real_A" attribute of this object.
    *
    * @return the current timestamp of the "voltage_Real_A" attribute
    */
    public double get_voltage_Real_A_time() {
        return _voltage_Real_A.getTime();
    }

    protected Attribute< Float > _voltage_Real_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "voltage_Real_B" attribute to "value" for this object.
    *
    * @param value the new value for the "voltage_Real_B" attribute
    */
    public void set_voltage_Real_B( float value ) {
        _voltage_Real_B.setValue( value );
        _voltage_Real_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "voltage_Real_B" attribute of this object.
    *
    * @return the value of the "voltage_Real_B" attribute
    */
    public float get_voltage_Real_B() {
        return _voltage_Real_B.getValue();
    }

    /**
    * Returns the current timestamp of the "voltage_Real_B" attribute of this object.
    *
    * @return the current timestamp of the "voltage_Real_B" attribute
    */
    public double get_voltage_Real_B_time() {
        return _voltage_Real_B.getTime();
    }

    protected Attribute< Float > _voltage_Real_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "voltage_Real_C" attribute to "value" for this object.
    *
    * @param value the new value for the "voltage_Real_C" attribute
    */
    public void set_voltage_Real_C( float value ) {
        _voltage_Real_C.setValue( value );
        _voltage_Real_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "voltage_Real_C" attribute of this object.
    *
    * @return the value of the "voltage_Real_C" attribute
    */
    public float get_voltage_Real_C() {
        return _voltage_Real_C.getValue();
    }

    /**
    * Returns the current timestamp of the "voltage_Real_C" attribute of this object.
    *
    * @return the current timestamp of the "voltage_Real_C" attribute
    */
    public double get_voltage_Real_C_time() {
        return _voltage_Real_C.getTime();
    }

    protected ResourcesPhysicalStatus( ReflectedAttributes datamemberMap, boolean initFlag ) {
        super( datamemberMap, false );
        if ( initFlag ) setAttributes( datamemberMap );
    }

    protected ResourcesPhysicalStatus( ReflectedAttributes datamemberMap, LogicalTime logicalTime, boolean initFlag ) {
        super( datamemberMap, logicalTime, false );
        if ( initFlag ) setAttributes( datamemberMap );
    }

    /**
    * Creates an instance of the ResourcesPhysicalStatus object class, using
    * "datamemberMap" to initialize its attribute values.
    * "datamemberMap" is usually acquired as an argument to an RTI federate
    * callback method, such as "receiveInteraction".
    *
    * @param datamemberMap data structure containing initial values for the
    * attributes of this new ResourcesPhysicalStatus object class instance
    */
    public ResourcesPhysicalStatus( ReflectedAttributes datamemberMap ) {
        this( datamemberMap, true );
    }

    /**
    * Like {@link #ResourcesPhysicalStatus( ReflectedAttributes datamemberMap )}, except this
    * new ResourcesPhysicalStatus object class instance is given a timestamp of
    * "logicalTime".
    *
    * @param datamemberMap data structure containing initial values for the
    * attributes of this new ResourcesPhysicalStatus object class instance
    * @param logicalTime timestamp for this new ResourcesPhysicalStatus object class
    * instance
    */
    public ResourcesPhysicalStatus( ReflectedAttributes datamemberMap, LogicalTime logicalTime ) {
        this( datamemberMap, logicalTime, true );
    }

    /**
    * Creates a new ResourcesPhysicalStatus object class instance that is a duplicate
    * of the instance referred to by ResourcesPhysicalStatus_var.
    *
    * @param ResourcesPhysicalStatus_var ResourcesPhysicalStatus object class instance of which
    * this newly created ResourcesPhysicalStatus object class instance will be a
    * duplicate
    */
    public ResourcesPhysicalStatus( ResourcesPhysicalStatus ResourcesPhysicalStatus_var ) {
        super( ResourcesPhysicalStatus_var );

        set_current_Imaginary_A( ResourcesPhysicalStatus_var.get_current_Imaginary_A() );
        set_current_Imaginary_B( ResourcesPhysicalStatus_var.get_current_Imaginary_B() );
        set_current_Imaginary_C( ResourcesPhysicalStatus_var.get_current_Imaginary_C() );
        set_current_Real_A( ResourcesPhysicalStatus_var.get_current_Real_A() );
        set_current_Real_B( ResourcesPhysicalStatus_var.get_current_Real_B() );
        set_current_Real_C( ResourcesPhysicalStatus_var.get_current_Real_C() );
        set_gridNodeId( ResourcesPhysicalStatus_var.get_gridNodeId() );
        set_impedance_Imaginary_A( ResourcesPhysicalStatus_var.get_impedance_Imaginary_A() );
        set_impedance_Imaginary_B( ResourcesPhysicalStatus_var.get_impedance_Imaginary_B() );
        set_impedance_Imaginary_C( ResourcesPhysicalStatus_var.get_impedance_Imaginary_C() );
        set_impedance_Real_A( ResourcesPhysicalStatus_var.get_impedance_Real_A() );
        set_impedance_Real_B( ResourcesPhysicalStatus_var.get_impedance_Real_B() );
        set_impedance_Real_C( ResourcesPhysicalStatus_var.get_impedance_Real_C() );
        set_loadInstanceName( ResourcesPhysicalStatus_var.get_loadInstanceName() );
        set_name( ResourcesPhysicalStatus_var.get_name() );
        set_phases( ResourcesPhysicalStatus_var.get_phases() );
        set_power_Imaginary_A( ResourcesPhysicalStatus_var.get_power_Imaginary_A() );
        set_power_Imaginary_B( ResourcesPhysicalStatus_var.get_power_Imaginary_B() );
        set_power_Imaginary_C( ResourcesPhysicalStatus_var.get_power_Imaginary_C() );
        set_power_Real_A( ResourcesPhysicalStatus_var.get_power_Real_A() );
        set_power_Real_B( ResourcesPhysicalStatus_var.get_power_Real_B() );
        set_power_Real_C( ResourcesPhysicalStatus_var.get_power_Real_C() );
        set_status( ResourcesPhysicalStatus_var.get_status() );
        set_type( ResourcesPhysicalStatus_var.get_type() );
        set_voltage_Imaginary_A( ResourcesPhysicalStatus_var.get_voltage_Imaginary_A() );
        set_voltage_Imaginary_B( ResourcesPhysicalStatus_var.get_voltage_Imaginary_B() );
        set_voltage_Imaginary_C( ResourcesPhysicalStatus_var.get_voltage_Imaginary_C() );
        set_voltage_Real_A( ResourcesPhysicalStatus_var.get_voltage_Real_A() );
        set_voltage_Real_B( ResourcesPhysicalStatus_var.get_voltage_Real_B() );
        set_voltage_Real_C( ResourcesPhysicalStatus_var.get_voltage_Real_C() );
    }

    /**
    * Returns the value of the attribute whose name is "datamemberName"
    * for this object.
    *
    * @param datamemberName name of attribute whose value is to be
    * returned
    * @return value of the attribute whose name is "datamemberName"
    * for this object
    */
    public Object getAttribute( String datamemberName ) {
        if ( "current_Imaginary_A".equals(datamemberName) ) return new Float(get_current_Imaginary_A());
        else if ( "current_Imaginary_B".equals(datamemberName) ) return new Float(get_current_Imaginary_B());
        else if ( "current_Imaginary_C".equals(datamemberName) ) return new Float(get_current_Imaginary_C());
        else if ( "current_Real_A".equals(datamemberName) ) return new Float(get_current_Real_A());
        else if ( "current_Real_B".equals(datamemberName) ) return new Float(get_current_Real_B());
        else if ( "current_Real_C".equals(datamemberName) ) return new Float(get_current_Real_C());
        else if ( "gridNodeId".equals(datamemberName) ) return get_gridNodeId();
        else if ( "impedance_Imaginary_A".equals(datamemberName) ) return new Float(get_impedance_Imaginary_A());
        else if ( "impedance_Imaginary_B".equals(datamemberName) ) return new Float(get_impedance_Imaginary_B());
        else if ( "impedance_Imaginary_C".equals(datamemberName) ) return new Float(get_impedance_Imaginary_C());
        else if ( "impedance_Real_A".equals(datamemberName) ) return new Float(get_impedance_Real_A());
        else if ( "impedance_Real_B".equals(datamemberName) ) return new Float(get_impedance_Real_B());
        else if ( "impedance_Real_C".equals(datamemberName) ) return new Float(get_impedance_Real_C());
        else if ( "loadInstanceName".equals(datamemberName) ) return get_loadInstanceName();
        else if ( "name".equals(datamemberName) ) return get_name();
        else if ( "phases".equals(datamemberName) ) return get_phases();
        else if ( "power_Imaginary_A".equals(datamemberName) ) return new Float(get_power_Imaginary_A());
        else if ( "power_Imaginary_B".equals(datamemberName) ) return new Float(get_power_Imaginary_B());
        else if ( "power_Imaginary_C".equals(datamemberName) ) return new Float(get_power_Imaginary_C());
        else if ( "power_Real_A".equals(datamemberName) ) return new Float(get_power_Real_A());
        else if ( "power_Real_B".equals(datamemberName) ) return new Float(get_power_Real_B());
        else if ( "power_Real_C".equals(datamemberName) ) return new Float(get_power_Real_C());
        else if ( "status".equals(datamemberName) ) return new Boolean(get_status());
        else if ( "type".equals(datamemberName) ) return get_type();
        else if ( "voltage_Imaginary_A".equals(datamemberName) ) return new Float(get_voltage_Imaginary_A());
        else if ( "voltage_Imaginary_B".equals(datamemberName) ) return new Float(get_voltage_Imaginary_B());
        else if ( "voltage_Imaginary_C".equals(datamemberName) ) return new Float(get_voltage_Imaginary_C());
        else if ( "voltage_Real_A".equals(datamemberName) ) return new Float(get_voltage_Real_A());
        else if ( "voltage_Real_B".equals(datamemberName) ) return new Float(get_voltage_Real_B());
        else if ( "voltage_Real_C".equals(datamemberName) ) return new Float(get_voltage_Real_C());
        else return super.getAttribute( datamemberName );
    }

    protected boolean setAttributeAux( String datamemberName, String val ) {
        boolean retval = true;
        if ( "current_Imaginary_A".equals( datamemberName) ) set_current_Imaginary_A( Float.parseFloat(val) );
        else if ( "current_Imaginary_B".equals( datamemberName) ) set_current_Imaginary_B( Float.parseFloat(val) );
        else if ( "current_Imaginary_C".equals( datamemberName) ) set_current_Imaginary_C( Float.parseFloat(val) );
        else if ( "current_Real_A".equals( datamemberName) ) set_current_Real_A( Float.parseFloat(val) );
        else if ( "current_Real_B".equals( datamemberName) ) set_current_Real_B( Float.parseFloat(val) );
        else if ( "current_Real_C".equals( datamemberName) ) set_current_Real_C( Float.parseFloat(val) );
        else if ( "gridNodeId".equals( datamemberName) ) set_gridNodeId( val );
        else if ( "impedance_Imaginary_A".equals( datamemberName) ) set_impedance_Imaginary_A( Float.parseFloat(val) );
        else if ( "impedance_Imaginary_B".equals( datamemberName) ) set_impedance_Imaginary_B( Float.parseFloat(val) );
        else if ( "impedance_Imaginary_C".equals( datamemberName) ) set_impedance_Imaginary_C( Float.parseFloat(val) );
        else if ( "impedance_Real_A".equals( datamemberName) ) set_impedance_Real_A( Float.parseFloat(val) );
        else if ( "impedance_Real_B".equals( datamemberName) ) set_impedance_Real_B( Float.parseFloat(val) );
        else if ( "impedance_Real_C".equals( datamemberName) ) set_impedance_Real_C( Float.parseFloat(val) );
        else if ( "loadInstanceName".equals( datamemberName) ) set_loadInstanceName( val );
        else if ( "name".equals( datamemberName) ) set_name( val );
        else if ( "phases".equals( datamemberName) ) set_phases( val );
        else if ( "power_Imaginary_A".equals( datamemberName) ) set_power_Imaginary_A( Float.parseFloat(val) );
        else if ( "power_Imaginary_B".equals( datamemberName) ) set_power_Imaginary_B( Float.parseFloat(val) );
        else if ( "power_Imaginary_C".equals( datamemberName) ) set_power_Imaginary_C( Float.parseFloat(val) );
        else if ( "power_Real_A".equals( datamemberName) ) set_power_Real_A( Float.parseFloat(val) );
        else if ( "power_Real_B".equals( datamemberName) ) set_power_Real_B( Float.parseFloat(val) );
        else if ( "power_Real_C".equals( datamemberName) ) set_power_Real_C( Float.parseFloat(val) );
        else if ( "status".equals( datamemberName) ) set_status( Boolean.parseBoolean(val) );
        else if ( "type".equals( datamemberName) ) set_type( val );
        else if ( "voltage_Imaginary_A".equals( datamemberName) ) set_voltage_Imaginary_A( Float.parseFloat(val) );
        else if ( "voltage_Imaginary_B".equals( datamemberName) ) set_voltage_Imaginary_B( Float.parseFloat(val) );
        else if ( "voltage_Imaginary_C".equals( datamemberName) ) set_voltage_Imaginary_C( Float.parseFloat(val) );
        else if ( "voltage_Real_A".equals( datamemberName) ) set_voltage_Real_A( Float.parseFloat(val) );
        else if ( "voltage_Real_B".equals( datamemberName) ) set_voltage_Real_B( Float.parseFloat(val) );
        else if ( "voltage_Real_C".equals( datamemberName) ) set_voltage_Real_C( Float.parseFloat(val) );
        else retval = super.setAttributeAux( datamemberName, val );

        return retval;
    }

    protected boolean setAttributeAux( String datamemberName, Object val ) {
        boolean retval = true;
        if ( "current_Imaginary_A".equals( datamemberName) ) set_current_Imaginary_A( (Float)val );
        else if ( "current_Imaginary_B".equals( datamemberName) ) set_current_Imaginary_B( (Float)val );
        else if ( "current_Imaginary_C".equals( datamemberName) ) set_current_Imaginary_C( (Float)val );
        else if ( "current_Real_A".equals( datamemberName) ) set_current_Real_A( (Float)val );
        else if ( "current_Real_B".equals( datamemberName) ) set_current_Real_B( (Float)val );
        else if ( "current_Real_C".equals( datamemberName) ) set_current_Real_C( (Float)val );
        else if ( "gridNodeId".equals( datamemberName) ) set_gridNodeId( (String)val );
        else if ( "impedance_Imaginary_A".equals( datamemberName) ) set_impedance_Imaginary_A( (Float)val );
        else if ( "impedance_Imaginary_B".equals( datamemberName) ) set_impedance_Imaginary_B( (Float)val );
        else if ( "impedance_Imaginary_C".equals( datamemberName) ) set_impedance_Imaginary_C( (Float)val );
        else if ( "impedance_Real_A".equals( datamemberName) ) set_impedance_Real_A( (Float)val );
        else if ( "impedance_Real_B".equals( datamemberName) ) set_impedance_Real_B( (Float)val );
        else if ( "impedance_Real_C".equals( datamemberName) ) set_impedance_Real_C( (Float)val );
        else if ( "loadInstanceName".equals( datamemberName) ) set_loadInstanceName( (String)val );
        else if ( "name".equals( datamemberName) ) set_name( (String)val );
        else if ( "phases".equals( datamemberName) ) set_phases( (String)val );
        else if ( "power_Imaginary_A".equals( datamemberName) ) set_power_Imaginary_A( (Float)val );
        else if ( "power_Imaginary_B".equals( datamemberName) ) set_power_Imaginary_B( (Float)val );
        else if ( "power_Imaginary_C".equals( datamemberName) ) set_power_Imaginary_C( (Float)val );
        else if ( "power_Real_A".equals( datamemberName) ) set_power_Real_A( (Float)val );
        else if ( "power_Real_B".equals( datamemberName) ) set_power_Real_B( (Float)val );
        else if ( "power_Real_C".equals( datamemberName) ) set_power_Real_C( (Float)val );
        else if ( "status".equals( datamemberName) ) set_status( (Boolean)val );
        else if ( "type".equals( datamemberName) ) set_type( (String)val );
        else if ( "voltage_Imaginary_A".equals( datamemberName) ) set_voltage_Imaginary_A( (Float)val );
        else if ( "voltage_Imaginary_B".equals( datamemberName) ) set_voltage_Imaginary_B( (Float)val );
        else if ( "voltage_Imaginary_C".equals( datamemberName) ) set_voltage_Imaginary_C( (Float)val );
        else if ( "voltage_Real_A".equals( datamemberName) ) set_voltage_Real_A( (Float)val );
        else if ( "voltage_Real_B".equals( datamemberName) ) set_voltage_Real_B( (Float)val );
        else if ( "voltage_Real_C".equals( datamemberName) ) set_voltage_Real_C( (Float)val );
        else retval = super.setAttributeAux( datamemberName, val );

        return retval;
    }

    @Override
    protected SuppliedAttributes createSuppliedDatamembers(boolean force) {
        SuppliedAttributes datamembers = _factory.createSuppliedAttributes();
 
        if (_publishAttributeNameSet.contains("current_Imaginary_A") && _current_Imaginary_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("current_Imaginary_A"), getAttribute("current_Imaginary_A").toString().getBytes() );
            _current_Imaginary_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("current_Imaginary_B") && _current_Imaginary_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("current_Imaginary_B"), getAttribute("current_Imaginary_B").toString().getBytes() );
            _current_Imaginary_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("current_Imaginary_C") && _current_Imaginary_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("current_Imaginary_C"), getAttribute("current_Imaginary_C").toString().getBytes() );
            _current_Imaginary_C.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("current_Real_A") && _current_Real_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("current_Real_A"), getAttribute("current_Real_A").toString().getBytes() );
            _current_Real_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("current_Real_B") && _current_Real_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("current_Real_B"), getAttribute("current_Real_B").toString().getBytes() );
            _current_Real_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("current_Real_C") && _current_Real_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("current_Real_C"), getAttribute("current_Real_C").toString().getBytes() );
            _current_Real_C.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("gridNodeId") && _gridNodeId.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("gridNodeId"), getAttribute("gridNodeId").toString().getBytes() );
            _gridNodeId.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("impedance_Imaginary_A") && _impedance_Imaginary_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("impedance_Imaginary_A"), getAttribute("impedance_Imaginary_A").toString().getBytes() );
            _impedance_Imaginary_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("impedance_Imaginary_B") && _impedance_Imaginary_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("impedance_Imaginary_B"), getAttribute("impedance_Imaginary_B").toString().getBytes() );
            _impedance_Imaginary_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("impedance_Imaginary_C") && _impedance_Imaginary_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("impedance_Imaginary_C"), getAttribute("impedance_Imaginary_C").toString().getBytes() );
            _impedance_Imaginary_C.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("impedance_Real_A") && _impedance_Real_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("impedance_Real_A"), getAttribute("impedance_Real_A").toString().getBytes() );
            _impedance_Real_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("impedance_Real_B") && _impedance_Real_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("impedance_Real_B"), getAttribute("impedance_Real_B").toString().getBytes() );
            _impedance_Real_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("impedance_Real_C") && _impedance_Real_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("impedance_Real_C"), getAttribute("impedance_Real_C").toString().getBytes() );
            _impedance_Real_C.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("loadInstanceName") && _loadInstanceName.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("loadInstanceName"), getAttribute("loadInstanceName").toString().getBytes() );
            _loadInstanceName.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("name") && _name.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("name"), getAttribute("name").toString().getBytes() );
            _name.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("phases") && _phases.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("phases"), getAttribute("phases").toString().getBytes() );
            _phases.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("power_Imaginary_A") && _power_Imaginary_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("power_Imaginary_A"), getAttribute("power_Imaginary_A").toString().getBytes() );
            _power_Imaginary_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("power_Imaginary_B") && _power_Imaginary_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("power_Imaginary_B"), getAttribute("power_Imaginary_B").toString().getBytes() );
            _power_Imaginary_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("power_Imaginary_C") && _power_Imaginary_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("power_Imaginary_C"), getAttribute("power_Imaginary_C").toString().getBytes() );
            _power_Imaginary_C.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("power_Real_A") && _power_Real_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("power_Real_A"), getAttribute("power_Real_A").toString().getBytes() );
            _power_Real_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("power_Real_B") && _power_Real_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("power_Real_B"), getAttribute("power_Real_B").toString().getBytes() );
            _power_Real_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("power_Real_C") && _power_Real_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("power_Real_C"), getAttribute("power_Real_C").toString().getBytes() );
            _power_Real_C.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("status") && _status.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("status"), getAttribute("status").toString().getBytes() );
            _status.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("type") && _type.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("type"), getAttribute("type").toString().getBytes() );
            _type.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("voltage_Imaginary_A") && _voltage_Imaginary_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("voltage_Imaginary_A"), getAttribute("voltage_Imaginary_A").toString().getBytes() );
            _voltage_Imaginary_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("voltage_Imaginary_B") && _voltage_Imaginary_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("voltage_Imaginary_B"), getAttribute("voltage_Imaginary_B").toString().getBytes() );
            _voltage_Imaginary_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("voltage_Imaginary_C") && _voltage_Imaginary_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("voltage_Imaginary_C"), getAttribute("voltage_Imaginary_C").toString().getBytes() );
            _voltage_Imaginary_C.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("voltage_Real_A") && _voltage_Real_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("voltage_Real_A"), getAttribute("voltage_Real_A").toString().getBytes() );
            _voltage_Real_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("voltage_Real_B") && _voltage_Real_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("voltage_Real_B"), getAttribute("voltage_Real_B").toString().getBytes() );
            _voltage_Real_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("voltage_Real_C") && _voltage_Real_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("voltage_Real_C"), getAttribute("voltage_Real_C").toString().getBytes() );
            _voltage_Real_C.setHasBeenUpdated();
        }

        return datamembers;
    }

    public void copyFrom( Object object ) {
        super.copyFrom( object );
        if ( object instanceof ResourcesPhysicalStatus ) {
            ResourcesPhysicalStatus data = (ResourcesPhysicalStatus)object;
            _current_Imaginary_A = data._current_Imaginary_A;
            _current_Imaginary_B = data._current_Imaginary_B;
            _current_Imaginary_C = data._current_Imaginary_C;
            _current_Real_A = data._current_Real_A;
            _current_Real_B = data._current_Real_B;
            _current_Real_C = data._current_Real_C;
            _gridNodeId = data._gridNodeId;
            _impedance_Imaginary_A = data._impedance_Imaginary_A;
            _impedance_Imaginary_B = data._impedance_Imaginary_B;
            _impedance_Imaginary_C = data._impedance_Imaginary_C;
            _impedance_Real_A = data._impedance_Real_A;
            _impedance_Real_B = data._impedance_Real_B;
            _impedance_Real_C = data._impedance_Real_C;
            _loadInstanceName = data._loadInstanceName;
            _name = data._name;
            _phases = data._phases;
            _power_Imaginary_A = data._power_Imaginary_A;
            _power_Imaginary_B = data._power_Imaginary_B;
            _power_Imaginary_C = data._power_Imaginary_C;
            _power_Real_A = data._power_Real_A;
            _power_Real_B = data._power_Real_B;
            _power_Real_C = data._power_Real_C;
            _status = data._status;
            _type = data._type;
            _voltage_Imaginary_A = data._voltage_Imaginary_A;
            _voltage_Imaginary_B = data._voltage_Imaginary_B;
            _voltage_Imaginary_C = data._voltage_Imaginary_C;
            _voltage_Real_A = data._voltage_Real_A;
            _voltage_Real_B = data._voltage_Real_B;
            _voltage_Real_C = data._voltage_Real_C;
        }
    }
}

