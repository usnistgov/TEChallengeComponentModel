// This file was generated by the WebGME Federates Exporter plugin. Do not edit manually!

package TEChallenge;

import java.util.HashSet;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.cpswt.utils.CpswtUtils;

import hla.rti.AttributeHandleSet;
import hla.rti.FederateNotExecutionMember;
import hla.rti.LogicalTime;
import hla.rti.NameNotFound;
import hla.rti.ObjectClassNotDefined;
import hla.rti.ObjectClassNotPublished;
import hla.rti.ObjectClassNotSubscribed;
import hla.rti.RTIambassador;
import hla.rti.ReflectedAttributes;
import hla.rti.SuppliedAttributes;

import org.cpswt.hla.*;

/**
* Implements ObjectRoot.GridVoltageState
*/
public class GridVoltageState extends ObjectRoot {

    private static final Logger logger = LogManager.getLogger();

    /**
    * Creates an instance of the GridVoltageState object class with default attribute values.
    */
    public GridVoltageState() {}

    private static int _grid_Voltage_Imaginary_A_handle;
    private static int _grid_Voltage_Imaginary_B_handle;
    private static int _grid_Voltage_Imaginary_C_handle;
    private static int _grid_Voltage_Real_A_handle;
    private static int _grid_Voltage_Real_B_handle;
    private static int _grid_Voltage_Real_C_handle;

    private static boolean _isInitialized = false;

    private static int _handle;

    /**
    * Returns the handle (RTI assigned) of the GridVoltageState object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the handle of the class pertaining to the reference,
    * rather than the handle of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassHandle()}.
    *
    * @return the RTI assigned integer handle that represents this object class
    */
    public static int get_handle() {
        return _handle;
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of the GridVoltageState object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return the name of the class pertaining to the reference,
    * rather than the name of the class for the instance referred to by the reference.
    * For the polymorphic version of this method, use {@link #getClassName()}.
    *
    * @return the fully-qualified HLA class path for this object class
    */
    public static String get_class_name() {
        return "ObjectRoot.GridVoltageState";
    }

    /**
    * Returns the simple name (the last name in the dot-delimited fully-qualified
    * class name) of the GridVoltageState object class.
    *
    * @return the name of this object class
    */
    public static String get_simple_class_name() {
        return "GridVoltageState";
    }

    private static Set< String > _datamemberNames = new HashSet< String >();
    private static Set< String > _allDatamemberNames = new HashSet< String >();

    /**
    * Returns a set containing the names of all of the non-hidden attributes in the
    * GridVoltageState object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #getAttributeNames()}.
    *
    * @return a modifiable set of the non-hidden attribute names for this object class
    */
    public static Set< String > get_attribute_names() {
        return new HashSet< String >(_datamemberNames);
    }

    /**
    * Returns a set containing the names of all of the attributes in the
    * GridVoltageState object class.
    * Note: As this is a static method, it is NOT polymorphic, and so, if called on
    * a reference will return a set of parameter names pertaining to the reference,
    * rather than the parameter names of the class for the instance referred to by
    * the reference.  For the polymorphic version of this method, use
    * {@link #getAttributeNames()}.
    *
    * @return a modifiable set of the attribute names for this object class
    */
    public static Set< String > get_all_attribute_names() {
        return new HashSet< String >(_allDatamemberNames);
    }

    private static Set< String > _publishAttributeNameSet = new HashSet< String >();
    private static Set< String > _subscribeAttributeNameSet = new HashSet< String >();

    static {
        _classNameSet.add("ObjectRoot.GridVoltageState");
        _classNameClassMap.put("ObjectRoot.GridVoltageState", GridVoltageState.class);

        _datamemberClassNameSetMap.put("ObjectRoot.GridVoltageState", _datamemberNames);
        _allDatamemberClassNameSetMap.put("ObjectRoot.GridVoltageState", _allDatamemberNames);

        _datamemberNames.add("grid_Voltage_Imaginary_A");
        _datamemberNames.add("grid_Voltage_Imaginary_B");
        _datamemberNames.add("grid_Voltage_Imaginary_C");
        _datamemberNames.add("grid_Voltage_Real_A");
        _datamemberNames.add("grid_Voltage_Real_B");
        _datamemberNames.add("grid_Voltage_Real_C");

        _datamemberTypeMap.put("grid_Voltage_Imaginary_A", "float");
        _datamemberTypeMap.put("grid_Voltage_Imaginary_B", "float");
        _datamemberTypeMap.put("grid_Voltage_Imaginary_C", "float");
        _datamemberTypeMap.put("grid_Voltage_Real_A", "float");
        _datamemberTypeMap.put("grid_Voltage_Real_B", "float");
        _datamemberTypeMap.put("grid_Voltage_Real_C", "float");

        _allDatamemberNames.add("grid_Voltage_Imaginary_A");
        _allDatamemberNames.add("grid_Voltage_Imaginary_B");
        _allDatamemberNames.add("grid_Voltage_Imaginary_C");
        _allDatamemberNames.add("grid_Voltage_Real_A");
        _allDatamemberNames.add("grid_Voltage_Real_B");
        _allDatamemberNames.add("grid_Voltage_Real_C");

        _classNamePublishAttributeNameMap.put("ObjectRoot.GridVoltageState", _publishAttributeNameSet);
        _classNameSubscribeAttributeNameMap.put("ObjectRoot.GridVoltageState", _subscribeAttributeNameSet);
    }

    protected static void init(RTIambassador rti) {
        if (_isInitialized) return;
        _isInitialized = true;

        ObjectRoot.init(rti);

        boolean isNotInitialized = true;
        while(isNotInitialized) {
            try {
                _handle = rti.getObjectClassHandle("ObjectRoot.GridVoltageState");
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

        _classNameHandleMap.put("ObjectRoot.GridVoltageState", get_handle());
        _classHandleNameMap.put(get_handle(), "ObjectRoot.GridVoltageState");
        _classHandleSimpleNameMap.put(get_handle(), "GridVoltageState");

        isNotInitialized = true;
        while(isNotInitialized) {
            try {
                _grid_Voltage_Imaginary_A_handle = rti.getAttributeHandle("grid_Voltage_Imaginary_A", get_handle());
                _grid_Voltage_Imaginary_B_handle = rti.getAttributeHandle("grid_Voltage_Imaginary_B", get_handle());
                _grid_Voltage_Imaginary_C_handle = rti.getAttributeHandle("grid_Voltage_Imaginary_C", get_handle());
                _grid_Voltage_Real_A_handle = rti.getAttributeHandle("grid_Voltage_Real_A", get_handle());
                _grid_Voltage_Real_B_handle = rti.getAttributeHandle("grid_Voltage_Real_B", get_handle());
                _grid_Voltage_Real_C_handle = rti.getAttributeHandle("grid_Voltage_Real_C", get_handle());
                isNotInitialized = false;
            } catch (FederateNotExecutionMember e) {
                logger.error("could not initialize: Federate Not Execution Member", e);
                return;
            } catch (ObjectClassNotDefined e) {
                logger.error("could not initialize: Object Class Not Defined", e);
                return;
            } catch (NameNotFound e) {
                logger.error("could not initialize: Name Not Found", e);
                return;
            } catch (Exception e) {
                logger.error(e);
                CpswtUtils.sleepDefault();
            }
        }

        _datamemberNameHandleMap.put("ObjectRoot.GridVoltageState.grid_Voltage_Imaginary_A", _grid_Voltage_Imaginary_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.GridVoltageState.grid_Voltage_Imaginary_B", _grid_Voltage_Imaginary_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.GridVoltageState.grid_Voltage_Imaginary_C", _grid_Voltage_Imaginary_C_handle);
        _datamemberNameHandleMap.put("ObjectRoot.GridVoltageState.grid_Voltage_Real_A", _grid_Voltage_Real_A_handle);
        _datamemberNameHandleMap.put("ObjectRoot.GridVoltageState.grid_Voltage_Real_B", _grid_Voltage_Real_B_handle);
        _datamemberNameHandleMap.put("ObjectRoot.GridVoltageState.grid_Voltage_Real_C", _grid_Voltage_Real_C_handle);

        _datamemberHandleNameMap.put(_grid_Voltage_Imaginary_A_handle, "grid_Voltage_Imaginary_A");
        _datamemberHandleNameMap.put(_grid_Voltage_Imaginary_B_handle, "grid_Voltage_Imaginary_B");
        _datamemberHandleNameMap.put(_grid_Voltage_Imaginary_C_handle, "grid_Voltage_Imaginary_C");
        _datamemberHandleNameMap.put(_grid_Voltage_Real_A_handle, "grid_Voltage_Real_A");
        _datamemberHandleNameMap.put(_grid_Voltage_Real_B_handle, "grid_Voltage_Real_B");
        _datamemberHandleNameMap.put(_grid_Voltage_Real_C_handle, "grid_Voltage_Real_C");
    }

    private static boolean _isPublished = false;

    /**
    * Publishes the GridVoltageState object class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void publish(RTIambassador rti) {
        if (_isPublished) return;

        init(rti);

        AttributeHandleSet publishedAttributeHandleSet = _factory.createAttributeHandleSet();
        for(String attributeName : _publishAttributeNameSet) {
            try {
                publishedAttributeHandleSet.add(_datamemberNameHandleMap.get("ObjectRoot.GridVoltageState." + attributeName));
                logger.trace("publish {}:{}", get_class_name(), attributeName);
            } catch (Exception e) {
                logger.error("could not publish \"" + attributeName + "\" attribute.", e);
            }
        }

        synchronized(rti) {
            boolean isNotPublished = true;
            while(isNotPublished) {
                try {
                    rti.publishObjectClass(get_handle(), publishedAttributeHandleSet);
                    isNotPublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not publish: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not publish: Object Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = true;
        logger.debug("publish: {}", get_class_name());
    }

    /**
    * Unpublishes the GridVoltageState object class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unpublish(RTIambassador rti) {
        if (!_isPublished) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnpublished = true;
            while(isNotUnpublished) {
                try {
                    rti.unpublishObjectClass(get_handle());
                    isNotUnpublished = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unpublish: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not unpublish: Object Class Not Defined", e);
                    return;
                } catch (ObjectClassNotPublished e) {
                    logger.error("could not unpublish: Object Class Not Published", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isPublished = false;
        logger.debug("unpublish: {}", get_class_name());
    }

    private static boolean _isSubscribed = false;

    /**
    * Subscribes a federate to the GridVoltageState object class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void subscribe(RTIambassador rti) {
        if (_isSubscribed) return;

        init(rti);

        AttributeHandleSet subscribedAttributeHandleSet = _factory.createAttributeHandleSet();
        for(String attributeName : _subscribeAttributeNameSet) {
            try {
                subscribedAttributeHandleSet.add(_datamemberNameHandleMap.get("ObjectRoot.GridVoltageState." + attributeName));
                logger.trace("subscribe {}:{}", get_class_name(), attributeName);
            } catch (Exception e) {
                logger.error("could not subscribe to \"" + attributeName + "\" attribute.", e);
            }
        }

        synchronized(rti) {
            boolean isNotSubscribed = true;
            while(isNotSubscribed) {
                try {
                    rti.subscribeObjectClassAttributes(get_handle(), subscribedAttributeHandleSet);
                    isNotSubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not subscribe: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not subscribe: Object Class Not Defined", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = true;
        logger.debug("subscribe: {}", get_class_name());
    }

    /**
    * Unsubscribes a federate from the GridVoltageState object class.
    *
    * @param rti handle to the Local RTI Component
    */
    public static void unsubscribe(RTIambassador rti) {
        if (!_isSubscribed) return;

        init(rti);

        synchronized(rti) {
            boolean isNotUnsubscribed = true;
            while(isNotUnsubscribed) {
                try {
                    rti.unsubscribeObjectClass(get_handle());
                    isNotUnsubscribed = false;
                } catch (FederateNotExecutionMember e) {
                    logger.error("could not unsubscribe: Federate Not Execution Member", e);
                    return;
                } catch (ObjectClassNotDefined e) {
                    logger.error("could not unsubscribe: Object Class Not Defined", e);
                    return;
                } catch (ObjectClassNotSubscribed e) {
                    logger.error("could not unsubscribe: Object Class Not Subscribed", e);
                    return;
                } catch (Exception e) {
                    logger.error(e);
                    CpswtUtils.sleepDefault();
                }
            }
        }

        _isSubscribed = false;
        logger.debug("unsubscribe: {}", get_class_name());
    }

    /**
    * Return true if "handle" is equal to the handle (RTI assigned) of this class
    * (that is, the GridVoltageState object class).
    *
    * @param handle handle to compare to the value of the handle (RTI assigned) of
    * this class (the GridVoltageState object class).
    * @return "true" if "handle" matches the value of the handle of this class
    * (that is, the GridVoltageState object class).
    */
    public static boolean match(int handle) {
        return handle == get_handle();
    }

    /**
    * Returns the handle (RTI assigned) of this instance's object class .
    *
    * @return the handle (RTI assigned) if this instance's object class
    */
    public int getClassHandle() {
        return get_handle();
    }

    /**
    * Returns the fully-qualified (dot-delimited) name of this instance's object class.
    *
    * @return the fully-qualified (dot-delimited) name of this instance's object class
    */
    public String getClassName() {
        return get_class_name();
    }

    /**
    * Returns the simple name (last name in its fully-qualified dot-delimited name)
    * of this instance's object class.
    *
    * @return the simple name of this instance's object class
    */
    public String getSimpleClassName() {
        return get_simple_class_name();
    }

    /**
    * Returns a set containing the names of all of the non-hiddenattributes of an
    * object class instance.
    *
    * @return set containing the names of all of the attributes of an
    * object class instance
    */
    public Set< String > getAttributeNames() {
        return get_attribute_names();
    }

    /**
    * Returns a set containing the names of all of the attributes of an
    * object class instance.
    *
    * @return set containing the names of all of the attributes of an
    * object class instance
    */
    public Set< String > getAllAttributeNames() {
        return get_all_attribute_names();
    }

    @Override
    public String getAttributeName(int datamemberHandle) {
        if (datamemberHandle == _grid_Voltage_Imaginary_A_handle) return "grid_Voltage_Imaginary_A";
        else if (datamemberHandle == _grid_Voltage_Imaginary_B_handle) return "grid_Voltage_Imaginary_B";
        else if (datamemberHandle == _grid_Voltage_Imaginary_C_handle) return "grid_Voltage_Imaginary_C";
        else if (datamemberHandle == _grid_Voltage_Real_A_handle) return "grid_Voltage_Real_A";
        else if (datamemberHandle == _grid_Voltage_Real_B_handle) return "grid_Voltage_Real_B";
        else if (datamemberHandle == _grid_Voltage_Real_C_handle) return "grid_Voltage_Real_C";
        else return super.getAttributeName(datamemberHandle);
    }

    /**
    * Publishes the object class of this instance of the class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void publishObject(RTIambassador rti) {
        publish(rti);
    }

    /**
    * Unpublishes the object class of this instance of this class for a federate.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unpublishObject(RTIambassador rti) {
        unpublish(rti);
    }

    /**
    * Subscribes a federate to the object class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void subscribeObject(RTIambassador rti) {
        subscribe(rti);
    }

    /**
    * Unsubscribes a federate from the object class of this instance of this class.
    *
    * @param rti handle to the Local RTI Component
    */
    public void unsubscribeObject(RTIambassador rti) {
        unsubscribe(rti);
    }

    @Override
    public String toString() {
        return getClass().getName() + "("
                + "grid_Voltage_Imaginary_A:" + get_grid_Voltage_Imaginary_A()
                + "," + "grid_Voltage_Imaginary_B:" + get_grid_Voltage_Imaginary_B()
                + "," + "grid_Voltage_Imaginary_C:" + get_grid_Voltage_Imaginary_C()
                + "," + "grid_Voltage_Real_A:" + get_grid_Voltage_Real_A()
                + "," + "grid_Voltage_Real_B:" + get_grid_Voltage_Real_B()
                + "," + "grid_Voltage_Real_C:" + get_grid_Voltage_Real_C()
                + ")";
    }


    /**
    * Publishes the "grid_Voltage_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Imaginary_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_grid_Voltage_Imaginary_A() {
        _publishAttributeNameSet.add( "grid_Voltage_Imaginary_A" );
    }

    /**
    * Unpublishes the "grid_Voltage_Imaginary_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Imaginary_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_grid_Voltage_Imaginary_A() {
        _publishAttributeNameSet.remove( "grid_Voltage_Imaginary_A" );
    }

    /**
    * Subscribes a federate to the "grid_Voltage_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Imaginary_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_grid_Voltage_Imaginary_A() {
        _subscribeAttributeNameSet.add( "grid_Voltage_Imaginary_A" );
    }

    /**
    * Unsubscribes a federate from the "grid_Voltage_Imaginary_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Imaginary_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_grid_Voltage_Imaginary_A() {
        _subscribeAttributeNameSet.remove( "grid_Voltage_Imaginary_A" );
    }

    /**
    * Publishes the "grid_Voltage_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Imaginary_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_grid_Voltage_Imaginary_B() {
        _publishAttributeNameSet.add( "grid_Voltage_Imaginary_B" );
    }

    /**
    * Unpublishes the "grid_Voltage_Imaginary_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Imaginary_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_grid_Voltage_Imaginary_B() {
        _publishAttributeNameSet.remove( "grid_Voltage_Imaginary_B" );
    }

    /**
    * Subscribes a federate to the "grid_Voltage_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Imaginary_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_grid_Voltage_Imaginary_B() {
        _subscribeAttributeNameSet.add( "grid_Voltage_Imaginary_B" );
    }

    /**
    * Unsubscribes a federate from the "grid_Voltage_Imaginary_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Imaginary_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_grid_Voltage_Imaginary_B() {
        _subscribeAttributeNameSet.remove( "grid_Voltage_Imaginary_B" );
    }

    /**
    * Publishes the "grid_Voltage_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Imaginary_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_grid_Voltage_Imaginary_C() {
        _publishAttributeNameSet.add( "grid_Voltage_Imaginary_C" );
    }

    /**
    * Unpublishes the "grid_Voltage_Imaginary_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Imaginary_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_grid_Voltage_Imaginary_C() {
        _publishAttributeNameSet.remove( "grid_Voltage_Imaginary_C" );
    }

    /**
    * Subscribes a federate to the "grid_Voltage_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Imaginary_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_grid_Voltage_Imaginary_C() {
        _subscribeAttributeNameSet.add( "grid_Voltage_Imaginary_C" );
    }

    /**
    * Unsubscribes a federate from the "grid_Voltage_Imaginary_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Imaginary_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_grid_Voltage_Imaginary_C() {
        _subscribeAttributeNameSet.remove( "grid_Voltage_Imaginary_C" );
    }

    /**
    * Publishes the "grid_Voltage_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Real_A" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_grid_Voltage_Real_A() {
        _publishAttributeNameSet.add( "grid_Voltage_Real_A" );
    }

    /**
    * Unpublishes the "grid_Voltage_Real_A" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Real_A" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_grid_Voltage_Real_A() {
        _publishAttributeNameSet.remove( "grid_Voltage_Real_A" );
    }

    /**
    * Subscribes a federate to the "grid_Voltage_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Real_A" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_grid_Voltage_Real_A() {
        _subscribeAttributeNameSet.add( "grid_Voltage_Real_A" );
    }

    /**
    * Unsubscribes a federate from the "grid_Voltage_Real_A" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Real_A" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_grid_Voltage_Real_A() {
        _subscribeAttributeNameSet.remove( "grid_Voltage_Real_A" );
    }

    /**
    * Publishes the "grid_Voltage_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Real_B" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_grid_Voltage_Real_B() {
        _publishAttributeNameSet.add( "grid_Voltage_Real_B" );
    }

    /**
    * Unpublishes the "grid_Voltage_Real_B" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Real_B" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_grid_Voltage_Real_B() {
        _publishAttributeNameSet.remove( "grid_Voltage_Real_B" );
    }

    /**
    * Subscribes a federate to the "grid_Voltage_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Real_B" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_grid_Voltage_Real_B() {
        _subscribeAttributeNameSet.add( "grid_Voltage_Real_B" );
    }

    /**
    * Unsubscribes a federate from the "grid_Voltage_Real_B" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Real_B" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_grid_Voltage_Real_B() {
        _subscribeAttributeNameSet.remove( "grid_Voltage_Real_B" );
    }

    /**
    * Publishes the "grid_Voltage_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Real_C" attribute for publication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void publish_grid_Voltage_Real_C() {
        _publishAttributeNameSet.add( "grid_Voltage_Real_C" );
    }

    /**
    * Unpublishes the "grid_Voltage_Real_C" attribute of the attribute's containing object
    * class for a federate.
    * Note:  This method only marks the "grid_Voltage_Real_C" attribute for unpublication.
    * To actually publish the attribute, the federate must (re)publish its containing
    * object class.
    * (using &lt;objectClassName&gt;.publish( RTIambassador rti ) ).
    */
    public static void unpublish_grid_Voltage_Real_C() {
        _publishAttributeNameSet.remove( "grid_Voltage_Real_C" );
    }

    /**
    * Subscribes a federate to the "grid_Voltage_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Real_C" attribute for subscription.
    * To actually subscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void subscribe_grid_Voltage_Real_C() {
        _subscribeAttributeNameSet.add( "grid_Voltage_Real_C" );
    }

    /**
    * Unsubscribes a federate from the "grid_Voltage_Real_C" attribute of the attribute's
    * containing object class.
    * Note:  This method only marks the "grid_Voltage_Real_C" attribute for unsubscription.
    * To actually unsubscribe to the attribute, the federate must (re)subscribe to its
    * containing object class.
    * (using &lt;objectClassName&gt;.subscribe( RTIambassador rti ) ).
    */
    public static void unsubscribe_grid_Voltage_Real_C() {
        _subscribeAttributeNameSet.remove( "grid_Voltage_Real_C" );
    }

    protected Attribute< Float > _grid_Voltage_Imaginary_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "grid_Voltage_Imaginary_A" attribute to "value" for this object.
    *
    * @param value the new value for the "grid_Voltage_Imaginary_A" attribute
    */
    public void set_grid_Voltage_Imaginary_A( float value ) {
        _grid_Voltage_Imaginary_A.setValue( value );
        _grid_Voltage_Imaginary_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "grid_Voltage_Imaginary_A" attribute of this object.
    *
    * @return the value of the "grid_Voltage_Imaginary_A" attribute
    */
    public float get_grid_Voltage_Imaginary_A() {
        return _grid_Voltage_Imaginary_A.getValue();
    }

    /**
    * Returns the current timestamp of the "grid_Voltage_Imaginary_A" attribute of this object.
    *
    * @return the current timestamp of the "grid_Voltage_Imaginary_A" attribute
    */
    public double get_grid_Voltage_Imaginary_A_time() {
        return _grid_Voltage_Imaginary_A.getTime();
    }

    protected Attribute< Float > _grid_Voltage_Imaginary_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "grid_Voltage_Imaginary_B" attribute to "value" for this object.
    *
    * @param value the new value for the "grid_Voltage_Imaginary_B" attribute
    */
    public void set_grid_Voltage_Imaginary_B( float value ) {
        _grid_Voltage_Imaginary_B.setValue( value );
        _grid_Voltage_Imaginary_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "grid_Voltage_Imaginary_B" attribute of this object.
    *
    * @return the value of the "grid_Voltage_Imaginary_B" attribute
    */
    public float get_grid_Voltage_Imaginary_B() {
        return _grid_Voltage_Imaginary_B.getValue();
    }

    /**
    * Returns the current timestamp of the "grid_Voltage_Imaginary_B" attribute of this object.
    *
    * @return the current timestamp of the "grid_Voltage_Imaginary_B" attribute
    */
    public double get_grid_Voltage_Imaginary_B_time() {
        return _grid_Voltage_Imaginary_B.getTime();
    }

    protected Attribute< Float > _grid_Voltage_Imaginary_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "grid_Voltage_Imaginary_C" attribute to "value" for this object.
    *
    * @param value the new value for the "grid_Voltage_Imaginary_C" attribute
    */
    public void set_grid_Voltage_Imaginary_C( float value ) {
        _grid_Voltage_Imaginary_C.setValue( value );
        _grid_Voltage_Imaginary_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "grid_Voltage_Imaginary_C" attribute of this object.
    *
    * @return the value of the "grid_Voltage_Imaginary_C" attribute
    */
    public float get_grid_Voltage_Imaginary_C() {
        return _grid_Voltage_Imaginary_C.getValue();
    }

    /**
    * Returns the current timestamp of the "grid_Voltage_Imaginary_C" attribute of this object.
    *
    * @return the current timestamp of the "grid_Voltage_Imaginary_C" attribute
    */
    public double get_grid_Voltage_Imaginary_C_time() {
        return _grid_Voltage_Imaginary_C.getTime();
    }

    protected Attribute< Float > _grid_Voltage_Real_A =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "grid_Voltage_Real_A" attribute to "value" for this object.
    *
    * @param value the new value for the "grid_Voltage_Real_A" attribute
    */
    public void set_grid_Voltage_Real_A( float value ) {
        _grid_Voltage_Real_A.setValue( value );
        _grid_Voltage_Real_A.setTime( getTime() );
    }

    /**
    * Returns the value of the "grid_Voltage_Real_A" attribute of this object.
    *
    * @return the value of the "grid_Voltage_Real_A" attribute
    */
    public float get_grid_Voltage_Real_A() {
        return _grid_Voltage_Real_A.getValue();
    }

    /**
    * Returns the current timestamp of the "grid_Voltage_Real_A" attribute of this object.
    *
    * @return the current timestamp of the "grid_Voltage_Real_A" attribute
    */
    public double get_grid_Voltage_Real_A_time() {
        return _grid_Voltage_Real_A.getTime();
    }

    protected Attribute< Float > _grid_Voltage_Real_B =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "grid_Voltage_Real_B" attribute to "value" for this object.
    *
    * @param value the new value for the "grid_Voltage_Real_B" attribute
    */
    public void set_grid_Voltage_Real_B( float value ) {
        _grid_Voltage_Real_B.setValue( value );
        _grid_Voltage_Real_B.setTime( getTime() );
    }

    /**
    * Returns the value of the "grid_Voltage_Real_B" attribute of this object.
    *
    * @return the value of the "grid_Voltage_Real_B" attribute
    */
    public float get_grid_Voltage_Real_B() {
        return _grid_Voltage_Real_B.getValue();
    }

    /**
    * Returns the current timestamp of the "grid_Voltage_Real_B" attribute of this object.
    *
    * @return the current timestamp of the "grid_Voltage_Real_B" attribute
    */
    public double get_grid_Voltage_Real_B_time() {
        return _grid_Voltage_Real_B.getTime();
    }

    protected Attribute< Float > _grid_Voltage_Real_C =
            new Attribute< Float >(  new Float( 0 )  );

    /**
    * Set the value of the "grid_Voltage_Real_C" attribute to "value" for this object.
    *
    * @param value the new value for the "grid_Voltage_Real_C" attribute
    */
    public void set_grid_Voltage_Real_C( float value ) {
        _grid_Voltage_Real_C.setValue( value );
        _grid_Voltage_Real_C.setTime( getTime() );
    }

    /**
    * Returns the value of the "grid_Voltage_Real_C" attribute of this object.
    *
    * @return the value of the "grid_Voltage_Real_C" attribute
    */
    public float get_grid_Voltage_Real_C() {
        return _grid_Voltage_Real_C.getValue();
    }

    /**
    * Returns the current timestamp of the "grid_Voltage_Real_C" attribute of this object.
    *
    * @return the current timestamp of the "grid_Voltage_Real_C" attribute
    */
    public double get_grid_Voltage_Real_C_time() {
        return _grid_Voltage_Real_C.getTime();
    }

    protected GridVoltageState( ReflectedAttributes datamemberMap, boolean initFlag ) {
        super( datamemberMap, false );
        if ( initFlag ) setAttributes( datamemberMap );
    }

    protected GridVoltageState( ReflectedAttributes datamemberMap, LogicalTime logicalTime, boolean initFlag ) {
        super( datamemberMap, logicalTime, false );
        if ( initFlag ) setAttributes( datamemberMap );
    }

    /**
    * Creates an instance of the GridVoltageState object class, using
    * "datamemberMap" to initialize its attribute values.
    * "datamemberMap" is usually acquired as an argument to an RTI federate
    * callback method, such as "receiveInteraction".
    *
    * @param datamemberMap data structure containing initial values for the
    * attributes of this new GridVoltageState object class instance
    */
    public GridVoltageState( ReflectedAttributes datamemberMap ) {
        this( datamemberMap, true );
    }

    /**
    * Like {@link #GridVoltageState( ReflectedAttributes datamemberMap )}, except this
    * new GridVoltageState object class instance is given a timestamp of
    * "logicalTime".
    *
    * @param datamemberMap data structure containing initial values for the
    * attributes of this new GridVoltageState object class instance
    * @param logicalTime timestamp for this new GridVoltageState object class
    * instance
    */
    public GridVoltageState( ReflectedAttributes datamemberMap, LogicalTime logicalTime ) {
        this( datamemberMap, logicalTime, true );
    }

    /**
    * Creates a new GridVoltageState object class instance that is a duplicate
    * of the instance referred to by GridVoltageState_var.
    *
    * @param GridVoltageState_var GridVoltageState object class instance of which
    * this newly created GridVoltageState object class instance will be a
    * duplicate
    */
    public GridVoltageState( GridVoltageState GridVoltageState_var ) {
        super( GridVoltageState_var );

        set_grid_Voltage_Imaginary_A( GridVoltageState_var.get_grid_Voltage_Imaginary_A() );
        set_grid_Voltage_Imaginary_B( GridVoltageState_var.get_grid_Voltage_Imaginary_B() );
        set_grid_Voltage_Imaginary_C( GridVoltageState_var.get_grid_Voltage_Imaginary_C() );
        set_grid_Voltage_Real_A( GridVoltageState_var.get_grid_Voltage_Real_A() );
        set_grid_Voltage_Real_B( GridVoltageState_var.get_grid_Voltage_Real_B() );
        set_grid_Voltage_Real_C( GridVoltageState_var.get_grid_Voltage_Real_C() );
    }

    /**
    * Returns the value of the attribute whose name is "datamemberName"
    * for this object.
    *
    * @param datamemberName name of attribute whose value is to be
    * returned
    * @return value of the attribute whose name is "datamemberName"
    * for this object
    */
    public Object getAttribute( String datamemberName ) {
        if ( "grid_Voltage_Imaginary_A".equals(datamemberName) ) return new Float(get_grid_Voltage_Imaginary_A());
        else if ( "grid_Voltage_Imaginary_B".equals(datamemberName) ) return new Float(get_grid_Voltage_Imaginary_B());
        else if ( "grid_Voltage_Imaginary_C".equals(datamemberName) ) return new Float(get_grid_Voltage_Imaginary_C());
        else if ( "grid_Voltage_Real_A".equals(datamemberName) ) return new Float(get_grid_Voltage_Real_A());
        else if ( "grid_Voltage_Real_B".equals(datamemberName) ) return new Float(get_grid_Voltage_Real_B());
        else if ( "grid_Voltage_Real_C".equals(datamemberName) ) return new Float(get_grid_Voltage_Real_C());
        else return super.getAttribute( datamemberName );
    }

    protected boolean setAttributeAux( String datamemberName, String val ) {
        boolean retval = true;
        if ( "grid_Voltage_Imaginary_A".equals( datamemberName) ) set_grid_Voltage_Imaginary_A( Float.parseFloat(val) );
        else if ( "grid_Voltage_Imaginary_B".equals( datamemberName) ) set_grid_Voltage_Imaginary_B( Float.parseFloat(val) );
        else if ( "grid_Voltage_Imaginary_C".equals( datamemberName) ) set_grid_Voltage_Imaginary_C( Float.parseFloat(val) );
        else if ( "grid_Voltage_Real_A".equals( datamemberName) ) set_grid_Voltage_Real_A( Float.parseFloat(val) );
        else if ( "grid_Voltage_Real_B".equals( datamemberName) ) set_grid_Voltage_Real_B( Float.parseFloat(val) );
        else if ( "grid_Voltage_Real_C".equals( datamemberName) ) set_grid_Voltage_Real_C( Float.parseFloat(val) );
        else retval = super.setAttributeAux( datamemberName, val );

        return retval;
    }

    protected boolean setAttributeAux( String datamemberName, Object val ) {
        boolean retval = true;
        if ( "grid_Voltage_Imaginary_A".equals( datamemberName) ) set_grid_Voltage_Imaginary_A( (Float)val );
        else if ( "grid_Voltage_Imaginary_B".equals( datamemberName) ) set_grid_Voltage_Imaginary_B( (Float)val );
        else if ( "grid_Voltage_Imaginary_C".equals( datamemberName) ) set_grid_Voltage_Imaginary_C( (Float)val );
        else if ( "grid_Voltage_Real_A".equals( datamemberName) ) set_grid_Voltage_Real_A( (Float)val );
        else if ( "grid_Voltage_Real_B".equals( datamemberName) ) set_grid_Voltage_Real_B( (Float)val );
        else if ( "grid_Voltage_Real_C".equals( datamemberName) ) set_grid_Voltage_Real_C( (Float)val );
        else retval = super.setAttributeAux( datamemberName, val );

        return retval;
    }

    @Override
    protected SuppliedAttributes createSuppliedDatamembers(boolean force) {
        SuppliedAttributes datamembers = _factory.createSuppliedAttributes();
 
        if (_publishAttributeNameSet.contains("grid_Voltage_Imaginary_A") && _grid_Voltage_Imaginary_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("grid_Voltage_Imaginary_A"), getAttribute("grid_Voltage_Imaginary_A").toString().getBytes() );
            _grid_Voltage_Imaginary_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("grid_Voltage_Imaginary_B") && _grid_Voltage_Imaginary_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("grid_Voltage_Imaginary_B"), getAttribute("grid_Voltage_Imaginary_B").toString().getBytes() );
            _grid_Voltage_Imaginary_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("grid_Voltage_Imaginary_C") && _grid_Voltage_Imaginary_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("grid_Voltage_Imaginary_C"), getAttribute("grid_Voltage_Imaginary_C").toString().getBytes() );
            _grid_Voltage_Imaginary_C.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("grid_Voltage_Real_A") && _grid_Voltage_Real_A.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("grid_Voltage_Real_A"), getAttribute("grid_Voltage_Real_A").toString().getBytes() );
            _grid_Voltage_Real_A.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("grid_Voltage_Real_B") && _grid_Voltage_Real_B.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("grid_Voltage_Real_B"), getAttribute("grid_Voltage_Real_B").toString().getBytes() );
            _grid_Voltage_Real_B.setHasBeenUpdated();
        }

        if (_publishAttributeNameSet.contains("grid_Voltage_Real_C") && _grid_Voltage_Real_C.shouldBeUpdated(force)) {
            datamembers.add( getAttributeHandle("grid_Voltage_Real_C"), getAttribute("grid_Voltage_Real_C").toString().getBytes() );
            _grid_Voltage_Real_C.setHasBeenUpdated();
        }

        return datamembers;
    }

    public void copyFrom( Object object ) {
        super.copyFrom( object );
        if ( object instanceof GridVoltageState ) {
            GridVoltageState data = (GridVoltageState)object;
            _grid_Voltage_Imaginary_A = data._grid_Voltage_Imaginary_A;
            _grid_Voltage_Imaginary_B = data._grid_Voltage_Imaginary_B;
            _grid_Voltage_Imaginary_C = data._grid_Voltage_Imaginary_C;
            _grid_Voltage_Real_A = data._grid_Voltage_Real_A;
            _grid_Voltage_Real_B = data._grid_Voltage_Real_B;
            _grid_Voltage_Real_C = data._grid_Voltage_Real_C;
        }
    }
}

